# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _aisparser
else:
    import _aisparser

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def pos2ddd(arg1, arg2):
    return _aisparser.pos2ddd(arg1, arg2)

def pos2dmm(arg1, arg2):
    return _aisparser.pos2dmm(arg1, arg2)
MAX_NMEA_LENGTH = _aisparser.MAX_NMEA_LENGTH
MAX_NMEA_FIELDS = _aisparser.MAX_NMEA_FIELDS
START = _aisparser.START
END = _aisparser.END
DONE = _aisparser.DONE
class nmea_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    search = property(_aisparser.nmea_state_search_get, _aisparser.nmea_state_search_set)
    field = property(_aisparser.nmea_state_field_get, _aisparser.nmea_state_field_set)
    str = property(_aisparser.nmea_state_str_get, _aisparser.nmea_state_str_set)
    str_len = property(_aisparser.nmea_state_str_len_get, _aisparser.nmea_state_str_len_set)

    def __init__(self):
        _aisparser.nmea_state_swiginit(self, _aisparser.new_nmea_state())
    __swig_destroy__ = _aisparser.delete_nmea_state

# Register nmea_state in _aisparser:
_aisparser.nmea_state_swigregister(nmea_state)


def check_nmea_checksum(buffer, checksum):
    return _aisparser.check_nmea_checksum(buffer, checksum)

def nmea_checksum(buffer, checksum):
    return _aisparser.nmea_checksum(buffer, checksum)

def find_nmea_start(buffer):
    return _aisparser.find_nmea_start(buffer)

def ahextobin(c):
    return _aisparser.ahextobin(c)

def nmea_next_field(p):
    return _aisparser.nmea_next_field(p)

def nmea_uint(p):
    return _aisparser.nmea_uint(p)

def nmea_copy_field(dest, src, len):
    return _aisparser.nmea_copy_field(dest, src, len)
SIXBIT_LEN = _aisparser.SIXBIT_LEN
class sixbit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bits = property(_aisparser.sixbit_bits_get, _aisparser.sixbit_bits_set)
    p = property(_aisparser.sixbit_p_get, _aisparser.sixbit_p_set)
    remainder = property(_aisparser.sixbit_remainder_get, _aisparser.sixbit_remainder_set)
    remainder_bits = property(_aisparser.sixbit_remainder_bits_get, _aisparser.sixbit_remainder_bits_set)

    def __init__(self):
        _aisparser.sixbit_swiginit(self, _aisparser.new_sixbit())
    __swig_destroy__ = _aisparser.delete_sixbit

# Register sixbit in _aisparser:
_aisparser.sixbit_swigregister(sixbit)


def binfrom6bit(ascii):
    return _aisparser.binfrom6bit(ascii)

def init_6bit(state):
    return _aisparser.init_6bit(state)

def get_6bit(state, numbits):
    return _aisparser.get_6bit(state, numbits)

def sixbit_length(state):
    return _aisparser.sixbit_length(state)

def binto6bit(value):
    return _aisparser.binto6bit(value)
SIXBUF_LEN = _aisparser.SIXBUF_LEN
class aismsg_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_1_msgid_get, _aisparser.aismsg_1_msgid_set)
    repeat = property(_aisparser.aismsg_1_repeat_get, _aisparser.aismsg_1_repeat_set)
    userid = property(_aisparser.aismsg_1_userid_get, _aisparser.aismsg_1_userid_set)
    nav_status = property(_aisparser.aismsg_1_nav_status_get, _aisparser.aismsg_1_nav_status_set)
    rot = property(_aisparser.aismsg_1_rot_get, _aisparser.aismsg_1_rot_set)
    sog = property(_aisparser.aismsg_1_sog_get, _aisparser.aismsg_1_sog_set)
    pos_acc = property(_aisparser.aismsg_1_pos_acc_get, _aisparser.aismsg_1_pos_acc_set)
    longitude = property(_aisparser.aismsg_1_longitude_get, _aisparser.aismsg_1_longitude_set)
    latitude = property(_aisparser.aismsg_1_latitude_get, _aisparser.aismsg_1_latitude_set)
    cog = property(_aisparser.aismsg_1_cog_get, _aisparser.aismsg_1_cog_set)
    true = property(_aisparser.aismsg_1_true_get, _aisparser.aismsg_1_true_set)
    utc_sec = property(_aisparser.aismsg_1_utc_sec_get, _aisparser.aismsg_1_utc_sec_set)
    regional = property(_aisparser.aismsg_1_regional_get, _aisparser.aismsg_1_regional_set)
    spare = property(_aisparser.aismsg_1_spare_get, _aisparser.aismsg_1_spare_set)
    raim = property(_aisparser.aismsg_1_raim_get, _aisparser.aismsg_1_raim_set)
    sync_state = property(_aisparser.aismsg_1_sync_state_get, _aisparser.aismsg_1_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_1_slot_timeout_get, _aisparser.aismsg_1_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_1_sub_message_get, _aisparser.aismsg_1_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_1_swiginit(self, _aisparser.new_aismsg_1())
    __swig_destroy__ = _aisparser.delete_aismsg_1

# Register aismsg_1 in _aisparser:
_aisparser.aismsg_1_swigregister(aismsg_1)

class aismsg_2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_2_msgid_get, _aisparser.aismsg_2_msgid_set)
    repeat = property(_aisparser.aismsg_2_repeat_get, _aisparser.aismsg_2_repeat_set)
    userid = property(_aisparser.aismsg_2_userid_get, _aisparser.aismsg_2_userid_set)
    nav_status = property(_aisparser.aismsg_2_nav_status_get, _aisparser.aismsg_2_nav_status_set)
    rot = property(_aisparser.aismsg_2_rot_get, _aisparser.aismsg_2_rot_set)
    sog = property(_aisparser.aismsg_2_sog_get, _aisparser.aismsg_2_sog_set)
    pos_acc = property(_aisparser.aismsg_2_pos_acc_get, _aisparser.aismsg_2_pos_acc_set)
    longitude = property(_aisparser.aismsg_2_longitude_get, _aisparser.aismsg_2_longitude_set)
    latitude = property(_aisparser.aismsg_2_latitude_get, _aisparser.aismsg_2_latitude_set)
    cog = property(_aisparser.aismsg_2_cog_get, _aisparser.aismsg_2_cog_set)
    true = property(_aisparser.aismsg_2_true_get, _aisparser.aismsg_2_true_set)
    utc_sec = property(_aisparser.aismsg_2_utc_sec_get, _aisparser.aismsg_2_utc_sec_set)
    regional = property(_aisparser.aismsg_2_regional_get, _aisparser.aismsg_2_regional_set)
    spare = property(_aisparser.aismsg_2_spare_get, _aisparser.aismsg_2_spare_set)
    raim = property(_aisparser.aismsg_2_raim_get, _aisparser.aismsg_2_raim_set)
    sync_state = property(_aisparser.aismsg_2_sync_state_get, _aisparser.aismsg_2_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_2_slot_timeout_get, _aisparser.aismsg_2_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_2_sub_message_get, _aisparser.aismsg_2_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_2_swiginit(self, _aisparser.new_aismsg_2())
    __swig_destroy__ = _aisparser.delete_aismsg_2

# Register aismsg_2 in _aisparser:
_aisparser.aismsg_2_swigregister(aismsg_2)

class aismsg_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_3_msgid_get, _aisparser.aismsg_3_msgid_set)
    repeat = property(_aisparser.aismsg_3_repeat_get, _aisparser.aismsg_3_repeat_set)
    userid = property(_aisparser.aismsg_3_userid_get, _aisparser.aismsg_3_userid_set)
    nav_status = property(_aisparser.aismsg_3_nav_status_get, _aisparser.aismsg_3_nav_status_set)
    rot = property(_aisparser.aismsg_3_rot_get, _aisparser.aismsg_3_rot_set)
    sog = property(_aisparser.aismsg_3_sog_get, _aisparser.aismsg_3_sog_set)
    pos_acc = property(_aisparser.aismsg_3_pos_acc_get, _aisparser.aismsg_3_pos_acc_set)
    longitude = property(_aisparser.aismsg_3_longitude_get, _aisparser.aismsg_3_longitude_set)
    latitude = property(_aisparser.aismsg_3_latitude_get, _aisparser.aismsg_3_latitude_set)
    cog = property(_aisparser.aismsg_3_cog_get, _aisparser.aismsg_3_cog_set)
    true = property(_aisparser.aismsg_3_true_get, _aisparser.aismsg_3_true_set)
    utc_sec = property(_aisparser.aismsg_3_utc_sec_get, _aisparser.aismsg_3_utc_sec_set)
    regional = property(_aisparser.aismsg_3_regional_get, _aisparser.aismsg_3_regional_set)
    spare = property(_aisparser.aismsg_3_spare_get, _aisparser.aismsg_3_spare_set)
    raim = property(_aisparser.aismsg_3_raim_get, _aisparser.aismsg_3_raim_set)
    sync_state = property(_aisparser.aismsg_3_sync_state_get, _aisparser.aismsg_3_sync_state_set)
    slot_increment = property(_aisparser.aismsg_3_slot_increment_get, _aisparser.aismsg_3_slot_increment_set)
    num_slots = property(_aisparser.aismsg_3_num_slots_get, _aisparser.aismsg_3_num_slots_set)
    keep = property(_aisparser.aismsg_3_keep_get, _aisparser.aismsg_3_keep_set)

    def __init__(self):
        _aisparser.aismsg_3_swiginit(self, _aisparser.new_aismsg_3())
    __swig_destroy__ = _aisparser.delete_aismsg_3

# Register aismsg_3 in _aisparser:
_aisparser.aismsg_3_swigregister(aismsg_3)

class aismsg_4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_4_msgid_get, _aisparser.aismsg_4_msgid_set)
    repeat = property(_aisparser.aismsg_4_repeat_get, _aisparser.aismsg_4_repeat_set)
    userid = property(_aisparser.aismsg_4_userid_get, _aisparser.aismsg_4_userid_set)
    utc_year = property(_aisparser.aismsg_4_utc_year_get, _aisparser.aismsg_4_utc_year_set)
    utc_month = property(_aisparser.aismsg_4_utc_month_get, _aisparser.aismsg_4_utc_month_set)
    utc_day = property(_aisparser.aismsg_4_utc_day_get, _aisparser.aismsg_4_utc_day_set)
    utc_hour = property(_aisparser.aismsg_4_utc_hour_get, _aisparser.aismsg_4_utc_hour_set)
    utc_minute = property(_aisparser.aismsg_4_utc_minute_get, _aisparser.aismsg_4_utc_minute_set)
    utc_second = property(_aisparser.aismsg_4_utc_second_get, _aisparser.aismsg_4_utc_second_set)
    pos_acc = property(_aisparser.aismsg_4_pos_acc_get, _aisparser.aismsg_4_pos_acc_set)
    longitude = property(_aisparser.aismsg_4_longitude_get, _aisparser.aismsg_4_longitude_set)
    latitude = property(_aisparser.aismsg_4_latitude_get, _aisparser.aismsg_4_latitude_set)
    pos_type = property(_aisparser.aismsg_4_pos_type_get, _aisparser.aismsg_4_pos_type_set)
    spare = property(_aisparser.aismsg_4_spare_get, _aisparser.aismsg_4_spare_set)
    raim = property(_aisparser.aismsg_4_raim_get, _aisparser.aismsg_4_raim_set)
    sync_state = property(_aisparser.aismsg_4_sync_state_get, _aisparser.aismsg_4_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_4_slot_timeout_get, _aisparser.aismsg_4_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_4_sub_message_get, _aisparser.aismsg_4_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_4_swiginit(self, _aisparser.new_aismsg_4())
    __swig_destroy__ = _aisparser.delete_aismsg_4

# Register aismsg_4 in _aisparser:
_aisparser.aismsg_4_swigregister(aismsg_4)

class aismsg_5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_5_msgid_get, _aisparser.aismsg_5_msgid_set)
    repeat = property(_aisparser.aismsg_5_repeat_get, _aisparser.aismsg_5_repeat_set)
    userid = property(_aisparser.aismsg_5_userid_get, _aisparser.aismsg_5_userid_set)
    version = property(_aisparser.aismsg_5_version_get, _aisparser.aismsg_5_version_set)
    imo = property(_aisparser.aismsg_5_imo_get, _aisparser.aismsg_5_imo_set)
    callsign = property(_aisparser.aismsg_5_callsign_get, _aisparser.aismsg_5_callsign_set)
    name = property(_aisparser.aismsg_5_name_get, _aisparser.aismsg_5_name_set)
    ship_type = property(_aisparser.aismsg_5_ship_type_get, _aisparser.aismsg_5_ship_type_set)
    dim_bow = property(_aisparser.aismsg_5_dim_bow_get, _aisparser.aismsg_5_dim_bow_set)
    dim_stern = property(_aisparser.aismsg_5_dim_stern_get, _aisparser.aismsg_5_dim_stern_set)
    dim_port = property(_aisparser.aismsg_5_dim_port_get, _aisparser.aismsg_5_dim_port_set)
    dim_starboard = property(_aisparser.aismsg_5_dim_starboard_get, _aisparser.aismsg_5_dim_starboard_set)
    pos_type = property(_aisparser.aismsg_5_pos_type_get, _aisparser.aismsg_5_pos_type_set)
    eta = property(_aisparser.aismsg_5_eta_get, _aisparser.aismsg_5_eta_set)
    draught = property(_aisparser.aismsg_5_draught_get, _aisparser.aismsg_5_draught_set)
    dest = property(_aisparser.aismsg_5_dest_get, _aisparser.aismsg_5_dest_set)
    dte = property(_aisparser.aismsg_5_dte_get, _aisparser.aismsg_5_dte_set)
    spare = property(_aisparser.aismsg_5_spare_get, _aisparser.aismsg_5_spare_set)

    def __init__(self):
        _aisparser.aismsg_5_swiginit(self, _aisparser.new_aismsg_5())
    __swig_destroy__ = _aisparser.delete_aismsg_5

# Register aismsg_5 in _aisparser:
_aisparser.aismsg_5_swigregister(aismsg_5)

class aismsg_6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_6_msgid_get, _aisparser.aismsg_6_msgid_set)
    repeat = property(_aisparser.aismsg_6_repeat_get, _aisparser.aismsg_6_repeat_set)
    userid = property(_aisparser.aismsg_6_userid_get, _aisparser.aismsg_6_userid_set)
    sequence = property(_aisparser.aismsg_6_sequence_get, _aisparser.aismsg_6_sequence_set)
    destination = property(_aisparser.aismsg_6_destination_get, _aisparser.aismsg_6_destination_set)
    retransmit = property(_aisparser.aismsg_6_retransmit_get, _aisparser.aismsg_6_retransmit_set)
    spare = property(_aisparser.aismsg_6_spare_get, _aisparser.aismsg_6_spare_set)
    app_id = property(_aisparser.aismsg_6_app_id_get, _aisparser.aismsg_6_app_id_set)
    data = property(_aisparser.aismsg_6_data_get, _aisparser.aismsg_6_data_set)

    def __init__(self):
        _aisparser.aismsg_6_swiginit(self, _aisparser.new_aismsg_6())
    __swig_destroy__ = _aisparser.delete_aismsg_6

# Register aismsg_6 in _aisparser:
_aisparser.aismsg_6_swigregister(aismsg_6)

class aismsg_7(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_7_msgid_get, _aisparser.aismsg_7_msgid_set)
    repeat = property(_aisparser.aismsg_7_repeat_get, _aisparser.aismsg_7_repeat_set)
    userid = property(_aisparser.aismsg_7_userid_get, _aisparser.aismsg_7_userid_set)
    spare = property(_aisparser.aismsg_7_spare_get, _aisparser.aismsg_7_spare_set)
    destid_1 = property(_aisparser.aismsg_7_destid_1_get, _aisparser.aismsg_7_destid_1_set)
    sequence_1 = property(_aisparser.aismsg_7_sequence_1_get, _aisparser.aismsg_7_sequence_1_set)
    destid_2 = property(_aisparser.aismsg_7_destid_2_get, _aisparser.aismsg_7_destid_2_set)
    sequence_2 = property(_aisparser.aismsg_7_sequence_2_get, _aisparser.aismsg_7_sequence_2_set)
    destid_3 = property(_aisparser.aismsg_7_destid_3_get, _aisparser.aismsg_7_destid_3_set)
    sequence_3 = property(_aisparser.aismsg_7_sequence_3_get, _aisparser.aismsg_7_sequence_3_set)
    destid_4 = property(_aisparser.aismsg_7_destid_4_get, _aisparser.aismsg_7_destid_4_set)
    sequence_4 = property(_aisparser.aismsg_7_sequence_4_get, _aisparser.aismsg_7_sequence_4_set)
    num_acks = property(_aisparser.aismsg_7_num_acks_get, _aisparser.aismsg_7_num_acks_set)

    def __init__(self):
        _aisparser.aismsg_7_swiginit(self, _aisparser.new_aismsg_7())
    __swig_destroy__ = _aisparser.delete_aismsg_7

# Register aismsg_7 in _aisparser:
_aisparser.aismsg_7_swigregister(aismsg_7)

class aismsg_8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_8_msgid_get, _aisparser.aismsg_8_msgid_set)
    repeat = property(_aisparser.aismsg_8_repeat_get, _aisparser.aismsg_8_repeat_set)
    userid = property(_aisparser.aismsg_8_userid_get, _aisparser.aismsg_8_userid_set)
    spare = property(_aisparser.aismsg_8_spare_get, _aisparser.aismsg_8_spare_set)
    app_id = property(_aisparser.aismsg_8_app_id_get, _aisparser.aismsg_8_app_id_set)
    data = property(_aisparser.aismsg_8_data_get, _aisparser.aismsg_8_data_set)

    def __init__(self):
        _aisparser.aismsg_8_swiginit(self, _aisparser.new_aismsg_8())
    __swig_destroy__ = _aisparser.delete_aismsg_8

# Register aismsg_8 in _aisparser:
_aisparser.aismsg_8_swigregister(aismsg_8)

class aismsg_9(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_9_msgid_get, _aisparser.aismsg_9_msgid_set)
    repeat = property(_aisparser.aismsg_9_repeat_get, _aisparser.aismsg_9_repeat_set)
    userid = property(_aisparser.aismsg_9_userid_get, _aisparser.aismsg_9_userid_set)
    altitude = property(_aisparser.aismsg_9_altitude_get, _aisparser.aismsg_9_altitude_set)
    sog = property(_aisparser.aismsg_9_sog_get, _aisparser.aismsg_9_sog_set)
    pos_acc = property(_aisparser.aismsg_9_pos_acc_get, _aisparser.aismsg_9_pos_acc_set)
    longitude = property(_aisparser.aismsg_9_longitude_get, _aisparser.aismsg_9_longitude_set)
    latitude = property(_aisparser.aismsg_9_latitude_get, _aisparser.aismsg_9_latitude_set)
    cog = property(_aisparser.aismsg_9_cog_get, _aisparser.aismsg_9_cog_set)
    utc_sec = property(_aisparser.aismsg_9_utc_sec_get, _aisparser.aismsg_9_utc_sec_set)
    regional = property(_aisparser.aismsg_9_regional_get, _aisparser.aismsg_9_regional_set)
    dte = property(_aisparser.aismsg_9_dte_get, _aisparser.aismsg_9_dte_set)
    spare = property(_aisparser.aismsg_9_spare_get, _aisparser.aismsg_9_spare_set)
    assigned = property(_aisparser.aismsg_9_assigned_get, _aisparser.aismsg_9_assigned_set)
    raim = property(_aisparser.aismsg_9_raim_get, _aisparser.aismsg_9_raim_set)
    comm_state = property(_aisparser.aismsg_9_comm_state_get, _aisparser.aismsg_9_comm_state_set)
    sotdma = property(_aisparser.aismsg_9_sotdma_get)
    itdma = property(_aisparser.aismsg_9_itdma_get)

    def __init__(self):
        _aisparser.aismsg_9_swiginit(self, _aisparser.new_aismsg_9())
    __swig_destroy__ = _aisparser.delete_aismsg_9

# Register aismsg_9 in _aisparser:
_aisparser.aismsg_9_swigregister(aismsg_9)

class aismsg_9_itdma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sync_state = property(_aisparser.aismsg_9_itdma_sync_state_get, _aisparser.aismsg_9_itdma_sync_state_set)
    slot_inc = property(_aisparser.aismsg_9_itdma_slot_inc_get, _aisparser.aismsg_9_itdma_slot_inc_set)
    num_slots = property(_aisparser.aismsg_9_itdma_num_slots_get, _aisparser.aismsg_9_itdma_num_slots_set)
    keep_flag = property(_aisparser.aismsg_9_itdma_keep_flag_get, _aisparser.aismsg_9_itdma_keep_flag_set)

    def __init__(self):
        _aisparser.aismsg_9_itdma_swiginit(self, _aisparser.new_aismsg_9_itdma())
    __swig_destroy__ = _aisparser.delete_aismsg_9_itdma

# Register aismsg_9_itdma in _aisparser:
_aisparser.aismsg_9_itdma_swigregister(aismsg_9_itdma)

class aismsg_9_sotdma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sync_state = property(_aisparser.aismsg_9_sotdma_sync_state_get, _aisparser.aismsg_9_sotdma_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_9_sotdma_slot_timeout_get, _aisparser.aismsg_9_sotdma_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_9_sotdma_sub_message_get, _aisparser.aismsg_9_sotdma_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_9_sotdma_swiginit(self, _aisparser.new_aismsg_9_sotdma())
    __swig_destroy__ = _aisparser.delete_aismsg_9_sotdma

# Register aismsg_9_sotdma in _aisparser:
_aisparser.aismsg_9_sotdma_swigregister(aismsg_9_sotdma)

class aismsg_10(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_10_msgid_get, _aisparser.aismsg_10_msgid_set)
    repeat = property(_aisparser.aismsg_10_repeat_get, _aisparser.aismsg_10_repeat_set)
    userid = property(_aisparser.aismsg_10_userid_get, _aisparser.aismsg_10_userid_set)
    spare1 = property(_aisparser.aismsg_10_spare1_get, _aisparser.aismsg_10_spare1_set)
    destination = property(_aisparser.aismsg_10_destination_get, _aisparser.aismsg_10_destination_set)
    spare2 = property(_aisparser.aismsg_10_spare2_get, _aisparser.aismsg_10_spare2_set)

    def __init__(self):
        _aisparser.aismsg_10_swiginit(self, _aisparser.new_aismsg_10())
    __swig_destroy__ = _aisparser.delete_aismsg_10

# Register aismsg_10 in _aisparser:
_aisparser.aismsg_10_swigregister(aismsg_10)

class aismsg_11(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_11_msgid_get, _aisparser.aismsg_11_msgid_set)
    repeat = property(_aisparser.aismsg_11_repeat_get, _aisparser.aismsg_11_repeat_set)
    userid = property(_aisparser.aismsg_11_userid_get, _aisparser.aismsg_11_userid_set)
    utc_year = property(_aisparser.aismsg_11_utc_year_get, _aisparser.aismsg_11_utc_year_set)
    utc_month = property(_aisparser.aismsg_11_utc_month_get, _aisparser.aismsg_11_utc_month_set)
    utc_day = property(_aisparser.aismsg_11_utc_day_get, _aisparser.aismsg_11_utc_day_set)
    utc_hour = property(_aisparser.aismsg_11_utc_hour_get, _aisparser.aismsg_11_utc_hour_set)
    utc_minute = property(_aisparser.aismsg_11_utc_minute_get, _aisparser.aismsg_11_utc_minute_set)
    utc_second = property(_aisparser.aismsg_11_utc_second_get, _aisparser.aismsg_11_utc_second_set)
    pos_acc = property(_aisparser.aismsg_11_pos_acc_get, _aisparser.aismsg_11_pos_acc_set)
    longitude = property(_aisparser.aismsg_11_longitude_get, _aisparser.aismsg_11_longitude_set)
    latitude = property(_aisparser.aismsg_11_latitude_get, _aisparser.aismsg_11_latitude_set)
    pos_type = property(_aisparser.aismsg_11_pos_type_get, _aisparser.aismsg_11_pos_type_set)
    spare = property(_aisparser.aismsg_11_spare_get, _aisparser.aismsg_11_spare_set)
    raim = property(_aisparser.aismsg_11_raim_get, _aisparser.aismsg_11_raim_set)
    sync_state = property(_aisparser.aismsg_11_sync_state_get, _aisparser.aismsg_11_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_11_slot_timeout_get, _aisparser.aismsg_11_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_11_sub_message_get, _aisparser.aismsg_11_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_11_swiginit(self, _aisparser.new_aismsg_11())
    __swig_destroy__ = _aisparser.delete_aismsg_11

# Register aismsg_11 in _aisparser:
_aisparser.aismsg_11_swigregister(aismsg_11)

class aismsg_12(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_12_msgid_get, _aisparser.aismsg_12_msgid_set)
    repeat = property(_aisparser.aismsg_12_repeat_get, _aisparser.aismsg_12_repeat_set)
    userid = property(_aisparser.aismsg_12_userid_get, _aisparser.aismsg_12_userid_set)
    sequence = property(_aisparser.aismsg_12_sequence_get, _aisparser.aismsg_12_sequence_set)
    destination = property(_aisparser.aismsg_12_destination_get, _aisparser.aismsg_12_destination_set)
    retransmit = property(_aisparser.aismsg_12_retransmit_get, _aisparser.aismsg_12_retransmit_set)
    spare = property(_aisparser.aismsg_12_spare_get, _aisparser.aismsg_12_spare_set)
    message = property(_aisparser.aismsg_12_message_get, _aisparser.aismsg_12_message_set)

    def __init__(self):
        _aisparser.aismsg_12_swiginit(self, _aisparser.new_aismsg_12())
    __swig_destroy__ = _aisparser.delete_aismsg_12

# Register aismsg_12 in _aisparser:
_aisparser.aismsg_12_swigregister(aismsg_12)

class aismsg_13(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_13_msgid_get, _aisparser.aismsg_13_msgid_set)
    repeat = property(_aisparser.aismsg_13_repeat_get, _aisparser.aismsg_13_repeat_set)
    userid = property(_aisparser.aismsg_13_userid_get, _aisparser.aismsg_13_userid_set)
    spare = property(_aisparser.aismsg_13_spare_get, _aisparser.aismsg_13_spare_set)
    destid_1 = property(_aisparser.aismsg_13_destid_1_get, _aisparser.aismsg_13_destid_1_set)
    sequence_1 = property(_aisparser.aismsg_13_sequence_1_get, _aisparser.aismsg_13_sequence_1_set)
    destid_2 = property(_aisparser.aismsg_13_destid_2_get, _aisparser.aismsg_13_destid_2_set)
    sequence_2 = property(_aisparser.aismsg_13_sequence_2_get, _aisparser.aismsg_13_sequence_2_set)
    destid_3 = property(_aisparser.aismsg_13_destid_3_get, _aisparser.aismsg_13_destid_3_set)
    sequence_3 = property(_aisparser.aismsg_13_sequence_3_get, _aisparser.aismsg_13_sequence_3_set)
    destid_4 = property(_aisparser.aismsg_13_destid_4_get, _aisparser.aismsg_13_destid_4_set)
    sequence_4 = property(_aisparser.aismsg_13_sequence_4_get, _aisparser.aismsg_13_sequence_4_set)
    num_acks = property(_aisparser.aismsg_13_num_acks_get, _aisparser.aismsg_13_num_acks_set)

    def __init__(self):
        _aisparser.aismsg_13_swiginit(self, _aisparser.new_aismsg_13())
    __swig_destroy__ = _aisparser.delete_aismsg_13

# Register aismsg_13 in _aisparser:
_aisparser.aismsg_13_swigregister(aismsg_13)

class aismsg_14(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_14_msgid_get, _aisparser.aismsg_14_msgid_set)
    repeat = property(_aisparser.aismsg_14_repeat_get, _aisparser.aismsg_14_repeat_set)
    userid = property(_aisparser.aismsg_14_userid_get, _aisparser.aismsg_14_userid_set)
    spare = property(_aisparser.aismsg_14_spare_get, _aisparser.aismsg_14_spare_set)
    message = property(_aisparser.aismsg_14_message_get, _aisparser.aismsg_14_message_set)

    def __init__(self):
        _aisparser.aismsg_14_swiginit(self, _aisparser.new_aismsg_14())
    __swig_destroy__ = _aisparser.delete_aismsg_14

# Register aismsg_14 in _aisparser:
_aisparser.aismsg_14_swigregister(aismsg_14)

class aismsg_15(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_15_msgid_get, _aisparser.aismsg_15_msgid_set)
    repeat = property(_aisparser.aismsg_15_repeat_get, _aisparser.aismsg_15_repeat_set)
    userid = property(_aisparser.aismsg_15_userid_get, _aisparser.aismsg_15_userid_set)
    spare1 = property(_aisparser.aismsg_15_spare1_get, _aisparser.aismsg_15_spare1_set)
    destid1 = property(_aisparser.aismsg_15_destid1_get, _aisparser.aismsg_15_destid1_set)
    msgid1_1 = property(_aisparser.aismsg_15_msgid1_1_get, _aisparser.aismsg_15_msgid1_1_set)
    offset1_1 = property(_aisparser.aismsg_15_offset1_1_get, _aisparser.aismsg_15_offset1_1_set)
    spare2 = property(_aisparser.aismsg_15_spare2_get, _aisparser.aismsg_15_spare2_set)
    msgid1_2 = property(_aisparser.aismsg_15_msgid1_2_get, _aisparser.aismsg_15_msgid1_2_set)
    offset1_2 = property(_aisparser.aismsg_15_offset1_2_get, _aisparser.aismsg_15_offset1_2_set)
    spare3 = property(_aisparser.aismsg_15_spare3_get, _aisparser.aismsg_15_spare3_set)
    destid2 = property(_aisparser.aismsg_15_destid2_get, _aisparser.aismsg_15_destid2_set)
    msgid2_1 = property(_aisparser.aismsg_15_msgid2_1_get, _aisparser.aismsg_15_msgid2_1_set)
    offset2_1 = property(_aisparser.aismsg_15_offset2_1_get, _aisparser.aismsg_15_offset2_1_set)
    spare4 = property(_aisparser.aismsg_15_spare4_get, _aisparser.aismsg_15_spare4_set)
    num_reqs = property(_aisparser.aismsg_15_num_reqs_get, _aisparser.aismsg_15_num_reqs_set)

    def __init__(self):
        _aisparser.aismsg_15_swiginit(self, _aisparser.new_aismsg_15())
    __swig_destroy__ = _aisparser.delete_aismsg_15

# Register aismsg_15 in _aisparser:
_aisparser.aismsg_15_swigregister(aismsg_15)

class aismsg_16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_16_msgid_get, _aisparser.aismsg_16_msgid_set)
    repeat = property(_aisparser.aismsg_16_repeat_get, _aisparser.aismsg_16_repeat_set)
    userid = property(_aisparser.aismsg_16_userid_get, _aisparser.aismsg_16_userid_set)
    spare1 = property(_aisparser.aismsg_16_spare1_get, _aisparser.aismsg_16_spare1_set)
    destid_a = property(_aisparser.aismsg_16_destid_a_get, _aisparser.aismsg_16_destid_a_set)
    offset_a = property(_aisparser.aismsg_16_offset_a_get, _aisparser.aismsg_16_offset_a_set)
    increment_a = property(_aisparser.aismsg_16_increment_a_get, _aisparser.aismsg_16_increment_a_set)
    destid_b = property(_aisparser.aismsg_16_destid_b_get, _aisparser.aismsg_16_destid_b_set)
    offset_b = property(_aisparser.aismsg_16_offset_b_get, _aisparser.aismsg_16_offset_b_set)
    increment_b = property(_aisparser.aismsg_16_increment_b_get, _aisparser.aismsg_16_increment_b_set)
    spare2 = property(_aisparser.aismsg_16_spare2_get, _aisparser.aismsg_16_spare2_set)
    num_cmds = property(_aisparser.aismsg_16_num_cmds_get, _aisparser.aismsg_16_num_cmds_set)

    def __init__(self):
        _aisparser.aismsg_16_swiginit(self, _aisparser.new_aismsg_16())
    __swig_destroy__ = _aisparser.delete_aismsg_16

# Register aismsg_16 in _aisparser:
_aisparser.aismsg_16_swigregister(aismsg_16)

class aismsg_17(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_17_msgid_get, _aisparser.aismsg_17_msgid_set)
    repeat = property(_aisparser.aismsg_17_repeat_get, _aisparser.aismsg_17_repeat_set)
    userid = property(_aisparser.aismsg_17_userid_get, _aisparser.aismsg_17_userid_set)
    spare1 = property(_aisparser.aismsg_17_spare1_get, _aisparser.aismsg_17_spare1_set)
    longitude = property(_aisparser.aismsg_17_longitude_get, _aisparser.aismsg_17_longitude_set)
    latitude = property(_aisparser.aismsg_17_latitude_get, _aisparser.aismsg_17_latitude_set)
    spare2 = property(_aisparser.aismsg_17_spare2_get, _aisparser.aismsg_17_spare2_set)
    msg_type = property(_aisparser.aismsg_17_msg_type_get, _aisparser.aismsg_17_msg_type_set)
    station_id = property(_aisparser.aismsg_17_station_id_get, _aisparser.aismsg_17_station_id_set)
    z_count = property(_aisparser.aismsg_17_z_count_get, _aisparser.aismsg_17_z_count_set)
    seq_num = property(_aisparser.aismsg_17_seq_num_get, _aisparser.aismsg_17_seq_num_set)
    num_words = property(_aisparser.aismsg_17_num_words_get, _aisparser.aismsg_17_num_words_set)
    health = property(_aisparser.aismsg_17_health_get, _aisparser.aismsg_17_health_set)
    data = property(_aisparser.aismsg_17_data_get, _aisparser.aismsg_17_data_set)

    def __init__(self):
        _aisparser.aismsg_17_swiginit(self, _aisparser.new_aismsg_17())
    __swig_destroy__ = _aisparser.delete_aismsg_17

# Register aismsg_17 in _aisparser:
_aisparser.aismsg_17_swigregister(aismsg_17)

class aismsg_18(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_18_msgid_get, _aisparser.aismsg_18_msgid_set)
    repeat = property(_aisparser.aismsg_18_repeat_get, _aisparser.aismsg_18_repeat_set)
    userid = property(_aisparser.aismsg_18_userid_get, _aisparser.aismsg_18_userid_set)
    regional1 = property(_aisparser.aismsg_18_regional1_get, _aisparser.aismsg_18_regional1_set)
    sog = property(_aisparser.aismsg_18_sog_get, _aisparser.aismsg_18_sog_set)
    pos_acc = property(_aisparser.aismsg_18_pos_acc_get, _aisparser.aismsg_18_pos_acc_set)
    longitude = property(_aisparser.aismsg_18_longitude_get, _aisparser.aismsg_18_longitude_set)
    latitude = property(_aisparser.aismsg_18_latitude_get, _aisparser.aismsg_18_latitude_set)
    cog = property(_aisparser.aismsg_18_cog_get, _aisparser.aismsg_18_cog_set)
    true = property(_aisparser.aismsg_18_true_get, _aisparser.aismsg_18_true_set)
    utc_sec = property(_aisparser.aismsg_18_utc_sec_get, _aisparser.aismsg_18_utc_sec_set)
    regional2 = property(_aisparser.aismsg_18_regional2_get, _aisparser.aismsg_18_regional2_set)
    unit_flag = property(_aisparser.aismsg_18_unit_flag_get, _aisparser.aismsg_18_unit_flag_set)
    display_flag = property(_aisparser.aismsg_18_display_flag_get, _aisparser.aismsg_18_display_flag_set)
    dsc_flag = property(_aisparser.aismsg_18_dsc_flag_get, _aisparser.aismsg_18_dsc_flag_set)
    band_flag = property(_aisparser.aismsg_18_band_flag_get, _aisparser.aismsg_18_band_flag_set)
    msg22_flag = property(_aisparser.aismsg_18_msg22_flag_get, _aisparser.aismsg_18_msg22_flag_set)
    mode_flag = property(_aisparser.aismsg_18_mode_flag_get, _aisparser.aismsg_18_mode_flag_set)
    raim = property(_aisparser.aismsg_18_raim_get, _aisparser.aismsg_18_raim_set)
    comm_state = property(_aisparser.aismsg_18_comm_state_get, _aisparser.aismsg_18_comm_state_set)
    sotdma = property(_aisparser.aismsg_18_sotdma_get)
    itdma = property(_aisparser.aismsg_18_itdma_get)

    def __init__(self):
        _aisparser.aismsg_18_swiginit(self, _aisparser.new_aismsg_18())
    __swig_destroy__ = _aisparser.delete_aismsg_18

# Register aismsg_18 in _aisparser:
_aisparser.aismsg_18_swigregister(aismsg_18)

class aismsg_18_itdma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sync_state = property(_aisparser.aismsg_18_itdma_sync_state_get, _aisparser.aismsg_18_itdma_sync_state_set)
    slot_inc = property(_aisparser.aismsg_18_itdma_slot_inc_get, _aisparser.aismsg_18_itdma_slot_inc_set)
    num_slots = property(_aisparser.aismsg_18_itdma_num_slots_get, _aisparser.aismsg_18_itdma_num_slots_set)
    keep_flag = property(_aisparser.aismsg_18_itdma_keep_flag_get, _aisparser.aismsg_18_itdma_keep_flag_set)

    def __init__(self):
        _aisparser.aismsg_18_itdma_swiginit(self, _aisparser.new_aismsg_18_itdma())
    __swig_destroy__ = _aisparser.delete_aismsg_18_itdma

# Register aismsg_18_itdma in _aisparser:
_aisparser.aismsg_18_itdma_swigregister(aismsg_18_itdma)

class aismsg_18_sotdma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sync_state = property(_aisparser.aismsg_18_sotdma_sync_state_get, _aisparser.aismsg_18_sotdma_sync_state_set)
    slot_timeout = property(_aisparser.aismsg_18_sotdma_slot_timeout_get, _aisparser.aismsg_18_sotdma_slot_timeout_set)
    sub_message = property(_aisparser.aismsg_18_sotdma_sub_message_get, _aisparser.aismsg_18_sotdma_sub_message_set)

    def __init__(self):
        _aisparser.aismsg_18_sotdma_swiginit(self, _aisparser.new_aismsg_18_sotdma())
    __swig_destroy__ = _aisparser.delete_aismsg_18_sotdma

# Register aismsg_18_sotdma in _aisparser:
_aisparser.aismsg_18_sotdma_swigregister(aismsg_18_sotdma)

class aismsg_19(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_19_msgid_get, _aisparser.aismsg_19_msgid_set)
    repeat = property(_aisparser.aismsg_19_repeat_get, _aisparser.aismsg_19_repeat_set)
    userid = property(_aisparser.aismsg_19_userid_get, _aisparser.aismsg_19_userid_set)
    regional1 = property(_aisparser.aismsg_19_regional1_get, _aisparser.aismsg_19_regional1_set)
    sog = property(_aisparser.aismsg_19_sog_get, _aisparser.aismsg_19_sog_set)
    pos_acc = property(_aisparser.aismsg_19_pos_acc_get, _aisparser.aismsg_19_pos_acc_set)
    longitude = property(_aisparser.aismsg_19_longitude_get, _aisparser.aismsg_19_longitude_set)
    latitude = property(_aisparser.aismsg_19_latitude_get, _aisparser.aismsg_19_latitude_set)
    cog = property(_aisparser.aismsg_19_cog_get, _aisparser.aismsg_19_cog_set)
    true = property(_aisparser.aismsg_19_true_get, _aisparser.aismsg_19_true_set)
    utc_sec = property(_aisparser.aismsg_19_utc_sec_get, _aisparser.aismsg_19_utc_sec_set)
    regional2 = property(_aisparser.aismsg_19_regional2_get, _aisparser.aismsg_19_regional2_set)
    name = property(_aisparser.aismsg_19_name_get, _aisparser.aismsg_19_name_set)
    ship_type = property(_aisparser.aismsg_19_ship_type_get, _aisparser.aismsg_19_ship_type_set)
    dim_bow = property(_aisparser.aismsg_19_dim_bow_get, _aisparser.aismsg_19_dim_bow_set)
    dim_stern = property(_aisparser.aismsg_19_dim_stern_get, _aisparser.aismsg_19_dim_stern_set)
    dim_port = property(_aisparser.aismsg_19_dim_port_get, _aisparser.aismsg_19_dim_port_set)
    dim_starboard = property(_aisparser.aismsg_19_dim_starboard_get, _aisparser.aismsg_19_dim_starboard_set)
    pos_type = property(_aisparser.aismsg_19_pos_type_get, _aisparser.aismsg_19_pos_type_set)
    raim = property(_aisparser.aismsg_19_raim_get, _aisparser.aismsg_19_raim_set)
    dte = property(_aisparser.aismsg_19_dte_get, _aisparser.aismsg_19_dte_set)
    spare = property(_aisparser.aismsg_19_spare_get, _aisparser.aismsg_19_spare_set)

    def __init__(self):
        _aisparser.aismsg_19_swiginit(self, _aisparser.new_aismsg_19())
    __swig_destroy__ = _aisparser.delete_aismsg_19

# Register aismsg_19 in _aisparser:
_aisparser.aismsg_19_swigregister(aismsg_19)

class aismsg_20(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_20_msgid_get, _aisparser.aismsg_20_msgid_set)
    repeat = property(_aisparser.aismsg_20_repeat_get, _aisparser.aismsg_20_repeat_set)
    userid = property(_aisparser.aismsg_20_userid_get, _aisparser.aismsg_20_userid_set)
    spare1 = property(_aisparser.aismsg_20_spare1_get, _aisparser.aismsg_20_spare1_set)
    offset1 = property(_aisparser.aismsg_20_offset1_get, _aisparser.aismsg_20_offset1_set)
    slots1 = property(_aisparser.aismsg_20_slots1_get, _aisparser.aismsg_20_slots1_set)
    timeout1 = property(_aisparser.aismsg_20_timeout1_get, _aisparser.aismsg_20_timeout1_set)
    increment1 = property(_aisparser.aismsg_20_increment1_get, _aisparser.aismsg_20_increment1_set)
    offset2 = property(_aisparser.aismsg_20_offset2_get, _aisparser.aismsg_20_offset2_set)
    slots2 = property(_aisparser.aismsg_20_slots2_get, _aisparser.aismsg_20_slots2_set)
    timeout2 = property(_aisparser.aismsg_20_timeout2_get, _aisparser.aismsg_20_timeout2_set)
    increment2 = property(_aisparser.aismsg_20_increment2_get, _aisparser.aismsg_20_increment2_set)
    offset3 = property(_aisparser.aismsg_20_offset3_get, _aisparser.aismsg_20_offset3_set)
    slots3 = property(_aisparser.aismsg_20_slots3_get, _aisparser.aismsg_20_slots3_set)
    timeout3 = property(_aisparser.aismsg_20_timeout3_get, _aisparser.aismsg_20_timeout3_set)
    increment3 = property(_aisparser.aismsg_20_increment3_get, _aisparser.aismsg_20_increment3_set)
    offset4 = property(_aisparser.aismsg_20_offset4_get, _aisparser.aismsg_20_offset4_set)
    slots4 = property(_aisparser.aismsg_20_slots4_get, _aisparser.aismsg_20_slots4_set)
    timeout4 = property(_aisparser.aismsg_20_timeout4_get, _aisparser.aismsg_20_timeout4_set)
    increment4 = property(_aisparser.aismsg_20_increment4_get, _aisparser.aismsg_20_increment4_set)
    spare2 = property(_aisparser.aismsg_20_spare2_get, _aisparser.aismsg_20_spare2_set)
    num_cmds = property(_aisparser.aismsg_20_num_cmds_get, _aisparser.aismsg_20_num_cmds_set)

    def __init__(self):
        _aisparser.aismsg_20_swiginit(self, _aisparser.new_aismsg_20())
    __swig_destroy__ = _aisparser.delete_aismsg_20

# Register aismsg_20 in _aisparser:
_aisparser.aismsg_20_swigregister(aismsg_20)

class aismsg_21(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_21_msgid_get, _aisparser.aismsg_21_msgid_set)
    repeat = property(_aisparser.aismsg_21_repeat_get, _aisparser.aismsg_21_repeat_set)
    userid = property(_aisparser.aismsg_21_userid_get, _aisparser.aismsg_21_userid_set)
    aton_type = property(_aisparser.aismsg_21_aton_type_get, _aisparser.aismsg_21_aton_type_set)
    name = property(_aisparser.aismsg_21_name_get, _aisparser.aismsg_21_name_set)
    pos_acc = property(_aisparser.aismsg_21_pos_acc_get, _aisparser.aismsg_21_pos_acc_set)
    longitude = property(_aisparser.aismsg_21_longitude_get, _aisparser.aismsg_21_longitude_set)
    latitude = property(_aisparser.aismsg_21_latitude_get, _aisparser.aismsg_21_latitude_set)
    dim_bow = property(_aisparser.aismsg_21_dim_bow_get, _aisparser.aismsg_21_dim_bow_set)
    dim_stern = property(_aisparser.aismsg_21_dim_stern_get, _aisparser.aismsg_21_dim_stern_set)
    dim_port = property(_aisparser.aismsg_21_dim_port_get, _aisparser.aismsg_21_dim_port_set)
    dim_starboard = property(_aisparser.aismsg_21_dim_starboard_get, _aisparser.aismsg_21_dim_starboard_set)
    pos_type = property(_aisparser.aismsg_21_pos_type_get, _aisparser.aismsg_21_pos_type_set)
    utc_sec = property(_aisparser.aismsg_21_utc_sec_get, _aisparser.aismsg_21_utc_sec_set)
    off_position = property(_aisparser.aismsg_21_off_position_get, _aisparser.aismsg_21_off_position_set)
    regional = property(_aisparser.aismsg_21_regional_get, _aisparser.aismsg_21_regional_set)
    raim = property(_aisparser.aismsg_21_raim_get, _aisparser.aismsg_21_raim_set)
    virtual = property(_aisparser.aismsg_21_virtual_get, _aisparser.aismsg_21_virtual_set)
    assigned = property(_aisparser.aismsg_21_assigned_get, _aisparser.aismsg_21_assigned_set)
    spare1 = property(_aisparser.aismsg_21_spare1_get, _aisparser.aismsg_21_spare1_set)
    name_ext = property(_aisparser.aismsg_21_name_ext_get, _aisparser.aismsg_21_name_ext_set)
    spare2 = property(_aisparser.aismsg_21_spare2_get, _aisparser.aismsg_21_spare2_set)

    def __init__(self):
        _aisparser.aismsg_21_swiginit(self, _aisparser.new_aismsg_21())
    __swig_destroy__ = _aisparser.delete_aismsg_21

# Register aismsg_21 in _aisparser:
_aisparser.aismsg_21_swigregister(aismsg_21)

class aismsg_22(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_22_msgid_get, _aisparser.aismsg_22_msgid_set)
    repeat = property(_aisparser.aismsg_22_repeat_get, _aisparser.aismsg_22_repeat_set)
    userid = property(_aisparser.aismsg_22_userid_get, _aisparser.aismsg_22_userid_set)
    spare1 = property(_aisparser.aismsg_22_spare1_get, _aisparser.aismsg_22_spare1_set)
    channel_a = property(_aisparser.aismsg_22_channel_a_get, _aisparser.aismsg_22_channel_a_set)
    channel_b = property(_aisparser.aismsg_22_channel_b_get, _aisparser.aismsg_22_channel_b_set)
    txrx_mode = property(_aisparser.aismsg_22_txrx_mode_get, _aisparser.aismsg_22_txrx_mode_set)
    power = property(_aisparser.aismsg_22_power_get, _aisparser.aismsg_22_power_set)
    NE_longitude = property(_aisparser.aismsg_22_NE_longitude_get, _aisparser.aismsg_22_NE_longitude_set)
    NE_latitude = property(_aisparser.aismsg_22_NE_latitude_get, _aisparser.aismsg_22_NE_latitude_set)
    addressed_1 = property(_aisparser.aismsg_22_addressed_1_get, _aisparser.aismsg_22_addressed_1_set)
    SW_longitude = property(_aisparser.aismsg_22_SW_longitude_get, _aisparser.aismsg_22_SW_longitude_set)
    SW_latitude = property(_aisparser.aismsg_22_SW_latitude_get, _aisparser.aismsg_22_SW_latitude_set)
    addressed_2 = property(_aisparser.aismsg_22_addressed_2_get, _aisparser.aismsg_22_addressed_2_set)
    addressed = property(_aisparser.aismsg_22_addressed_get, _aisparser.aismsg_22_addressed_set)
    bw_a = property(_aisparser.aismsg_22_bw_a_get, _aisparser.aismsg_22_bw_a_set)
    bw_b = property(_aisparser.aismsg_22_bw_b_get, _aisparser.aismsg_22_bw_b_set)
    tz_size = property(_aisparser.aismsg_22_tz_size_get, _aisparser.aismsg_22_tz_size_set)
    spare2 = property(_aisparser.aismsg_22_spare2_get, _aisparser.aismsg_22_spare2_set)

    def __init__(self):
        _aisparser.aismsg_22_swiginit(self, _aisparser.new_aismsg_22())
    __swig_destroy__ = _aisparser.delete_aismsg_22

# Register aismsg_22 in _aisparser:
_aisparser.aismsg_22_swigregister(aismsg_22)

class aismsg_23(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_23_msgid_get, _aisparser.aismsg_23_msgid_set)
    repeat = property(_aisparser.aismsg_23_repeat_get, _aisparser.aismsg_23_repeat_set)
    userid = property(_aisparser.aismsg_23_userid_get, _aisparser.aismsg_23_userid_set)
    spare1 = property(_aisparser.aismsg_23_spare1_get, _aisparser.aismsg_23_spare1_set)
    NE_longitude = property(_aisparser.aismsg_23_NE_longitude_get, _aisparser.aismsg_23_NE_longitude_set)
    NE_latitude = property(_aisparser.aismsg_23_NE_latitude_get, _aisparser.aismsg_23_NE_latitude_set)
    SW_longitude = property(_aisparser.aismsg_23_SW_longitude_get, _aisparser.aismsg_23_SW_longitude_set)
    SW_latitude = property(_aisparser.aismsg_23_SW_latitude_get, _aisparser.aismsg_23_SW_latitude_set)
    station_type = property(_aisparser.aismsg_23_station_type_get, _aisparser.aismsg_23_station_type_set)
    ship_type = property(_aisparser.aismsg_23_ship_type_get, _aisparser.aismsg_23_ship_type_set)
    spare2 = property(_aisparser.aismsg_23_spare2_get, _aisparser.aismsg_23_spare2_set)
    txrx_mode = property(_aisparser.aismsg_23_txrx_mode_get, _aisparser.aismsg_23_txrx_mode_set)
    report_interval = property(_aisparser.aismsg_23_report_interval_get, _aisparser.aismsg_23_report_interval_set)
    quiet_time = property(_aisparser.aismsg_23_quiet_time_get, _aisparser.aismsg_23_quiet_time_set)
    spare3 = property(_aisparser.aismsg_23_spare3_get, _aisparser.aismsg_23_spare3_set)

    def __init__(self):
        _aisparser.aismsg_23_swiginit(self, _aisparser.new_aismsg_23())
    __swig_destroy__ = _aisparser.delete_aismsg_23

# Register aismsg_23 in _aisparser:
_aisparser.aismsg_23_swigregister(aismsg_23)

class aismsg_24(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_24_msgid_get, _aisparser.aismsg_24_msgid_set)
    repeat = property(_aisparser.aismsg_24_repeat_get, _aisparser.aismsg_24_repeat_set)
    userid = property(_aisparser.aismsg_24_userid_get, _aisparser.aismsg_24_userid_set)
    part_number = property(_aisparser.aismsg_24_part_number_get, _aisparser.aismsg_24_part_number_set)
    name = property(_aisparser.aismsg_24_name_get, _aisparser.aismsg_24_name_set)
    ship_type = property(_aisparser.aismsg_24_ship_type_get, _aisparser.aismsg_24_ship_type_set)
    vendor_id = property(_aisparser.aismsg_24_vendor_id_get, _aisparser.aismsg_24_vendor_id_set)
    callsign = property(_aisparser.aismsg_24_callsign_get, _aisparser.aismsg_24_callsign_set)
    dim_bow = property(_aisparser.aismsg_24_dim_bow_get, _aisparser.aismsg_24_dim_bow_set)
    dim_stern = property(_aisparser.aismsg_24_dim_stern_get, _aisparser.aismsg_24_dim_stern_set)
    dim_port = property(_aisparser.aismsg_24_dim_port_get, _aisparser.aismsg_24_dim_port_set)
    dim_starboard = property(_aisparser.aismsg_24_dim_starboard_get, _aisparser.aismsg_24_dim_starboard_set)
    spare = property(_aisparser.aismsg_24_spare_get, _aisparser.aismsg_24_spare_set)
    flags = property(_aisparser.aismsg_24_flags_get, _aisparser.aismsg_24_flags_set)

    def __init__(self):
        _aisparser.aismsg_24_swiginit(self, _aisparser.new_aismsg_24())
    __swig_destroy__ = _aisparser.delete_aismsg_24

# Register aismsg_24 in _aisparser:
_aisparser.aismsg_24_swigregister(aismsg_24)

class aismsg_27(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.aismsg_27_msgid_get, _aisparser.aismsg_27_msgid_set)
    repeat = property(_aisparser.aismsg_27_repeat_get, _aisparser.aismsg_27_repeat_set)
    userid = property(_aisparser.aismsg_27_userid_get, _aisparser.aismsg_27_userid_set)
    pos_acc = property(_aisparser.aismsg_27_pos_acc_get, _aisparser.aismsg_27_pos_acc_set)
    raim = property(_aisparser.aismsg_27_raim_get, _aisparser.aismsg_27_raim_set)
    nav_status = property(_aisparser.aismsg_27_nav_status_get, _aisparser.aismsg_27_nav_status_set)
    longitude = property(_aisparser.aismsg_27_longitude_get, _aisparser.aismsg_27_longitude_set)
    latitude = property(_aisparser.aismsg_27_latitude_get, _aisparser.aismsg_27_latitude_set)
    sog = property(_aisparser.aismsg_27_sog_get, _aisparser.aismsg_27_sog_set)
    cog = property(_aisparser.aismsg_27_cog_get, _aisparser.aismsg_27_cog_set)
    gnss = property(_aisparser.aismsg_27_gnss_get, _aisparser.aismsg_27_gnss_set)
    spare = property(_aisparser.aismsg_27_spare_get, _aisparser.aismsg_27_spare_set)

    def __init__(self):
        _aisparser.aismsg_27_swiginit(self, _aisparser.new_aismsg_27())
    __swig_destroy__ = _aisparser.delete_aismsg_27

# Register aismsg_27 in _aisparser:
_aisparser.aismsg_27_swigregister(aismsg_27)

class timetag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    month = property(_aisparser.timetag_month_get, _aisparser.timetag_month_set)
    day = property(_aisparser.timetag_day_get, _aisparser.timetag_day_set)
    hours = property(_aisparser.timetag_hours_get, _aisparser.timetag_hours_set)
    minutes = property(_aisparser.timetag_minutes_get, _aisparser.timetag_minutes_set)

    def __init__(self):
        _aisparser.timetag_swiginit(self, _aisparser.new_timetag())
    __swig_destroy__ = _aisparser.delete_timetag

# Register timetag in _aisparser:
_aisparser.timetag_swigregister(timetag)

class ais_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msgid = property(_aisparser.ais_state_msgid_get, _aisparser.ais_state_msgid_set)
    sequence = property(_aisparser.ais_state_sequence_get, _aisparser.ais_state_sequence_set)
    total = property(_aisparser.ais_state_total_get, _aisparser.ais_state_total_set)
    num = property(_aisparser.ais_state_num_get, _aisparser.ais_state_num_set)
    channel = property(_aisparser.ais_state_channel_get, _aisparser.ais_state_channel_set)
    six_state = property(_aisparser.ais_state_six_state_get, _aisparser.ais_state_six_state_set)

    def __init__(self):
        _aisparser.ais_state_swiginit(self, _aisparser.new_ais_state())
    __swig_destroy__ = _aisparser.delete_ais_state

# Register ais_state in _aisparser:
_aisparser.ais_state_swigregister(ais_state)

class binary_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dac = property(_aisparser.binary_state_dac_get, _aisparser.binary_state_dac_set)
    fi = property(_aisparser.binary_state_fi_get, _aisparser.binary_state_fi_set)
    spare = property(_aisparser.binary_state_spare_get, _aisparser.binary_state_spare_set)
    msgid = property(_aisparser.binary_state_msgid_get, _aisparser.binary_state_msgid_set)
    six_state = property(_aisparser.binary_state_six_state_get, _aisparser.binary_state_six_state_set)

    def __init__(self):
        _aisparser.binary_state_swiginit(self, _aisparser.new_binary_state())
    __swig_destroy__ = _aisparser.delete_binary_state

# Register binary_state in _aisparser:
_aisparser.binary_state_swigregister(binary_state)


def get_timetag(state, datetime):
    return _aisparser.get_timetag(state, datetime)

def conv_sign(sign_bit, value):
    return _aisparser.conv_sign(sign_bit, value)

def ais2ascii(value):
    return _aisparser.ais2ascii(value)

def conv_pos(latitude, longitude):
    return _aisparser.conv_pos(latitude, longitude)

def conv_pos27(latitude, longitude):
    return _aisparser.conv_pos27(latitude, longitude)

def assemble_vdm(state, str):
    return _aisparser.assemble_vdm(state, str)

def parse_ais_1(state, result):
    return _aisparser.parse_ais_1(state, result)

def parse_ais_2(state, result):
    return _aisparser.parse_ais_2(state, result)

def parse_ais_3(state, result):
    return _aisparser.parse_ais_3(state, result)

def parse_ais_4(state, result):
    return _aisparser.parse_ais_4(state, result)

def parse_ais_5(state, result):
    return _aisparser.parse_ais_5(state, result)

def parse_ais_6(state, result):
    return _aisparser.parse_ais_6(state, result)

def parse_ais_7(state, result):
    return _aisparser.parse_ais_7(state, result)

def parse_ais_8(state, result):
    return _aisparser.parse_ais_8(state, result)

def parse_ais_9(state, result):
    return _aisparser.parse_ais_9(state, result)

def parse_ais_10(state, result):
    return _aisparser.parse_ais_10(state, result)

def parse_ais_11(state, result):
    return _aisparser.parse_ais_11(state, result)

def parse_ais_12(state, result):
    return _aisparser.parse_ais_12(state, result)

def parse_ais_13(state, result):
    return _aisparser.parse_ais_13(state, result)

def parse_ais_14(state, result):
    return _aisparser.parse_ais_14(state, result)

def parse_ais_15(state, result):
    return _aisparser.parse_ais_15(state, result)

def parse_ais_16(state, result):
    return _aisparser.parse_ais_16(state, result)

def parse_ais_17(state, result):
    return _aisparser.parse_ais_17(state, result)

def parse_ais_18(state, result):
    return _aisparser.parse_ais_18(state, result)

def parse_ais_19(state, result):
    return _aisparser.parse_ais_19(state, result)

def parse_ais_20(state, result):
    return _aisparser.parse_ais_20(state, result)

def parse_ais_21(state, result):
    return _aisparser.parse_ais_21(state, result)

def parse_ais_22(state, result):
    return _aisparser.parse_ais_22(state, result)

def parse_ais_23(state, result):
    return _aisparser.parse_ais_23(state, result)

def parse_ais_24(state, result):
    return _aisparser.parse_ais_24(state, result)

def parse_ais_27(state, result):
    return _aisparser.parse_ais_27(state, result)
class wind_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.wind_report_utc_time_get, _aisparser.wind_report_utc_time_set)
    station_id = property(_aisparser.wind_report_station_id_get, _aisparser.wind_report_station_id_set)
    longitude = property(_aisparser.wind_report_longitude_get, _aisparser.wind_report_longitude_set)
    latitude = property(_aisparser.wind_report_latitude_get, _aisparser.wind_report_latitude_set)
    speed = property(_aisparser.wind_report_speed_get, _aisparser.wind_report_speed_set)
    gust = property(_aisparser.wind_report_gust_get, _aisparser.wind_report_gust_set)
    direction = property(_aisparser.wind_report_direction_get, _aisparser.wind_report_direction_set)
    spare = property(_aisparser.wind_report_spare_get, _aisparser.wind_report_spare_set)

    def __init__(self):
        _aisparser.wind_report_swiginit(self, _aisparser.new_wind_report())
    __swig_destroy__ = _aisparser.delete_wind_report

# Register wind_report in _aisparser:
_aisparser.wind_report_swigregister(wind_report)

class weather_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.weather_report_utc_time_get, _aisparser.weather_report_utc_time_set)
    station_id = property(_aisparser.weather_report_station_id_get, _aisparser.weather_report_station_id_set)
    longitude = property(_aisparser.weather_report_longitude_get, _aisparser.weather_report_longitude_set)
    latitude = property(_aisparser.weather_report_latitude_get, _aisparser.weather_report_latitude_set)
    speed = property(_aisparser.weather_report_speed_get, _aisparser.weather_report_speed_set)
    gust = property(_aisparser.weather_report_gust_get, _aisparser.weather_report_gust_set)
    direction = property(_aisparser.weather_report_direction_get, _aisparser.weather_report_direction_set)
    pressure = property(_aisparser.weather_report_pressure_get, _aisparser.weather_report_pressure_set)
    air_temp = property(_aisparser.weather_report_air_temp_get, _aisparser.weather_report_air_temp_set)
    dew_point = property(_aisparser.weather_report_dew_point_get, _aisparser.weather_report_dew_point_set)
    visibility = property(_aisparser.weather_report_visibility_get, _aisparser.weather_report_visibility_set)
    water_temp = property(_aisparser.weather_report_water_temp_get, _aisparser.weather_report_water_temp_set)

    def __init__(self):
        _aisparser.weather_report_swiginit(self, _aisparser.new_weather_report())
    __swig_destroy__ = _aisparser.delete_weather_report

# Register weather_report in _aisparser:
_aisparser.weather_report_swigregister(weather_report)

class water_level_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.water_level_report_utc_time_get, _aisparser.water_level_report_utc_time_set)
    station_id = property(_aisparser.water_level_report_station_id_get, _aisparser.water_level_report_station_id_set)
    longitude = property(_aisparser.water_level_report_longitude_get, _aisparser.water_level_report_longitude_set)
    latitude = property(_aisparser.water_level_report_latitude_get, _aisparser.water_level_report_latitude_set)
    type = property(_aisparser.water_level_report_type_get, _aisparser.water_level_report_type_set)
    level = property(_aisparser.water_level_report_level_get, _aisparser.water_level_report_level_set)
    datum = property(_aisparser.water_level_report_datum_get, _aisparser.water_level_report_datum_set)
    spare = property(_aisparser.water_level_report_spare_get, _aisparser.water_level_report_spare_set)

    def __init__(self):
        _aisparser.water_level_report_swiginit(self, _aisparser.new_water_level_report())
    __swig_destroy__ = _aisparser.delete_water_level_report

# Register water_level_report in _aisparser:
_aisparser.water_level_report_swigregister(water_level_report)

class water_flow_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.water_flow_report_utc_time_get, _aisparser.water_flow_report_utc_time_set)
    station_id = property(_aisparser.water_flow_report_station_id_get, _aisparser.water_flow_report_station_id_set)
    longitude = property(_aisparser.water_flow_report_longitude_get, _aisparser.water_flow_report_longitude_set)
    latitude = property(_aisparser.water_flow_report_latitude_get, _aisparser.water_flow_report_latitude_set)
    flow = property(_aisparser.water_flow_report_flow_get, _aisparser.water_flow_report_flow_set)
    spare = property(_aisparser.water_flow_report_spare_get, _aisparser.water_flow_report_spare_set)

    def __init__(self):
        _aisparser.water_flow_report_swiginit(self, _aisparser.new_water_flow_report())
    __swig_destroy__ = _aisparser.delete_water_flow_report

# Register water_flow_report in _aisparser:
_aisparser.water_flow_report_swigregister(water_flow_report)

class lock_schedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_aisparser.lock_schedule_name_get, _aisparser.lock_schedule_name_set)
    direction = property(_aisparser.lock_schedule_direction_get, _aisparser.lock_schedule_direction_set)
    eta = property(_aisparser.lock_schedule_eta_get, _aisparser.lock_schedule_eta_set)
    spare = property(_aisparser.lock_schedule_spare_get, _aisparser.lock_schedule_spare_set)

    def __init__(self):
        _aisparser.lock_schedule_swiginit(self, _aisparser.new_lock_schedule())
    __swig_destroy__ = _aisparser.delete_lock_schedule

# Register lock_schedule in _aisparser:
_aisparser.lock_schedule_swigregister(lock_schedule)

class current_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.current_report_utc_time_get, _aisparser.current_report_utc_time_set)
    station_id = property(_aisparser.current_report_station_id_get, _aisparser.current_report_station_id_set)
    longitude = property(_aisparser.current_report_longitude_get, _aisparser.current_report_longitude_set)
    latitude = property(_aisparser.current_report_latitude_get, _aisparser.current_report_latitude_set)
    speed = property(_aisparser.current_report_speed_get, _aisparser.current_report_speed_set)
    direction = property(_aisparser.current_report_direction_get, _aisparser.current_report_direction_set)
    spare = property(_aisparser.current_report_spare_get, _aisparser.current_report_spare_set)

    def __init__(self):
        _aisparser.current_report_swiginit(self, _aisparser.new_current_report())
    __swig_destroy__ = _aisparser.delete_current_report

# Register current_report in _aisparser:
_aisparser.current_report_swigregister(current_report)

class salinity_report(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.salinity_report_utc_time_get, _aisparser.salinity_report_utc_time_set)
    station_id = property(_aisparser.salinity_report_station_id_get, _aisparser.salinity_report_station_id_set)
    longitude = property(_aisparser.salinity_report_longitude_get, _aisparser.salinity_report_longitude_set)
    latitude = property(_aisparser.salinity_report_latitude_get, _aisparser.salinity_report_latitude_set)
    salinity = property(_aisparser.salinity_report_salinity_get, _aisparser.salinity_report_salinity_set)
    water_temp = property(_aisparser.salinity_report_water_temp_get, _aisparser.salinity_report_water_temp_set)
    spare = property(_aisparser.salinity_report_spare_get, _aisparser.salinity_report_spare_set)

    def __init__(self):
        _aisparser.salinity_report_swiginit(self, _aisparser.new_salinity_report())
    __swig_destroy__ = _aisparser.delete_salinity_report

# Register salinity_report in _aisparser:
_aisparser.salinity_report_swigregister(salinity_report)

class procession_order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    order = property(_aisparser.procession_order_order_get, _aisparser.procession_order_order_set)
    vessel_name = property(_aisparser.procession_order_vessel_name_get, _aisparser.procession_order_vessel_name_set)
    position_name = property(_aisparser.procession_order_position_name_get, _aisparser.procession_order_position_name_set)
    time_hh = property(_aisparser.procession_order_time_hh_get, _aisparser.procession_order_time_hh_set)
    time_mm = property(_aisparser.procession_order_time_mm_get, _aisparser.procession_order_time_mm_set)
    spare = property(_aisparser.procession_order_spare_get, _aisparser.procession_order_spare_set)

    def __init__(self):
        _aisparser.procession_order_swiginit(self, _aisparser.new_procession_order())
    __swig_destroy__ = _aisparser.delete_procession_order

# Register procession_order in _aisparser:
_aisparser.procession_order_swigregister(procession_order)

class seaway1_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.seaway1_1_report_get, _aisparser.seaway1_1_report_set)

    def __init__(self):
        _aisparser.seaway1_1_swiginit(self, _aisparser.new_seaway1_1())
    __swig_destroy__ = _aisparser.delete_seaway1_1

# Register seaway1_1 in _aisparser:
_aisparser.seaway1_1_swigregister(seaway1_1)

class seaway1_2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.seaway1_2_report_get, _aisparser.seaway1_2_report_set)

    def __init__(self):
        _aisparser.seaway1_2_swiginit(self, _aisparser.new_seaway1_2())
    __swig_destroy__ = _aisparser.delete_seaway1_2

# Register seaway1_2 in _aisparser:
_aisparser.seaway1_2_swigregister(seaway1_2)

class seaway1_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.seaway1_3_report_get, _aisparser.seaway1_3_report_set)

    def __init__(self):
        _aisparser.seaway1_3_swiginit(self, _aisparser.new_seaway1_3())
    __swig_destroy__ = _aisparser.delete_seaway1_3

# Register seaway1_3 in _aisparser:
_aisparser.seaway1_3_swigregister(seaway1_3)

class seaway1_6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.seaway1_6_report_get, _aisparser.seaway1_6_report_set)

    def __init__(self):
        _aisparser.seaway1_6_swiginit(self, _aisparser.new_seaway1_6())
    __swig_destroy__ = _aisparser.delete_seaway1_6

# Register seaway1_6 in _aisparser:
_aisparser.seaway1_6_swigregister(seaway1_6)

class seaway2_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.seaway2_1_utc_time_get, _aisparser.seaway2_1_utc_time_set)
    lock_id = property(_aisparser.seaway2_1_lock_id_get, _aisparser.seaway2_1_lock_id_set)
    longitude = property(_aisparser.seaway2_1_longitude_get, _aisparser.seaway2_1_longitude_set)
    latitude = property(_aisparser.seaway2_1_latitude_get, _aisparser.seaway2_1_latitude_set)
    spare2 = property(_aisparser.seaway2_1_spare2_get, _aisparser.seaway2_1_spare2_set)
    schedule = property(_aisparser.seaway2_1_schedule_get, _aisparser.seaway2_1_schedule_set)

    def __init__(self):
        _aisparser.seaway2_1_swiginit(self, _aisparser.new_seaway2_1())
    __swig_destroy__ = _aisparser.delete_seaway2_1

# Register seaway2_1 in _aisparser:
_aisparser.seaway2_1_swigregister(seaway2_1)

class seaway2_2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.seaway2_2_utc_time_get, _aisparser.seaway2_2_utc_time_set)
    name = property(_aisparser.seaway2_2_name_get, _aisparser.seaway2_2_name_set)
    last_location = property(_aisparser.seaway2_2_last_location_get, _aisparser.seaway2_2_last_location_set)
    last_ata = property(_aisparser.seaway2_2_last_ata_get, _aisparser.seaway2_2_last_ata_set)
    first_lock = property(_aisparser.seaway2_2_first_lock_get, _aisparser.seaway2_2_first_lock_set)
    first_eta = property(_aisparser.seaway2_2_first_eta_get, _aisparser.seaway2_2_first_eta_set)
    second_lock = property(_aisparser.seaway2_2_second_lock_get, _aisparser.seaway2_2_second_lock_set)
    second_eta = property(_aisparser.seaway2_2_second_eta_get, _aisparser.seaway2_2_second_eta_set)
    delay = property(_aisparser.seaway2_2_delay_get, _aisparser.seaway2_2_delay_set)
    spare2 = property(_aisparser.seaway2_2_spare2_get, _aisparser.seaway2_2_spare2_set)

    def __init__(self):
        _aisparser.seaway2_2_swiginit(self, _aisparser.new_seaway2_2())
    __swig_destroy__ = _aisparser.delete_seaway2_2

# Register seaway2_2 in _aisparser:
_aisparser.seaway2_2_swigregister(seaway2_2)

class seaway32_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_aisparser.seaway32_1_major_get, _aisparser.seaway32_1_major_set)
    minor = property(_aisparser.seaway32_1_minor_get, _aisparser.seaway32_1_minor_set)
    spare2 = property(_aisparser.seaway32_1_spare2_get, _aisparser.seaway32_1_spare2_set)

    def __init__(self):
        _aisparser.seaway32_1_swiginit(self, _aisparser.new_seaway32_1())
    __swig_destroy__ = _aisparser.delete_seaway32_1

# Register seaway32_1 in _aisparser:
_aisparser.seaway32_1_swigregister(seaway32_1)

class pawss1_4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.pawss1_4_report_get, _aisparser.pawss1_4_report_set)

    def __init__(self):
        _aisparser.pawss1_4_swiginit(self, _aisparser.new_pawss1_4())
    __swig_destroy__ = _aisparser.delete_pawss1_4

# Register pawss1_4 in _aisparser:
_aisparser.pawss1_4_swigregister(pawss1_4)

class pawss1_5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    report = property(_aisparser.pawss1_5_report_get, _aisparser.pawss1_5_report_set)

    def __init__(self):
        _aisparser.pawss1_5_swiginit(self, _aisparser.new_pawss1_5())
    __swig_destroy__ = _aisparser.delete_pawss1_5

# Register pawss1_5 in _aisparser:
_aisparser.pawss1_5_swigregister(pawss1_5)

class pawss2_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_time = property(_aisparser.pawss2_3_utc_time_get, _aisparser.pawss2_3_utc_time_set)
    direction = property(_aisparser.pawss2_3_direction_get, _aisparser.pawss2_3_direction_set)
    longitude = property(_aisparser.pawss2_3_longitude_get, _aisparser.pawss2_3_longitude_set)
    latitude = property(_aisparser.pawss2_3_latitude_get, _aisparser.pawss2_3_latitude_set)
    spare2 = property(_aisparser.pawss2_3_spare2_get, _aisparser.pawss2_3_spare2_set)
    report = property(_aisparser.pawss2_3_report_get, _aisparser.pawss2_3_report_set)

    def __init__(self):
        _aisparser.pawss2_3_swiginit(self, _aisparser.new_pawss2_3())
    __swig_destroy__ = _aisparser.delete_pawss2_3

# Register pawss2_3 in _aisparser:
_aisparser.pawss2_3_swigregister(pawss2_3)


def parse_seaway1_1(state, result):
    return _aisparser.parse_seaway1_1(state, result)

def parse_seaway1_2(state, result):
    return _aisparser.parse_seaway1_2(state, result)

def parse_seaway1_3(state, result):
    return _aisparser.parse_seaway1_3(state, result)

def parse_seaway1_6(state, result):
    return _aisparser.parse_seaway1_6(state, result)

def parse_seaway2_1(state, result):
    return _aisparser.parse_seaway2_1(state, result)

def parse_seaway2_2(state, result):
    return _aisparser.parse_seaway2_2(state, result)

def parse_seaway32_1(state, result):
    return _aisparser.parse_seaway32_1(state, result)

def parse_pawss1_4(state, result):
    return _aisparser.parse_pawss1_4(state, result)

def parse_pawss1_5(state, result):
    return _aisparser.parse_pawss1_5(state, result)

def parse_pawss2_3(state, result):
    return _aisparser.parse_pawss2_3(state, result)
class imo1_11(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    latitude = property(_aisparser.imo1_11_latitude_get, _aisparser.imo1_11_latitude_set)
    longitude = property(_aisparser.imo1_11_longitude_get, _aisparser.imo1_11_longitude_set)
    timedate = property(_aisparser.imo1_11_timedate_get, _aisparser.imo1_11_timedate_set)
    wind_avg = property(_aisparser.imo1_11_wind_avg_get, _aisparser.imo1_11_wind_avg_set)
    wind_gust = property(_aisparser.imo1_11_wind_gust_get, _aisparser.imo1_11_wind_gust_set)
    wind_dir = property(_aisparser.imo1_11_wind_dir_get, _aisparser.imo1_11_wind_dir_set)
    gust_dir = property(_aisparser.imo1_11_gust_dir_get, _aisparser.imo1_11_gust_dir_set)
    air_temp = property(_aisparser.imo1_11_air_temp_get, _aisparser.imo1_11_air_temp_set)
    humidity = property(_aisparser.imo1_11_humidity_get, _aisparser.imo1_11_humidity_set)
    dew_point = property(_aisparser.imo1_11_dew_point_get, _aisparser.imo1_11_dew_point_set)
    pressure = property(_aisparser.imo1_11_pressure_get, _aisparser.imo1_11_pressure_set)
    tendency = property(_aisparser.imo1_11_tendency_get, _aisparser.imo1_11_tendency_set)
    visibility = property(_aisparser.imo1_11_visibility_get, _aisparser.imo1_11_visibility_set)
    water_level = property(_aisparser.imo1_11_water_level_get, _aisparser.imo1_11_water_level_set)
    water_trend = property(_aisparser.imo1_11_water_trend_get, _aisparser.imo1_11_water_trend_set)
    surface_speed = property(_aisparser.imo1_11_surface_speed_get, _aisparser.imo1_11_surface_speed_set)
    surface_dir = property(_aisparser.imo1_11_surface_dir_get, _aisparser.imo1_11_surface_dir_set)
    speed_2 = property(_aisparser.imo1_11_speed_2_get, _aisparser.imo1_11_speed_2_set)
    dir_2 = property(_aisparser.imo1_11_dir_2_get, _aisparser.imo1_11_dir_2_set)
    level_2 = property(_aisparser.imo1_11_level_2_get, _aisparser.imo1_11_level_2_set)
    speed_3 = property(_aisparser.imo1_11_speed_3_get, _aisparser.imo1_11_speed_3_set)
    dir_3 = property(_aisparser.imo1_11_dir_3_get, _aisparser.imo1_11_dir_3_set)
    level_3 = property(_aisparser.imo1_11_level_3_get, _aisparser.imo1_11_level_3_set)
    wave_height = property(_aisparser.imo1_11_wave_height_get, _aisparser.imo1_11_wave_height_set)
    wave_period = property(_aisparser.imo1_11_wave_period_get, _aisparser.imo1_11_wave_period_set)
    wave_dir = property(_aisparser.imo1_11_wave_dir_get, _aisparser.imo1_11_wave_dir_set)
    swell_height = property(_aisparser.imo1_11_swell_height_get, _aisparser.imo1_11_swell_height_set)
    swell_period = property(_aisparser.imo1_11_swell_period_get, _aisparser.imo1_11_swell_period_set)
    swell_dir = property(_aisparser.imo1_11_swell_dir_get, _aisparser.imo1_11_swell_dir_set)
    sea_state = property(_aisparser.imo1_11_sea_state_get, _aisparser.imo1_11_sea_state_set)
    water_temp = property(_aisparser.imo1_11_water_temp_get, _aisparser.imo1_11_water_temp_set)
    precip_type = property(_aisparser.imo1_11_precip_type_get, _aisparser.imo1_11_precip_type_set)
    salanity = property(_aisparser.imo1_11_salanity_get, _aisparser.imo1_11_salanity_set)
    ice = property(_aisparser.imo1_11_ice_get, _aisparser.imo1_11_ice_set)
    spare = property(_aisparser.imo1_11_spare_get, _aisparser.imo1_11_spare_set)

    def __init__(self):
        _aisparser.imo1_11_swiginit(self, _aisparser.new_imo1_11())
    __swig_destroy__ = _aisparser.delete_imo1_11

# Register imo1_11 in _aisparser:
_aisparser.imo1_11_swigregister(imo1_11)

class imo1_12(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    last_port = property(_aisparser.imo1_12_last_port_get, _aisparser.imo1_12_last_port_set)
    atd = property(_aisparser.imo1_12_atd_get, _aisparser.imo1_12_atd_set)
    next_port = property(_aisparser.imo1_12_next_port_get, _aisparser.imo1_12_next_port_set)
    eta = property(_aisparser.imo1_12_eta_get, _aisparser.imo1_12_eta_set)
    good = property(_aisparser.imo1_12_good_get, _aisparser.imo1_12_good_set)
    imd = property(_aisparser.imo1_12_imd_get, _aisparser.imo1_12_imd_set)
    un_number = property(_aisparser.imo1_12_un_number_get, _aisparser.imo1_12_un_number_set)
    quantity = property(_aisparser.imo1_12_quantity_get, _aisparser.imo1_12_quantity_set)
    units = property(_aisparser.imo1_12_units_get, _aisparser.imo1_12_units_set)
    spare = property(_aisparser.imo1_12_spare_get, _aisparser.imo1_12_spare_set)

    def __init__(self):
        _aisparser.imo1_12_swiginit(self, _aisparser.new_imo1_12())
    __swig_destroy__ = _aisparser.delete_imo1_12

# Register imo1_12 in _aisparser:
_aisparser.imo1_12_swigregister(imo1_12)

class imo1_13(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reason = property(_aisparser.imo1_13_reason_get, _aisparser.imo1_13_reason_set)
    location_from = property(_aisparser.imo1_13_location_from_get, _aisparser.imo1_13_location_from_set)
    location_to = property(_aisparser.imo1_13_location_to_get, _aisparser.imo1_13_location_to_set)
    extension = property(_aisparser.imo1_13_extension_get, _aisparser.imo1_13_extension_set)
    units = property(_aisparser.imo1_13_units_get, _aisparser.imo1_13_units_set)
    from_day = property(_aisparser.imo1_13_from_day_get, _aisparser.imo1_13_from_day_set)
    from_month = property(_aisparser.imo1_13_from_month_get, _aisparser.imo1_13_from_month_set)
    from_hour = property(_aisparser.imo1_13_from_hour_get, _aisparser.imo1_13_from_hour_set)
    from_minute = property(_aisparser.imo1_13_from_minute_get, _aisparser.imo1_13_from_minute_set)
    to_day = property(_aisparser.imo1_13_to_day_get, _aisparser.imo1_13_to_day_set)
    to_month = property(_aisparser.imo1_13_to_month_get, _aisparser.imo1_13_to_month_set)
    to_hour = property(_aisparser.imo1_13_to_hour_get, _aisparser.imo1_13_to_hour_set)
    to_minute = property(_aisparser.imo1_13_to_minute_get, _aisparser.imo1_13_to_minute_set)
    spare = property(_aisparser.imo1_13_spare_get, _aisparser.imo1_13_spare_set)

    def __init__(self):
        _aisparser.imo1_13_swiginit(self, _aisparser.new_imo1_13())
    __swig_destroy__ = _aisparser.delete_imo1_13

# Register imo1_13 in _aisparser:
_aisparser.imo1_13_swigregister(imo1_13)

class tidal_window(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    latitude = property(_aisparser.tidal_window_latitude_get, _aisparser.tidal_window_latitude_set)
    longitude = property(_aisparser.tidal_window_longitude_get, _aisparser.tidal_window_longitude_set)
    from_hour = property(_aisparser.tidal_window_from_hour_get, _aisparser.tidal_window_from_hour_set)
    from_minute = property(_aisparser.tidal_window_from_minute_get, _aisparser.tidal_window_from_minute_set)
    to_hour = property(_aisparser.tidal_window_to_hour_get, _aisparser.tidal_window_to_hour_set)
    to_minute = property(_aisparser.tidal_window_to_minute_get, _aisparser.tidal_window_to_minute_set)
    current_dir = property(_aisparser.tidal_window_current_dir_get, _aisparser.tidal_window_current_dir_set)
    current_speed = property(_aisparser.tidal_window_current_speed_get, _aisparser.tidal_window_current_speed_set)

    def __init__(self):
        _aisparser.tidal_window_swiginit(self, _aisparser.new_tidal_window())
    __swig_destroy__ = _aisparser.delete_tidal_window

# Register tidal_window in _aisparser:
_aisparser.tidal_window_swigregister(tidal_window)

class imo1_14(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    utc_month = property(_aisparser.imo1_14_utc_month_get, _aisparser.imo1_14_utc_month_set)
    utc_day = property(_aisparser.imo1_14_utc_day_get, _aisparser.imo1_14_utc_day_set)
    windows = property(_aisparser.imo1_14_windows_get, _aisparser.imo1_14_windows_set)

    def __init__(self):
        _aisparser.imo1_14_swiginit(self, _aisparser.new_imo1_14())
    __swig_destroy__ = _aisparser.delete_imo1_14

# Register imo1_14 in _aisparser:
_aisparser.imo1_14_swigregister(imo1_14)

class imo1_15(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ais_draught = property(_aisparser.imo1_15_ais_draught_get, _aisparser.imo1_15_ais_draught_set)
    spare = property(_aisparser.imo1_15_spare_get, _aisparser.imo1_15_spare_set)

    def __init__(self):
        _aisparser.imo1_15_swiginit(self, _aisparser.new_imo1_15())
    __swig_destroy__ = _aisparser.delete_imo1_15

# Register imo1_15 in _aisparser:
_aisparser.imo1_15_swigregister(imo1_15)

class imo1_16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_persons = property(_aisparser.imo1_16_num_persons_get, _aisparser.imo1_16_num_persons_set)
    spare = property(_aisparser.imo1_16_spare_get, _aisparser.imo1_16_spare_set)

    def __init__(self):
        _aisparser.imo1_16_swiginit(self, _aisparser.new_imo1_16())
    __swig_destroy__ = _aisparser.delete_imo1_16

# Register imo1_16 in _aisparser:
_aisparser.imo1_16_swigregister(imo1_16)

class pseudo_target(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_aisparser.pseudo_target_type_get, _aisparser.pseudo_target_type_set)
    mmsi = property(_aisparser.pseudo_target_mmsi_get, _aisparser.pseudo_target_mmsi_set)
    imo = property(_aisparser.pseudo_target_imo_get, _aisparser.pseudo_target_imo_set)
    callsign = property(_aisparser.pseudo_target_callsign_get, _aisparser.pseudo_target_callsign_set)
    other = property(_aisparser.pseudo_target_other_get, _aisparser.pseudo_target_other_set)
    spare = property(_aisparser.pseudo_target_spare_get, _aisparser.pseudo_target_spare_set)
    latitude = property(_aisparser.pseudo_target_latitude_get, _aisparser.pseudo_target_latitude_set)
    longitude = property(_aisparser.pseudo_target_longitude_get, _aisparser.pseudo_target_longitude_set)
    cog = property(_aisparser.pseudo_target_cog_get, _aisparser.pseudo_target_cog_set)
    timestamp = property(_aisparser.pseudo_target_timestamp_get, _aisparser.pseudo_target_timestamp_set)
    sog = property(_aisparser.pseudo_target_sog_get, _aisparser.pseudo_target_sog_set)

    def __init__(self):
        _aisparser.pseudo_target_swiginit(self, _aisparser.new_pseudo_target())
    __swig_destroy__ = _aisparser.delete_pseudo_target

# Register pseudo_target in _aisparser:
_aisparser.pseudo_target_swigregister(pseudo_target)

class imo1_17(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    targets = property(_aisparser.imo1_17_targets_get, _aisparser.imo1_17_targets_set)

    def __init__(self):
        _aisparser.imo1_17_swiginit(self, _aisparser.new_imo1_17())
    __swig_destroy__ = _aisparser.delete_imo1_17

# Register imo1_17 in _aisparser:
_aisparser.imo1_17_swigregister(imo1_17)


def parse_imo1_11(state, result):
    return _aisparser.parse_imo1_11(state, result)

def parse_imo1_12(state, result):
    return _aisparser.parse_imo1_12(state, result)

def parse_imo1_13(state, result):
    return _aisparser.parse_imo1_13(state, result)

def parse_imo1_14(state, result):
    return _aisparser.parse_imo1_14(state, result)

def parse_imo1_15(state, result):
    return _aisparser.parse_imo1_15(state, result)

def parse_imo1_16(state, result):
    return _aisparser.parse_imo1_16(state, result)

def parse_imo1_17(state, result):
    return _aisparser.parse_imo1_17(state, result)

def get_msg6_data(msg):
    return _aisparser.get_msg6_data(msg)

def get_msg8_data(msg):
    return _aisparser.get_msg8_data(msg)

def get_msg17_data(msg):
    return _aisparser.get_msg17_data(msg)

def get_weather_report(msg, idx):
    return _aisparser.get_weather_report(msg, idx)

def get_weather_utc_time(msg):
    return _aisparser.get_weather_utc_time(msg)

def get_wind_report(msg, idx):
    return _aisparser.get_wind_report(msg, idx)

def get_wind_utc_time(msg):
    return _aisparser.get_wind_utc_time(msg)

def get_water_level_report(msg, idx):
    return _aisparser.get_water_level_report(msg, idx)

def get_water_level_utc_time(msg):
    return _aisparser.get_water_level_utc_time(msg)

def get_water_flow_report(msg, idx):
    return _aisparser.get_water_flow_report(msg, idx)

def get_water_flow_utc_time(msg):
    return _aisparser.get_water_flow_utc_time(msg)

def get_lock_schedule(msg, idx):
    return _aisparser.get_lock_schedule(msg, idx)

def get_lock_schedule_utc_time(msg):
    return _aisparser.get_lock_schedule_utc_time(msg)

def get_lock_schedule_eta(msg):
    return _aisparser.get_lock_schedule_eta(msg)

def get_lock_times_utc_time(msg):
    return _aisparser.get_lock_times_utc_time(msg)

def get_lock_times_last_ata(msg):
    return _aisparser.get_lock_times_last_ata(msg)

def get_lock_times_first_eta(msg):
    return _aisparser.get_lock_times_first_eta(msg)

def get_lock_times_second_eta(msg):
    return _aisparser.get_lock_times_second_eta(msg)

def get_current_report(msg, idx):
    return _aisparser.get_current_report(msg, idx)

def get_current_utc_time(msg):
    return _aisparser.get_current_utc_time(msg)

def get_salinity_report(msg, idx):
    return _aisparser.get_salinity_report(msg, idx)

def get_salinity_utc_time(msg):
    return _aisparser.get_salinity_utc_time(msg)

def get_procession_order(msg, idx):
    return _aisparser.get_procession_order(msg, idx)

def get_procession_order_utc_time(msg):
    return _aisparser.get_procession_order_utc_time(msg)

def get_imo1_12_atd(msg):
    return _aisparser.get_imo1_12_atd(msg)

def get_imo1_12_eta(msg):
    return _aisparser.get_imo1_12_eta(msg)

def get_tidal_window(msg, idx):
    return _aisparser.get_tidal_window(msg, idx)

def get_pseudo_target(msg, idx):
    return _aisparser.get_pseudo_target(msg, idx)


