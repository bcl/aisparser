# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _aisparser
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


pos2ddd = _aisparser.pos2ddd
pos2dmm = _aisparser.pos2dmm
MAX_NMEA_LENGTH = _aisparser.MAX_NMEA_LENGTH
MAX_NMEA_FIELDS = _aisparser.MAX_NMEA_FIELDS
START = _aisparser.START
END = _aisparser.END
DONE = _aisparser.DONE
class nmea_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nmea_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nmea_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["search"] = _aisparser.nmea_state_search_set
    __swig_getmethods__["search"] = _aisparser.nmea_state_search_get
    if _newclass:search = _swig_property(_aisparser.nmea_state_search_get, _aisparser.nmea_state_search_set)
    __swig_setmethods__["field"] = _aisparser.nmea_state_field_set
    __swig_getmethods__["field"] = _aisparser.nmea_state_field_get
    if _newclass:field = _swig_property(_aisparser.nmea_state_field_get, _aisparser.nmea_state_field_set)
    __swig_setmethods__["str"] = _aisparser.nmea_state_str_set
    __swig_getmethods__["str"] = _aisparser.nmea_state_str_get
    if _newclass:str = _swig_property(_aisparser.nmea_state_str_get, _aisparser.nmea_state_str_set)
    __swig_setmethods__["str_len"] = _aisparser.nmea_state_str_len_set
    __swig_getmethods__["str_len"] = _aisparser.nmea_state_str_len_get
    if _newclass:str_len = _swig_property(_aisparser.nmea_state_str_len_get, _aisparser.nmea_state_str_len_set)
    def __init__(self, *args):
        this = _aisparser.new_nmea_state(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_nmea_state
    __del__ = lambda self : None;
nmea_state_swigregister = _aisparser.nmea_state_swigregister
nmea_state_swigregister(nmea_state)

check_nmea_checksum = _aisparser.check_nmea_checksum
nmea_checksum = _aisparser.nmea_checksum
find_nmea_start = _aisparser.find_nmea_start
ahextobin = _aisparser.ahextobin
nmea_next_field = _aisparser.nmea_next_field
nmea_uint = _aisparser.nmea_uint
nmea_copy_field = _aisparser.nmea_copy_field
SIXBIT_LEN = _aisparser.SIXBIT_LEN
class sixbit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sixbit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sixbit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bits"] = _aisparser.sixbit_bits_set
    __swig_getmethods__["bits"] = _aisparser.sixbit_bits_get
    if _newclass:bits = _swig_property(_aisparser.sixbit_bits_get, _aisparser.sixbit_bits_set)
    __swig_setmethods__["p"] = _aisparser.sixbit_p_set
    __swig_getmethods__["p"] = _aisparser.sixbit_p_get
    if _newclass:p = _swig_property(_aisparser.sixbit_p_get, _aisparser.sixbit_p_set)
    __swig_setmethods__["remainder"] = _aisparser.sixbit_remainder_set
    __swig_getmethods__["remainder"] = _aisparser.sixbit_remainder_get
    if _newclass:remainder = _swig_property(_aisparser.sixbit_remainder_get, _aisparser.sixbit_remainder_set)
    __swig_setmethods__["remainder_bits"] = _aisparser.sixbit_remainder_bits_set
    __swig_getmethods__["remainder_bits"] = _aisparser.sixbit_remainder_bits_get
    if _newclass:remainder_bits = _swig_property(_aisparser.sixbit_remainder_bits_get, _aisparser.sixbit_remainder_bits_set)
    def __init__(self, *args):
        this = _aisparser.new_sixbit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_sixbit
    __del__ = lambda self : None;
sixbit_swigregister = _aisparser.sixbit_swigregister
sixbit_swigregister(sixbit)

binfrom6bit = _aisparser.binfrom6bit
init_6bit = _aisparser.init_6bit
get_6bit = _aisparser.get_6bit
sixbit_length = _aisparser.sixbit_length
binto6bit = _aisparser.binto6bit
SIXBUF_LEN = _aisparser.SIXBUF_LEN
class aismsg_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_1_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_1_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_1_msgid_get, _aisparser.aismsg_1_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_1_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_1_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_1_repeat_get, _aisparser.aismsg_1_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_1_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_1_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_1_userid_get, _aisparser.aismsg_1_userid_set)
    __swig_setmethods__["nav_status"] = _aisparser.aismsg_1_nav_status_set
    __swig_getmethods__["nav_status"] = _aisparser.aismsg_1_nav_status_get
    if _newclass:nav_status = _swig_property(_aisparser.aismsg_1_nav_status_get, _aisparser.aismsg_1_nav_status_set)
    __swig_setmethods__["rot"] = _aisparser.aismsg_1_rot_set
    __swig_getmethods__["rot"] = _aisparser.aismsg_1_rot_get
    if _newclass:rot = _swig_property(_aisparser.aismsg_1_rot_get, _aisparser.aismsg_1_rot_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_1_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_1_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_1_sog_get, _aisparser.aismsg_1_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_1_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_1_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_1_pos_acc_get, _aisparser.aismsg_1_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_1_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_1_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_1_longitude_get, _aisparser.aismsg_1_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_1_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_1_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_1_latitude_get, _aisparser.aismsg_1_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_1_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_1_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_1_cog_get, _aisparser.aismsg_1_cog_set)
    __swig_setmethods__["true"] = _aisparser.aismsg_1_true_set
    __swig_getmethods__["true"] = _aisparser.aismsg_1_true_get
    if _newclass:true = _swig_property(_aisparser.aismsg_1_true_get, _aisparser.aismsg_1_true_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_1_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_1_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_1_utc_sec_get, _aisparser.aismsg_1_utc_sec_set)
    __swig_setmethods__["regional"] = _aisparser.aismsg_1_regional_set
    __swig_getmethods__["regional"] = _aisparser.aismsg_1_regional_get
    if _newclass:regional = _swig_property(_aisparser.aismsg_1_regional_get, _aisparser.aismsg_1_regional_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_1_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_1_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_1_spare_get, _aisparser.aismsg_1_spare_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_1_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_1_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_1_raim_get, _aisparser.aismsg_1_raim_set)
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_1_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_1_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_1_sync_state_get, _aisparser.aismsg_1_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_1_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_1_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_1_slot_timeout_get, _aisparser.aismsg_1_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_1_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_1_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_1_sub_message_get, _aisparser.aismsg_1_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_1
    __del__ = lambda self : None;
aismsg_1_swigregister = _aisparser.aismsg_1_swigregister
aismsg_1_swigregister(aismsg_1)

class aismsg_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_2_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_2_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_2_msgid_get, _aisparser.aismsg_2_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_2_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_2_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_2_repeat_get, _aisparser.aismsg_2_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_2_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_2_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_2_userid_get, _aisparser.aismsg_2_userid_set)
    __swig_setmethods__["nav_status"] = _aisparser.aismsg_2_nav_status_set
    __swig_getmethods__["nav_status"] = _aisparser.aismsg_2_nav_status_get
    if _newclass:nav_status = _swig_property(_aisparser.aismsg_2_nav_status_get, _aisparser.aismsg_2_nav_status_set)
    __swig_setmethods__["rot"] = _aisparser.aismsg_2_rot_set
    __swig_getmethods__["rot"] = _aisparser.aismsg_2_rot_get
    if _newclass:rot = _swig_property(_aisparser.aismsg_2_rot_get, _aisparser.aismsg_2_rot_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_2_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_2_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_2_sog_get, _aisparser.aismsg_2_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_2_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_2_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_2_pos_acc_get, _aisparser.aismsg_2_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_2_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_2_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_2_longitude_get, _aisparser.aismsg_2_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_2_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_2_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_2_latitude_get, _aisparser.aismsg_2_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_2_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_2_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_2_cog_get, _aisparser.aismsg_2_cog_set)
    __swig_setmethods__["true"] = _aisparser.aismsg_2_true_set
    __swig_getmethods__["true"] = _aisparser.aismsg_2_true_get
    if _newclass:true = _swig_property(_aisparser.aismsg_2_true_get, _aisparser.aismsg_2_true_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_2_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_2_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_2_utc_sec_get, _aisparser.aismsg_2_utc_sec_set)
    __swig_setmethods__["regional"] = _aisparser.aismsg_2_regional_set
    __swig_getmethods__["regional"] = _aisparser.aismsg_2_regional_get
    if _newclass:regional = _swig_property(_aisparser.aismsg_2_regional_get, _aisparser.aismsg_2_regional_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_2_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_2_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_2_spare_get, _aisparser.aismsg_2_spare_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_2_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_2_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_2_raim_get, _aisparser.aismsg_2_raim_set)
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_2_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_2_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_2_sync_state_get, _aisparser.aismsg_2_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_2_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_2_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_2_slot_timeout_get, _aisparser.aismsg_2_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_2_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_2_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_2_sub_message_get, _aisparser.aismsg_2_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_2
    __del__ = lambda self : None;
aismsg_2_swigregister = _aisparser.aismsg_2_swigregister
aismsg_2_swigregister(aismsg_2)

class aismsg_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_3_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_3_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_3_msgid_get, _aisparser.aismsg_3_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_3_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_3_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_3_repeat_get, _aisparser.aismsg_3_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_3_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_3_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_3_userid_get, _aisparser.aismsg_3_userid_set)
    __swig_setmethods__["nav_status"] = _aisparser.aismsg_3_nav_status_set
    __swig_getmethods__["nav_status"] = _aisparser.aismsg_3_nav_status_get
    if _newclass:nav_status = _swig_property(_aisparser.aismsg_3_nav_status_get, _aisparser.aismsg_3_nav_status_set)
    __swig_setmethods__["rot"] = _aisparser.aismsg_3_rot_set
    __swig_getmethods__["rot"] = _aisparser.aismsg_3_rot_get
    if _newclass:rot = _swig_property(_aisparser.aismsg_3_rot_get, _aisparser.aismsg_3_rot_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_3_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_3_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_3_sog_get, _aisparser.aismsg_3_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_3_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_3_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_3_pos_acc_get, _aisparser.aismsg_3_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_3_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_3_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_3_longitude_get, _aisparser.aismsg_3_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_3_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_3_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_3_latitude_get, _aisparser.aismsg_3_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_3_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_3_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_3_cog_get, _aisparser.aismsg_3_cog_set)
    __swig_setmethods__["true"] = _aisparser.aismsg_3_true_set
    __swig_getmethods__["true"] = _aisparser.aismsg_3_true_get
    if _newclass:true = _swig_property(_aisparser.aismsg_3_true_get, _aisparser.aismsg_3_true_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_3_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_3_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_3_utc_sec_get, _aisparser.aismsg_3_utc_sec_set)
    __swig_setmethods__["regional"] = _aisparser.aismsg_3_regional_set
    __swig_getmethods__["regional"] = _aisparser.aismsg_3_regional_get
    if _newclass:regional = _swig_property(_aisparser.aismsg_3_regional_get, _aisparser.aismsg_3_regional_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_3_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_3_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_3_spare_get, _aisparser.aismsg_3_spare_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_3_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_3_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_3_raim_get, _aisparser.aismsg_3_raim_set)
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_3_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_3_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_3_sync_state_get, _aisparser.aismsg_3_sync_state_set)
    __swig_setmethods__["slot_increment"] = _aisparser.aismsg_3_slot_increment_set
    __swig_getmethods__["slot_increment"] = _aisparser.aismsg_3_slot_increment_get
    if _newclass:slot_increment = _swig_property(_aisparser.aismsg_3_slot_increment_get, _aisparser.aismsg_3_slot_increment_set)
    __swig_setmethods__["num_slots"] = _aisparser.aismsg_3_num_slots_set
    __swig_getmethods__["num_slots"] = _aisparser.aismsg_3_num_slots_get
    if _newclass:num_slots = _swig_property(_aisparser.aismsg_3_num_slots_get, _aisparser.aismsg_3_num_slots_set)
    __swig_setmethods__["keep"] = _aisparser.aismsg_3_keep_set
    __swig_getmethods__["keep"] = _aisparser.aismsg_3_keep_get
    if _newclass:keep = _swig_property(_aisparser.aismsg_3_keep_get, _aisparser.aismsg_3_keep_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_3
    __del__ = lambda self : None;
aismsg_3_swigregister = _aisparser.aismsg_3_swigregister
aismsg_3_swigregister(aismsg_3)

class aismsg_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_4_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_4_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_4_msgid_get, _aisparser.aismsg_4_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_4_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_4_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_4_repeat_get, _aisparser.aismsg_4_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_4_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_4_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_4_userid_get, _aisparser.aismsg_4_userid_set)
    __swig_setmethods__["utc_year"] = _aisparser.aismsg_4_utc_year_set
    __swig_getmethods__["utc_year"] = _aisparser.aismsg_4_utc_year_get
    if _newclass:utc_year = _swig_property(_aisparser.aismsg_4_utc_year_get, _aisparser.aismsg_4_utc_year_set)
    __swig_setmethods__["utc_month"] = _aisparser.aismsg_4_utc_month_set
    __swig_getmethods__["utc_month"] = _aisparser.aismsg_4_utc_month_get
    if _newclass:utc_month = _swig_property(_aisparser.aismsg_4_utc_month_get, _aisparser.aismsg_4_utc_month_set)
    __swig_setmethods__["utc_day"] = _aisparser.aismsg_4_utc_day_set
    __swig_getmethods__["utc_day"] = _aisparser.aismsg_4_utc_day_get
    if _newclass:utc_day = _swig_property(_aisparser.aismsg_4_utc_day_get, _aisparser.aismsg_4_utc_day_set)
    __swig_setmethods__["utc_hour"] = _aisparser.aismsg_4_utc_hour_set
    __swig_getmethods__["utc_hour"] = _aisparser.aismsg_4_utc_hour_get
    if _newclass:utc_hour = _swig_property(_aisparser.aismsg_4_utc_hour_get, _aisparser.aismsg_4_utc_hour_set)
    __swig_setmethods__["utc_minute"] = _aisparser.aismsg_4_utc_minute_set
    __swig_getmethods__["utc_minute"] = _aisparser.aismsg_4_utc_minute_get
    if _newclass:utc_minute = _swig_property(_aisparser.aismsg_4_utc_minute_get, _aisparser.aismsg_4_utc_minute_set)
    __swig_setmethods__["utc_second"] = _aisparser.aismsg_4_utc_second_set
    __swig_getmethods__["utc_second"] = _aisparser.aismsg_4_utc_second_get
    if _newclass:utc_second = _swig_property(_aisparser.aismsg_4_utc_second_get, _aisparser.aismsg_4_utc_second_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_4_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_4_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_4_pos_acc_get, _aisparser.aismsg_4_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_4_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_4_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_4_longitude_get, _aisparser.aismsg_4_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_4_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_4_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_4_latitude_get, _aisparser.aismsg_4_latitude_set)
    __swig_setmethods__["pos_type"] = _aisparser.aismsg_4_pos_type_set
    __swig_getmethods__["pos_type"] = _aisparser.aismsg_4_pos_type_get
    if _newclass:pos_type = _swig_property(_aisparser.aismsg_4_pos_type_get, _aisparser.aismsg_4_pos_type_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_4_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_4_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_4_spare_get, _aisparser.aismsg_4_spare_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_4_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_4_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_4_raim_get, _aisparser.aismsg_4_raim_set)
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_4_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_4_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_4_sync_state_get, _aisparser.aismsg_4_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_4_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_4_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_4_slot_timeout_get, _aisparser.aismsg_4_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_4_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_4_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_4_sub_message_get, _aisparser.aismsg_4_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_4
    __del__ = lambda self : None;
aismsg_4_swigregister = _aisparser.aismsg_4_swigregister
aismsg_4_swigregister(aismsg_4)

class aismsg_5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_5, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_5_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_5_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_5_msgid_get, _aisparser.aismsg_5_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_5_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_5_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_5_repeat_get, _aisparser.aismsg_5_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_5_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_5_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_5_userid_get, _aisparser.aismsg_5_userid_set)
    __swig_setmethods__["version"] = _aisparser.aismsg_5_version_set
    __swig_getmethods__["version"] = _aisparser.aismsg_5_version_get
    if _newclass:version = _swig_property(_aisparser.aismsg_5_version_get, _aisparser.aismsg_5_version_set)
    __swig_setmethods__["imo"] = _aisparser.aismsg_5_imo_set
    __swig_getmethods__["imo"] = _aisparser.aismsg_5_imo_get
    if _newclass:imo = _swig_property(_aisparser.aismsg_5_imo_get, _aisparser.aismsg_5_imo_set)
    __swig_setmethods__["callsign"] = _aisparser.aismsg_5_callsign_set
    __swig_getmethods__["callsign"] = _aisparser.aismsg_5_callsign_get
    if _newclass:callsign = _swig_property(_aisparser.aismsg_5_callsign_get, _aisparser.aismsg_5_callsign_set)
    __swig_setmethods__["name"] = _aisparser.aismsg_5_name_set
    __swig_getmethods__["name"] = _aisparser.aismsg_5_name_get
    if _newclass:name = _swig_property(_aisparser.aismsg_5_name_get, _aisparser.aismsg_5_name_set)
    __swig_setmethods__["ship_type"] = _aisparser.aismsg_5_ship_type_set
    __swig_getmethods__["ship_type"] = _aisparser.aismsg_5_ship_type_get
    if _newclass:ship_type = _swig_property(_aisparser.aismsg_5_ship_type_get, _aisparser.aismsg_5_ship_type_set)
    __swig_setmethods__["dim_bow"] = _aisparser.aismsg_5_dim_bow_set
    __swig_getmethods__["dim_bow"] = _aisparser.aismsg_5_dim_bow_get
    if _newclass:dim_bow = _swig_property(_aisparser.aismsg_5_dim_bow_get, _aisparser.aismsg_5_dim_bow_set)
    __swig_setmethods__["dim_stern"] = _aisparser.aismsg_5_dim_stern_set
    __swig_getmethods__["dim_stern"] = _aisparser.aismsg_5_dim_stern_get
    if _newclass:dim_stern = _swig_property(_aisparser.aismsg_5_dim_stern_get, _aisparser.aismsg_5_dim_stern_set)
    __swig_setmethods__["dim_port"] = _aisparser.aismsg_5_dim_port_set
    __swig_getmethods__["dim_port"] = _aisparser.aismsg_5_dim_port_get
    if _newclass:dim_port = _swig_property(_aisparser.aismsg_5_dim_port_get, _aisparser.aismsg_5_dim_port_set)
    __swig_setmethods__["dim_starboard"] = _aisparser.aismsg_5_dim_starboard_set
    __swig_getmethods__["dim_starboard"] = _aisparser.aismsg_5_dim_starboard_get
    if _newclass:dim_starboard = _swig_property(_aisparser.aismsg_5_dim_starboard_get, _aisparser.aismsg_5_dim_starboard_set)
    __swig_setmethods__["pos_type"] = _aisparser.aismsg_5_pos_type_set
    __swig_getmethods__["pos_type"] = _aisparser.aismsg_5_pos_type_get
    if _newclass:pos_type = _swig_property(_aisparser.aismsg_5_pos_type_get, _aisparser.aismsg_5_pos_type_set)
    __swig_setmethods__["eta"] = _aisparser.aismsg_5_eta_set
    __swig_getmethods__["eta"] = _aisparser.aismsg_5_eta_get
    if _newclass:eta = _swig_property(_aisparser.aismsg_5_eta_get, _aisparser.aismsg_5_eta_set)
    __swig_setmethods__["draught"] = _aisparser.aismsg_5_draught_set
    __swig_getmethods__["draught"] = _aisparser.aismsg_5_draught_get
    if _newclass:draught = _swig_property(_aisparser.aismsg_5_draught_get, _aisparser.aismsg_5_draught_set)
    __swig_setmethods__["dest"] = _aisparser.aismsg_5_dest_set
    __swig_getmethods__["dest"] = _aisparser.aismsg_5_dest_get
    if _newclass:dest = _swig_property(_aisparser.aismsg_5_dest_get, _aisparser.aismsg_5_dest_set)
    __swig_setmethods__["dte"] = _aisparser.aismsg_5_dte_set
    __swig_getmethods__["dte"] = _aisparser.aismsg_5_dte_get
    if _newclass:dte = _swig_property(_aisparser.aismsg_5_dte_get, _aisparser.aismsg_5_dte_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_5_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_5_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_5_spare_get, _aisparser.aismsg_5_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_5
    __del__ = lambda self : None;
aismsg_5_swigregister = _aisparser.aismsg_5_swigregister
aismsg_5_swigregister(aismsg_5)

class aismsg_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_6_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_6_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_6_msgid_get, _aisparser.aismsg_6_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_6_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_6_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_6_repeat_get, _aisparser.aismsg_6_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_6_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_6_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_6_userid_get, _aisparser.aismsg_6_userid_set)
    __swig_setmethods__["sequence"] = _aisparser.aismsg_6_sequence_set
    __swig_getmethods__["sequence"] = _aisparser.aismsg_6_sequence_get
    if _newclass:sequence = _swig_property(_aisparser.aismsg_6_sequence_get, _aisparser.aismsg_6_sequence_set)
    __swig_setmethods__["destination"] = _aisparser.aismsg_6_destination_set
    __swig_getmethods__["destination"] = _aisparser.aismsg_6_destination_get
    if _newclass:destination = _swig_property(_aisparser.aismsg_6_destination_get, _aisparser.aismsg_6_destination_set)
    __swig_setmethods__["retransmit"] = _aisparser.aismsg_6_retransmit_set
    __swig_getmethods__["retransmit"] = _aisparser.aismsg_6_retransmit_get
    if _newclass:retransmit = _swig_property(_aisparser.aismsg_6_retransmit_get, _aisparser.aismsg_6_retransmit_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_6_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_6_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_6_spare_get, _aisparser.aismsg_6_spare_set)
    __swig_setmethods__["app_id"] = _aisparser.aismsg_6_app_id_set
    __swig_getmethods__["app_id"] = _aisparser.aismsg_6_app_id_get
    if _newclass:app_id = _swig_property(_aisparser.aismsg_6_app_id_get, _aisparser.aismsg_6_app_id_set)
    __swig_setmethods__["data"] = _aisparser.aismsg_6_data_set
    __swig_getmethods__["data"] = _aisparser.aismsg_6_data_get
    if _newclass:data = _swig_property(_aisparser.aismsg_6_data_get, _aisparser.aismsg_6_data_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_6
    __del__ = lambda self : None;
aismsg_6_swigregister = _aisparser.aismsg_6_swigregister
aismsg_6_swigregister(aismsg_6)

class aismsg_7(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_7, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_7_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_7_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_7_msgid_get, _aisparser.aismsg_7_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_7_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_7_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_7_repeat_get, _aisparser.aismsg_7_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_7_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_7_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_7_userid_get, _aisparser.aismsg_7_userid_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_7_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_7_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_7_spare_get, _aisparser.aismsg_7_spare_set)
    __swig_setmethods__["destid_1"] = _aisparser.aismsg_7_destid_1_set
    __swig_getmethods__["destid_1"] = _aisparser.aismsg_7_destid_1_get
    if _newclass:destid_1 = _swig_property(_aisparser.aismsg_7_destid_1_get, _aisparser.aismsg_7_destid_1_set)
    __swig_setmethods__["sequence_1"] = _aisparser.aismsg_7_sequence_1_set
    __swig_getmethods__["sequence_1"] = _aisparser.aismsg_7_sequence_1_get
    if _newclass:sequence_1 = _swig_property(_aisparser.aismsg_7_sequence_1_get, _aisparser.aismsg_7_sequence_1_set)
    __swig_setmethods__["destid_2"] = _aisparser.aismsg_7_destid_2_set
    __swig_getmethods__["destid_2"] = _aisparser.aismsg_7_destid_2_get
    if _newclass:destid_2 = _swig_property(_aisparser.aismsg_7_destid_2_get, _aisparser.aismsg_7_destid_2_set)
    __swig_setmethods__["sequence_2"] = _aisparser.aismsg_7_sequence_2_set
    __swig_getmethods__["sequence_2"] = _aisparser.aismsg_7_sequence_2_get
    if _newclass:sequence_2 = _swig_property(_aisparser.aismsg_7_sequence_2_get, _aisparser.aismsg_7_sequence_2_set)
    __swig_setmethods__["destid_3"] = _aisparser.aismsg_7_destid_3_set
    __swig_getmethods__["destid_3"] = _aisparser.aismsg_7_destid_3_get
    if _newclass:destid_3 = _swig_property(_aisparser.aismsg_7_destid_3_get, _aisparser.aismsg_7_destid_3_set)
    __swig_setmethods__["sequence_3"] = _aisparser.aismsg_7_sequence_3_set
    __swig_getmethods__["sequence_3"] = _aisparser.aismsg_7_sequence_3_get
    if _newclass:sequence_3 = _swig_property(_aisparser.aismsg_7_sequence_3_get, _aisparser.aismsg_7_sequence_3_set)
    __swig_setmethods__["destid_4"] = _aisparser.aismsg_7_destid_4_set
    __swig_getmethods__["destid_4"] = _aisparser.aismsg_7_destid_4_get
    if _newclass:destid_4 = _swig_property(_aisparser.aismsg_7_destid_4_get, _aisparser.aismsg_7_destid_4_set)
    __swig_setmethods__["sequence_4"] = _aisparser.aismsg_7_sequence_4_set
    __swig_getmethods__["sequence_4"] = _aisparser.aismsg_7_sequence_4_get
    if _newclass:sequence_4 = _swig_property(_aisparser.aismsg_7_sequence_4_get, _aisparser.aismsg_7_sequence_4_set)
    __swig_setmethods__["num_acks"] = _aisparser.aismsg_7_num_acks_set
    __swig_getmethods__["num_acks"] = _aisparser.aismsg_7_num_acks_get
    if _newclass:num_acks = _swig_property(_aisparser.aismsg_7_num_acks_get, _aisparser.aismsg_7_num_acks_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_7
    __del__ = lambda self : None;
aismsg_7_swigregister = _aisparser.aismsg_7_swigregister
aismsg_7_swigregister(aismsg_7)

class aismsg_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_8, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_8_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_8_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_8_msgid_get, _aisparser.aismsg_8_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_8_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_8_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_8_repeat_get, _aisparser.aismsg_8_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_8_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_8_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_8_userid_get, _aisparser.aismsg_8_userid_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_8_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_8_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_8_spare_get, _aisparser.aismsg_8_spare_set)
    __swig_setmethods__["app_id"] = _aisparser.aismsg_8_app_id_set
    __swig_getmethods__["app_id"] = _aisparser.aismsg_8_app_id_get
    if _newclass:app_id = _swig_property(_aisparser.aismsg_8_app_id_get, _aisparser.aismsg_8_app_id_set)
    __swig_setmethods__["data"] = _aisparser.aismsg_8_data_set
    __swig_getmethods__["data"] = _aisparser.aismsg_8_data_get
    if _newclass:data = _swig_property(_aisparser.aismsg_8_data_get, _aisparser.aismsg_8_data_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_8
    __del__ = lambda self : None;
aismsg_8_swigregister = _aisparser.aismsg_8_swigregister
aismsg_8_swigregister(aismsg_8)

class aismsg_9(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_9, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_9, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_9_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_9_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_9_msgid_get, _aisparser.aismsg_9_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_9_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_9_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_9_repeat_get, _aisparser.aismsg_9_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_9_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_9_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_9_userid_get, _aisparser.aismsg_9_userid_set)
    __swig_setmethods__["altitude"] = _aisparser.aismsg_9_altitude_set
    __swig_getmethods__["altitude"] = _aisparser.aismsg_9_altitude_get
    if _newclass:altitude = _swig_property(_aisparser.aismsg_9_altitude_get, _aisparser.aismsg_9_altitude_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_9_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_9_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_9_sog_get, _aisparser.aismsg_9_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_9_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_9_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_9_pos_acc_get, _aisparser.aismsg_9_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_9_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_9_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_9_longitude_get, _aisparser.aismsg_9_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_9_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_9_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_9_latitude_get, _aisparser.aismsg_9_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_9_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_9_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_9_cog_get, _aisparser.aismsg_9_cog_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_9_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_9_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_9_utc_sec_get, _aisparser.aismsg_9_utc_sec_set)
    __swig_setmethods__["regional"] = _aisparser.aismsg_9_regional_set
    __swig_getmethods__["regional"] = _aisparser.aismsg_9_regional_get
    if _newclass:regional = _swig_property(_aisparser.aismsg_9_regional_get, _aisparser.aismsg_9_regional_set)
    __swig_setmethods__["dte"] = _aisparser.aismsg_9_dte_set
    __swig_getmethods__["dte"] = _aisparser.aismsg_9_dte_get
    if _newclass:dte = _swig_property(_aisparser.aismsg_9_dte_get, _aisparser.aismsg_9_dte_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_9_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_9_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_9_spare_get, _aisparser.aismsg_9_spare_set)
    __swig_setmethods__["assigned"] = _aisparser.aismsg_9_assigned_set
    __swig_getmethods__["assigned"] = _aisparser.aismsg_9_assigned_get
    if _newclass:assigned = _swig_property(_aisparser.aismsg_9_assigned_get, _aisparser.aismsg_9_assigned_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_9_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_9_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_9_raim_get, _aisparser.aismsg_9_raim_set)
    __swig_setmethods__["comm_state"] = _aisparser.aismsg_9_comm_state_set
    __swig_getmethods__["comm_state"] = _aisparser.aismsg_9_comm_state_get
    if _newclass:comm_state = _swig_property(_aisparser.aismsg_9_comm_state_get, _aisparser.aismsg_9_comm_state_set)
    __swig_getmethods__["itdma"] = _aisparser.aismsg_9_itdma_get
    if _newclass:itdma = _swig_property(_aisparser.aismsg_9_itdma_get)
    __swig_getmethods__["sotdma"] = _aisparser.aismsg_9_sotdma_get
    if _newclass:sotdma = _swig_property(_aisparser.aismsg_9_sotdma_get)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_9
    __del__ = lambda self : None;
aismsg_9_swigregister = _aisparser.aismsg_9_swigregister
aismsg_9_swigregister(aismsg_9)

class aismsg_9_itdma(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_9_itdma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_9_itdma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_9_itdma_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_9_itdma_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_9_itdma_sync_state_get, _aisparser.aismsg_9_itdma_sync_state_set)
    __swig_setmethods__["slot_inc"] = _aisparser.aismsg_9_itdma_slot_inc_set
    __swig_getmethods__["slot_inc"] = _aisparser.aismsg_9_itdma_slot_inc_get
    if _newclass:slot_inc = _swig_property(_aisparser.aismsg_9_itdma_slot_inc_get, _aisparser.aismsg_9_itdma_slot_inc_set)
    __swig_setmethods__["num_slots"] = _aisparser.aismsg_9_itdma_num_slots_set
    __swig_getmethods__["num_slots"] = _aisparser.aismsg_9_itdma_num_slots_get
    if _newclass:num_slots = _swig_property(_aisparser.aismsg_9_itdma_num_slots_get, _aisparser.aismsg_9_itdma_num_slots_set)
    __swig_setmethods__["keep_flag"] = _aisparser.aismsg_9_itdma_keep_flag_set
    __swig_getmethods__["keep_flag"] = _aisparser.aismsg_9_itdma_keep_flag_get
    if _newclass:keep_flag = _swig_property(_aisparser.aismsg_9_itdma_keep_flag_get, _aisparser.aismsg_9_itdma_keep_flag_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_9_itdma(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_9_itdma
    __del__ = lambda self : None;
aismsg_9_itdma_swigregister = _aisparser.aismsg_9_itdma_swigregister
aismsg_9_itdma_swigregister(aismsg_9_itdma)

class aismsg_9_sotdma(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_9_sotdma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_9_sotdma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_9_sotdma_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_9_sotdma_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_9_sotdma_sync_state_get, _aisparser.aismsg_9_sotdma_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_9_sotdma_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_9_sotdma_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_9_sotdma_slot_timeout_get, _aisparser.aismsg_9_sotdma_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_9_sotdma_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_9_sotdma_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_9_sotdma_sub_message_get, _aisparser.aismsg_9_sotdma_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_9_sotdma(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_9_sotdma
    __del__ = lambda self : None;
aismsg_9_sotdma_swigregister = _aisparser.aismsg_9_sotdma_swigregister
aismsg_9_sotdma_swigregister(aismsg_9_sotdma)

class aismsg_10(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_10, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_10, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_10_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_10_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_10_msgid_get, _aisparser.aismsg_10_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_10_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_10_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_10_repeat_get, _aisparser.aismsg_10_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_10_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_10_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_10_userid_get, _aisparser.aismsg_10_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_10_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_10_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_10_spare1_get, _aisparser.aismsg_10_spare1_set)
    __swig_setmethods__["destination"] = _aisparser.aismsg_10_destination_set
    __swig_getmethods__["destination"] = _aisparser.aismsg_10_destination_get
    if _newclass:destination = _swig_property(_aisparser.aismsg_10_destination_get, _aisparser.aismsg_10_destination_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_10_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_10_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_10_spare2_get, _aisparser.aismsg_10_spare2_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_10(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_10
    __del__ = lambda self : None;
aismsg_10_swigregister = _aisparser.aismsg_10_swigregister
aismsg_10_swigregister(aismsg_10)

class aismsg_11(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_11, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_11, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_11_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_11_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_11_msgid_get, _aisparser.aismsg_11_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_11_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_11_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_11_repeat_get, _aisparser.aismsg_11_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_11_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_11_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_11_userid_get, _aisparser.aismsg_11_userid_set)
    __swig_setmethods__["utc_year"] = _aisparser.aismsg_11_utc_year_set
    __swig_getmethods__["utc_year"] = _aisparser.aismsg_11_utc_year_get
    if _newclass:utc_year = _swig_property(_aisparser.aismsg_11_utc_year_get, _aisparser.aismsg_11_utc_year_set)
    __swig_setmethods__["utc_month"] = _aisparser.aismsg_11_utc_month_set
    __swig_getmethods__["utc_month"] = _aisparser.aismsg_11_utc_month_get
    if _newclass:utc_month = _swig_property(_aisparser.aismsg_11_utc_month_get, _aisparser.aismsg_11_utc_month_set)
    __swig_setmethods__["utc_day"] = _aisparser.aismsg_11_utc_day_set
    __swig_getmethods__["utc_day"] = _aisparser.aismsg_11_utc_day_get
    if _newclass:utc_day = _swig_property(_aisparser.aismsg_11_utc_day_get, _aisparser.aismsg_11_utc_day_set)
    __swig_setmethods__["utc_hour"] = _aisparser.aismsg_11_utc_hour_set
    __swig_getmethods__["utc_hour"] = _aisparser.aismsg_11_utc_hour_get
    if _newclass:utc_hour = _swig_property(_aisparser.aismsg_11_utc_hour_get, _aisparser.aismsg_11_utc_hour_set)
    __swig_setmethods__["utc_minute"] = _aisparser.aismsg_11_utc_minute_set
    __swig_getmethods__["utc_minute"] = _aisparser.aismsg_11_utc_minute_get
    if _newclass:utc_minute = _swig_property(_aisparser.aismsg_11_utc_minute_get, _aisparser.aismsg_11_utc_minute_set)
    __swig_setmethods__["utc_second"] = _aisparser.aismsg_11_utc_second_set
    __swig_getmethods__["utc_second"] = _aisparser.aismsg_11_utc_second_get
    if _newclass:utc_second = _swig_property(_aisparser.aismsg_11_utc_second_get, _aisparser.aismsg_11_utc_second_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_11_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_11_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_11_pos_acc_get, _aisparser.aismsg_11_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_11_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_11_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_11_longitude_get, _aisparser.aismsg_11_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_11_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_11_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_11_latitude_get, _aisparser.aismsg_11_latitude_set)
    __swig_setmethods__["pos_type"] = _aisparser.aismsg_11_pos_type_set
    __swig_getmethods__["pos_type"] = _aisparser.aismsg_11_pos_type_get
    if _newclass:pos_type = _swig_property(_aisparser.aismsg_11_pos_type_get, _aisparser.aismsg_11_pos_type_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_11_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_11_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_11_spare_get, _aisparser.aismsg_11_spare_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_11_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_11_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_11_raim_get, _aisparser.aismsg_11_raim_set)
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_11_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_11_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_11_sync_state_get, _aisparser.aismsg_11_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_11_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_11_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_11_slot_timeout_get, _aisparser.aismsg_11_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_11_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_11_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_11_sub_message_get, _aisparser.aismsg_11_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_11(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_11
    __del__ = lambda self : None;
aismsg_11_swigregister = _aisparser.aismsg_11_swigregister
aismsg_11_swigregister(aismsg_11)

class aismsg_12(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_12, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_12, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_12_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_12_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_12_msgid_get, _aisparser.aismsg_12_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_12_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_12_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_12_repeat_get, _aisparser.aismsg_12_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_12_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_12_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_12_userid_get, _aisparser.aismsg_12_userid_set)
    __swig_setmethods__["sequence"] = _aisparser.aismsg_12_sequence_set
    __swig_getmethods__["sequence"] = _aisparser.aismsg_12_sequence_get
    if _newclass:sequence = _swig_property(_aisparser.aismsg_12_sequence_get, _aisparser.aismsg_12_sequence_set)
    __swig_setmethods__["destination"] = _aisparser.aismsg_12_destination_set
    __swig_getmethods__["destination"] = _aisparser.aismsg_12_destination_get
    if _newclass:destination = _swig_property(_aisparser.aismsg_12_destination_get, _aisparser.aismsg_12_destination_set)
    __swig_setmethods__["retransmit"] = _aisparser.aismsg_12_retransmit_set
    __swig_getmethods__["retransmit"] = _aisparser.aismsg_12_retransmit_get
    if _newclass:retransmit = _swig_property(_aisparser.aismsg_12_retransmit_get, _aisparser.aismsg_12_retransmit_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_12_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_12_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_12_spare_get, _aisparser.aismsg_12_spare_set)
    __swig_setmethods__["message"] = _aisparser.aismsg_12_message_set
    __swig_getmethods__["message"] = _aisparser.aismsg_12_message_get
    if _newclass:message = _swig_property(_aisparser.aismsg_12_message_get, _aisparser.aismsg_12_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_12(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_12
    __del__ = lambda self : None;
aismsg_12_swigregister = _aisparser.aismsg_12_swigregister
aismsg_12_swigregister(aismsg_12)

class aismsg_13(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_13, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_13, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_13_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_13_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_13_msgid_get, _aisparser.aismsg_13_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_13_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_13_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_13_repeat_get, _aisparser.aismsg_13_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_13_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_13_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_13_userid_get, _aisparser.aismsg_13_userid_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_13_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_13_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_13_spare_get, _aisparser.aismsg_13_spare_set)
    __swig_setmethods__["destid_1"] = _aisparser.aismsg_13_destid_1_set
    __swig_getmethods__["destid_1"] = _aisparser.aismsg_13_destid_1_get
    if _newclass:destid_1 = _swig_property(_aisparser.aismsg_13_destid_1_get, _aisparser.aismsg_13_destid_1_set)
    __swig_setmethods__["sequence_1"] = _aisparser.aismsg_13_sequence_1_set
    __swig_getmethods__["sequence_1"] = _aisparser.aismsg_13_sequence_1_get
    if _newclass:sequence_1 = _swig_property(_aisparser.aismsg_13_sequence_1_get, _aisparser.aismsg_13_sequence_1_set)
    __swig_setmethods__["destid_2"] = _aisparser.aismsg_13_destid_2_set
    __swig_getmethods__["destid_2"] = _aisparser.aismsg_13_destid_2_get
    if _newclass:destid_2 = _swig_property(_aisparser.aismsg_13_destid_2_get, _aisparser.aismsg_13_destid_2_set)
    __swig_setmethods__["sequence_2"] = _aisparser.aismsg_13_sequence_2_set
    __swig_getmethods__["sequence_2"] = _aisparser.aismsg_13_sequence_2_get
    if _newclass:sequence_2 = _swig_property(_aisparser.aismsg_13_sequence_2_get, _aisparser.aismsg_13_sequence_2_set)
    __swig_setmethods__["destid_3"] = _aisparser.aismsg_13_destid_3_set
    __swig_getmethods__["destid_3"] = _aisparser.aismsg_13_destid_3_get
    if _newclass:destid_3 = _swig_property(_aisparser.aismsg_13_destid_3_get, _aisparser.aismsg_13_destid_3_set)
    __swig_setmethods__["sequence_3"] = _aisparser.aismsg_13_sequence_3_set
    __swig_getmethods__["sequence_3"] = _aisparser.aismsg_13_sequence_3_get
    if _newclass:sequence_3 = _swig_property(_aisparser.aismsg_13_sequence_3_get, _aisparser.aismsg_13_sequence_3_set)
    __swig_setmethods__["destid_4"] = _aisparser.aismsg_13_destid_4_set
    __swig_getmethods__["destid_4"] = _aisparser.aismsg_13_destid_4_get
    if _newclass:destid_4 = _swig_property(_aisparser.aismsg_13_destid_4_get, _aisparser.aismsg_13_destid_4_set)
    __swig_setmethods__["sequence_4"] = _aisparser.aismsg_13_sequence_4_set
    __swig_getmethods__["sequence_4"] = _aisparser.aismsg_13_sequence_4_get
    if _newclass:sequence_4 = _swig_property(_aisparser.aismsg_13_sequence_4_get, _aisparser.aismsg_13_sequence_4_set)
    __swig_setmethods__["num_acks"] = _aisparser.aismsg_13_num_acks_set
    __swig_getmethods__["num_acks"] = _aisparser.aismsg_13_num_acks_get
    if _newclass:num_acks = _swig_property(_aisparser.aismsg_13_num_acks_get, _aisparser.aismsg_13_num_acks_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_13(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_13
    __del__ = lambda self : None;
aismsg_13_swigregister = _aisparser.aismsg_13_swigregister
aismsg_13_swigregister(aismsg_13)

class aismsg_14(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_14, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_14, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_14_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_14_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_14_msgid_get, _aisparser.aismsg_14_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_14_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_14_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_14_repeat_get, _aisparser.aismsg_14_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_14_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_14_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_14_userid_get, _aisparser.aismsg_14_userid_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_14_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_14_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_14_spare_get, _aisparser.aismsg_14_spare_set)
    __swig_setmethods__["message"] = _aisparser.aismsg_14_message_set
    __swig_getmethods__["message"] = _aisparser.aismsg_14_message_get
    if _newclass:message = _swig_property(_aisparser.aismsg_14_message_get, _aisparser.aismsg_14_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_14(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_14
    __del__ = lambda self : None;
aismsg_14_swigregister = _aisparser.aismsg_14_swigregister
aismsg_14_swigregister(aismsg_14)

class aismsg_15(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_15, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_15, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_15_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_15_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_15_msgid_get, _aisparser.aismsg_15_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_15_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_15_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_15_repeat_get, _aisparser.aismsg_15_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_15_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_15_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_15_userid_get, _aisparser.aismsg_15_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_15_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_15_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_15_spare1_get, _aisparser.aismsg_15_spare1_set)
    __swig_setmethods__["destid1"] = _aisparser.aismsg_15_destid1_set
    __swig_getmethods__["destid1"] = _aisparser.aismsg_15_destid1_get
    if _newclass:destid1 = _swig_property(_aisparser.aismsg_15_destid1_get, _aisparser.aismsg_15_destid1_set)
    __swig_setmethods__["msgid1_1"] = _aisparser.aismsg_15_msgid1_1_set
    __swig_getmethods__["msgid1_1"] = _aisparser.aismsg_15_msgid1_1_get
    if _newclass:msgid1_1 = _swig_property(_aisparser.aismsg_15_msgid1_1_get, _aisparser.aismsg_15_msgid1_1_set)
    __swig_setmethods__["offset1_1"] = _aisparser.aismsg_15_offset1_1_set
    __swig_getmethods__["offset1_1"] = _aisparser.aismsg_15_offset1_1_get
    if _newclass:offset1_1 = _swig_property(_aisparser.aismsg_15_offset1_1_get, _aisparser.aismsg_15_offset1_1_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_15_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_15_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_15_spare2_get, _aisparser.aismsg_15_spare2_set)
    __swig_setmethods__["msgid1_2"] = _aisparser.aismsg_15_msgid1_2_set
    __swig_getmethods__["msgid1_2"] = _aisparser.aismsg_15_msgid1_2_get
    if _newclass:msgid1_2 = _swig_property(_aisparser.aismsg_15_msgid1_2_get, _aisparser.aismsg_15_msgid1_2_set)
    __swig_setmethods__["offset1_2"] = _aisparser.aismsg_15_offset1_2_set
    __swig_getmethods__["offset1_2"] = _aisparser.aismsg_15_offset1_2_get
    if _newclass:offset1_2 = _swig_property(_aisparser.aismsg_15_offset1_2_get, _aisparser.aismsg_15_offset1_2_set)
    __swig_setmethods__["spare3"] = _aisparser.aismsg_15_spare3_set
    __swig_getmethods__["spare3"] = _aisparser.aismsg_15_spare3_get
    if _newclass:spare3 = _swig_property(_aisparser.aismsg_15_spare3_get, _aisparser.aismsg_15_spare3_set)
    __swig_setmethods__["destid2"] = _aisparser.aismsg_15_destid2_set
    __swig_getmethods__["destid2"] = _aisparser.aismsg_15_destid2_get
    if _newclass:destid2 = _swig_property(_aisparser.aismsg_15_destid2_get, _aisparser.aismsg_15_destid2_set)
    __swig_setmethods__["msgid2_1"] = _aisparser.aismsg_15_msgid2_1_set
    __swig_getmethods__["msgid2_1"] = _aisparser.aismsg_15_msgid2_1_get
    if _newclass:msgid2_1 = _swig_property(_aisparser.aismsg_15_msgid2_1_get, _aisparser.aismsg_15_msgid2_1_set)
    __swig_setmethods__["offset2_1"] = _aisparser.aismsg_15_offset2_1_set
    __swig_getmethods__["offset2_1"] = _aisparser.aismsg_15_offset2_1_get
    if _newclass:offset2_1 = _swig_property(_aisparser.aismsg_15_offset2_1_get, _aisparser.aismsg_15_offset2_1_set)
    __swig_setmethods__["spare4"] = _aisparser.aismsg_15_spare4_set
    __swig_getmethods__["spare4"] = _aisparser.aismsg_15_spare4_get
    if _newclass:spare4 = _swig_property(_aisparser.aismsg_15_spare4_get, _aisparser.aismsg_15_spare4_set)
    __swig_setmethods__["num_reqs"] = _aisparser.aismsg_15_num_reqs_set
    __swig_getmethods__["num_reqs"] = _aisparser.aismsg_15_num_reqs_get
    if _newclass:num_reqs = _swig_property(_aisparser.aismsg_15_num_reqs_get, _aisparser.aismsg_15_num_reqs_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_15(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_15
    __del__ = lambda self : None;
aismsg_15_swigregister = _aisparser.aismsg_15_swigregister
aismsg_15_swigregister(aismsg_15)

class aismsg_16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_16, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_16_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_16_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_16_msgid_get, _aisparser.aismsg_16_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_16_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_16_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_16_repeat_get, _aisparser.aismsg_16_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_16_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_16_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_16_userid_get, _aisparser.aismsg_16_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_16_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_16_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_16_spare1_get, _aisparser.aismsg_16_spare1_set)
    __swig_setmethods__["destid_a"] = _aisparser.aismsg_16_destid_a_set
    __swig_getmethods__["destid_a"] = _aisparser.aismsg_16_destid_a_get
    if _newclass:destid_a = _swig_property(_aisparser.aismsg_16_destid_a_get, _aisparser.aismsg_16_destid_a_set)
    __swig_setmethods__["offset_a"] = _aisparser.aismsg_16_offset_a_set
    __swig_getmethods__["offset_a"] = _aisparser.aismsg_16_offset_a_get
    if _newclass:offset_a = _swig_property(_aisparser.aismsg_16_offset_a_get, _aisparser.aismsg_16_offset_a_set)
    __swig_setmethods__["increment_a"] = _aisparser.aismsg_16_increment_a_set
    __swig_getmethods__["increment_a"] = _aisparser.aismsg_16_increment_a_get
    if _newclass:increment_a = _swig_property(_aisparser.aismsg_16_increment_a_get, _aisparser.aismsg_16_increment_a_set)
    __swig_setmethods__["destid_b"] = _aisparser.aismsg_16_destid_b_set
    __swig_getmethods__["destid_b"] = _aisparser.aismsg_16_destid_b_get
    if _newclass:destid_b = _swig_property(_aisparser.aismsg_16_destid_b_get, _aisparser.aismsg_16_destid_b_set)
    __swig_setmethods__["offset_b"] = _aisparser.aismsg_16_offset_b_set
    __swig_getmethods__["offset_b"] = _aisparser.aismsg_16_offset_b_get
    if _newclass:offset_b = _swig_property(_aisparser.aismsg_16_offset_b_get, _aisparser.aismsg_16_offset_b_set)
    __swig_setmethods__["increment_b"] = _aisparser.aismsg_16_increment_b_set
    __swig_getmethods__["increment_b"] = _aisparser.aismsg_16_increment_b_get
    if _newclass:increment_b = _swig_property(_aisparser.aismsg_16_increment_b_get, _aisparser.aismsg_16_increment_b_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_16_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_16_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_16_spare2_get, _aisparser.aismsg_16_spare2_set)
    __swig_setmethods__["num_cmds"] = _aisparser.aismsg_16_num_cmds_set
    __swig_getmethods__["num_cmds"] = _aisparser.aismsg_16_num_cmds_get
    if _newclass:num_cmds = _swig_property(_aisparser.aismsg_16_num_cmds_get, _aisparser.aismsg_16_num_cmds_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_16(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_16
    __del__ = lambda self : None;
aismsg_16_swigregister = _aisparser.aismsg_16_swigregister
aismsg_16_swigregister(aismsg_16)

class aismsg_17(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_17, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_17, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_17_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_17_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_17_msgid_get, _aisparser.aismsg_17_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_17_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_17_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_17_repeat_get, _aisparser.aismsg_17_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_17_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_17_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_17_userid_get, _aisparser.aismsg_17_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_17_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_17_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_17_spare1_get, _aisparser.aismsg_17_spare1_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_17_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_17_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_17_longitude_get, _aisparser.aismsg_17_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_17_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_17_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_17_latitude_get, _aisparser.aismsg_17_latitude_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_17_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_17_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_17_spare2_get, _aisparser.aismsg_17_spare2_set)
    __swig_setmethods__["msg_type"] = _aisparser.aismsg_17_msg_type_set
    __swig_getmethods__["msg_type"] = _aisparser.aismsg_17_msg_type_get
    if _newclass:msg_type = _swig_property(_aisparser.aismsg_17_msg_type_get, _aisparser.aismsg_17_msg_type_set)
    __swig_setmethods__["station_id"] = _aisparser.aismsg_17_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.aismsg_17_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.aismsg_17_station_id_get, _aisparser.aismsg_17_station_id_set)
    __swig_setmethods__["z_count"] = _aisparser.aismsg_17_z_count_set
    __swig_getmethods__["z_count"] = _aisparser.aismsg_17_z_count_get
    if _newclass:z_count = _swig_property(_aisparser.aismsg_17_z_count_get, _aisparser.aismsg_17_z_count_set)
    __swig_setmethods__["seq_num"] = _aisparser.aismsg_17_seq_num_set
    __swig_getmethods__["seq_num"] = _aisparser.aismsg_17_seq_num_get
    if _newclass:seq_num = _swig_property(_aisparser.aismsg_17_seq_num_get, _aisparser.aismsg_17_seq_num_set)
    __swig_setmethods__["num_words"] = _aisparser.aismsg_17_num_words_set
    __swig_getmethods__["num_words"] = _aisparser.aismsg_17_num_words_get
    if _newclass:num_words = _swig_property(_aisparser.aismsg_17_num_words_get, _aisparser.aismsg_17_num_words_set)
    __swig_setmethods__["health"] = _aisparser.aismsg_17_health_set
    __swig_getmethods__["health"] = _aisparser.aismsg_17_health_get
    if _newclass:health = _swig_property(_aisparser.aismsg_17_health_get, _aisparser.aismsg_17_health_set)
    __swig_setmethods__["data"] = _aisparser.aismsg_17_data_set
    __swig_getmethods__["data"] = _aisparser.aismsg_17_data_get
    if _newclass:data = _swig_property(_aisparser.aismsg_17_data_get, _aisparser.aismsg_17_data_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_17(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_17
    __del__ = lambda self : None;
aismsg_17_swigregister = _aisparser.aismsg_17_swigregister
aismsg_17_swigregister(aismsg_17)

class aismsg_18(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_18, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_18, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_18_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_18_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_18_msgid_get, _aisparser.aismsg_18_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_18_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_18_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_18_repeat_get, _aisparser.aismsg_18_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_18_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_18_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_18_userid_get, _aisparser.aismsg_18_userid_set)
    __swig_setmethods__["regional1"] = _aisparser.aismsg_18_regional1_set
    __swig_getmethods__["regional1"] = _aisparser.aismsg_18_regional1_get
    if _newclass:regional1 = _swig_property(_aisparser.aismsg_18_regional1_get, _aisparser.aismsg_18_regional1_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_18_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_18_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_18_sog_get, _aisparser.aismsg_18_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_18_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_18_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_18_pos_acc_get, _aisparser.aismsg_18_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_18_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_18_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_18_longitude_get, _aisparser.aismsg_18_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_18_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_18_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_18_latitude_get, _aisparser.aismsg_18_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_18_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_18_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_18_cog_get, _aisparser.aismsg_18_cog_set)
    __swig_setmethods__["true"] = _aisparser.aismsg_18_true_set
    __swig_getmethods__["true"] = _aisparser.aismsg_18_true_get
    if _newclass:true = _swig_property(_aisparser.aismsg_18_true_get, _aisparser.aismsg_18_true_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_18_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_18_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_18_utc_sec_get, _aisparser.aismsg_18_utc_sec_set)
    __swig_setmethods__["regional2"] = _aisparser.aismsg_18_regional2_set
    __swig_getmethods__["regional2"] = _aisparser.aismsg_18_regional2_get
    if _newclass:regional2 = _swig_property(_aisparser.aismsg_18_regional2_get, _aisparser.aismsg_18_regional2_set)
    __swig_setmethods__["unit_flag"] = _aisparser.aismsg_18_unit_flag_set
    __swig_getmethods__["unit_flag"] = _aisparser.aismsg_18_unit_flag_get
    if _newclass:unit_flag = _swig_property(_aisparser.aismsg_18_unit_flag_get, _aisparser.aismsg_18_unit_flag_set)
    __swig_setmethods__["display_flag"] = _aisparser.aismsg_18_display_flag_set
    __swig_getmethods__["display_flag"] = _aisparser.aismsg_18_display_flag_get
    if _newclass:display_flag = _swig_property(_aisparser.aismsg_18_display_flag_get, _aisparser.aismsg_18_display_flag_set)
    __swig_setmethods__["dsc_flag"] = _aisparser.aismsg_18_dsc_flag_set
    __swig_getmethods__["dsc_flag"] = _aisparser.aismsg_18_dsc_flag_get
    if _newclass:dsc_flag = _swig_property(_aisparser.aismsg_18_dsc_flag_get, _aisparser.aismsg_18_dsc_flag_set)
    __swig_setmethods__["band_flag"] = _aisparser.aismsg_18_band_flag_set
    __swig_getmethods__["band_flag"] = _aisparser.aismsg_18_band_flag_get
    if _newclass:band_flag = _swig_property(_aisparser.aismsg_18_band_flag_get, _aisparser.aismsg_18_band_flag_set)
    __swig_setmethods__["msg22_flag"] = _aisparser.aismsg_18_msg22_flag_set
    __swig_getmethods__["msg22_flag"] = _aisparser.aismsg_18_msg22_flag_get
    if _newclass:msg22_flag = _swig_property(_aisparser.aismsg_18_msg22_flag_get, _aisparser.aismsg_18_msg22_flag_set)
    __swig_setmethods__["mode_flag"] = _aisparser.aismsg_18_mode_flag_set
    __swig_getmethods__["mode_flag"] = _aisparser.aismsg_18_mode_flag_get
    if _newclass:mode_flag = _swig_property(_aisparser.aismsg_18_mode_flag_get, _aisparser.aismsg_18_mode_flag_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_18_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_18_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_18_raim_get, _aisparser.aismsg_18_raim_set)
    __swig_setmethods__["comm_state"] = _aisparser.aismsg_18_comm_state_set
    __swig_getmethods__["comm_state"] = _aisparser.aismsg_18_comm_state_get
    if _newclass:comm_state = _swig_property(_aisparser.aismsg_18_comm_state_get, _aisparser.aismsg_18_comm_state_set)
    __swig_getmethods__["itdma"] = _aisparser.aismsg_18_itdma_get
    if _newclass:itdma = _swig_property(_aisparser.aismsg_18_itdma_get)
    __swig_getmethods__["sotdma"] = _aisparser.aismsg_18_sotdma_get
    if _newclass:sotdma = _swig_property(_aisparser.aismsg_18_sotdma_get)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_18(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_18
    __del__ = lambda self : None;
aismsg_18_swigregister = _aisparser.aismsg_18_swigregister
aismsg_18_swigregister(aismsg_18)

class aismsg_18_itdma(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_18_itdma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_18_itdma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_18_itdma_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_18_itdma_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_18_itdma_sync_state_get, _aisparser.aismsg_18_itdma_sync_state_set)
    __swig_setmethods__["slot_inc"] = _aisparser.aismsg_18_itdma_slot_inc_set
    __swig_getmethods__["slot_inc"] = _aisparser.aismsg_18_itdma_slot_inc_get
    if _newclass:slot_inc = _swig_property(_aisparser.aismsg_18_itdma_slot_inc_get, _aisparser.aismsg_18_itdma_slot_inc_set)
    __swig_setmethods__["num_slots"] = _aisparser.aismsg_18_itdma_num_slots_set
    __swig_getmethods__["num_slots"] = _aisparser.aismsg_18_itdma_num_slots_get
    if _newclass:num_slots = _swig_property(_aisparser.aismsg_18_itdma_num_slots_get, _aisparser.aismsg_18_itdma_num_slots_set)
    __swig_setmethods__["keep_flag"] = _aisparser.aismsg_18_itdma_keep_flag_set
    __swig_getmethods__["keep_flag"] = _aisparser.aismsg_18_itdma_keep_flag_get
    if _newclass:keep_flag = _swig_property(_aisparser.aismsg_18_itdma_keep_flag_get, _aisparser.aismsg_18_itdma_keep_flag_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_18_itdma(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_18_itdma
    __del__ = lambda self : None;
aismsg_18_itdma_swigregister = _aisparser.aismsg_18_itdma_swigregister
aismsg_18_itdma_swigregister(aismsg_18_itdma)

class aismsg_18_sotdma(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_18_sotdma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_18_sotdma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_state"] = _aisparser.aismsg_18_sotdma_sync_state_set
    __swig_getmethods__["sync_state"] = _aisparser.aismsg_18_sotdma_sync_state_get
    if _newclass:sync_state = _swig_property(_aisparser.aismsg_18_sotdma_sync_state_get, _aisparser.aismsg_18_sotdma_sync_state_set)
    __swig_setmethods__["slot_timeout"] = _aisparser.aismsg_18_sotdma_slot_timeout_set
    __swig_getmethods__["slot_timeout"] = _aisparser.aismsg_18_sotdma_slot_timeout_get
    if _newclass:slot_timeout = _swig_property(_aisparser.aismsg_18_sotdma_slot_timeout_get, _aisparser.aismsg_18_sotdma_slot_timeout_set)
    __swig_setmethods__["sub_message"] = _aisparser.aismsg_18_sotdma_sub_message_set
    __swig_getmethods__["sub_message"] = _aisparser.aismsg_18_sotdma_sub_message_get
    if _newclass:sub_message = _swig_property(_aisparser.aismsg_18_sotdma_sub_message_get, _aisparser.aismsg_18_sotdma_sub_message_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_18_sotdma(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_18_sotdma
    __del__ = lambda self : None;
aismsg_18_sotdma_swigregister = _aisparser.aismsg_18_sotdma_swigregister
aismsg_18_sotdma_swigregister(aismsg_18_sotdma)

class aismsg_19(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_19, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_19, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_19_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_19_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_19_msgid_get, _aisparser.aismsg_19_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_19_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_19_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_19_repeat_get, _aisparser.aismsg_19_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_19_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_19_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_19_userid_get, _aisparser.aismsg_19_userid_set)
    __swig_setmethods__["regional1"] = _aisparser.aismsg_19_regional1_set
    __swig_getmethods__["regional1"] = _aisparser.aismsg_19_regional1_get
    if _newclass:regional1 = _swig_property(_aisparser.aismsg_19_regional1_get, _aisparser.aismsg_19_regional1_set)
    __swig_setmethods__["sog"] = _aisparser.aismsg_19_sog_set
    __swig_getmethods__["sog"] = _aisparser.aismsg_19_sog_get
    if _newclass:sog = _swig_property(_aisparser.aismsg_19_sog_get, _aisparser.aismsg_19_sog_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_19_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_19_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_19_pos_acc_get, _aisparser.aismsg_19_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_19_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_19_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_19_longitude_get, _aisparser.aismsg_19_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_19_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_19_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_19_latitude_get, _aisparser.aismsg_19_latitude_set)
    __swig_setmethods__["cog"] = _aisparser.aismsg_19_cog_set
    __swig_getmethods__["cog"] = _aisparser.aismsg_19_cog_get
    if _newclass:cog = _swig_property(_aisparser.aismsg_19_cog_get, _aisparser.aismsg_19_cog_set)
    __swig_setmethods__["true"] = _aisparser.aismsg_19_true_set
    __swig_getmethods__["true"] = _aisparser.aismsg_19_true_get
    if _newclass:true = _swig_property(_aisparser.aismsg_19_true_get, _aisparser.aismsg_19_true_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_19_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_19_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_19_utc_sec_get, _aisparser.aismsg_19_utc_sec_set)
    __swig_setmethods__["regional2"] = _aisparser.aismsg_19_regional2_set
    __swig_getmethods__["regional2"] = _aisparser.aismsg_19_regional2_get
    if _newclass:regional2 = _swig_property(_aisparser.aismsg_19_regional2_get, _aisparser.aismsg_19_regional2_set)
    __swig_setmethods__["name"] = _aisparser.aismsg_19_name_set
    __swig_getmethods__["name"] = _aisparser.aismsg_19_name_get
    if _newclass:name = _swig_property(_aisparser.aismsg_19_name_get, _aisparser.aismsg_19_name_set)
    __swig_setmethods__["ship_type"] = _aisparser.aismsg_19_ship_type_set
    __swig_getmethods__["ship_type"] = _aisparser.aismsg_19_ship_type_get
    if _newclass:ship_type = _swig_property(_aisparser.aismsg_19_ship_type_get, _aisparser.aismsg_19_ship_type_set)
    __swig_setmethods__["dim_bow"] = _aisparser.aismsg_19_dim_bow_set
    __swig_getmethods__["dim_bow"] = _aisparser.aismsg_19_dim_bow_get
    if _newclass:dim_bow = _swig_property(_aisparser.aismsg_19_dim_bow_get, _aisparser.aismsg_19_dim_bow_set)
    __swig_setmethods__["dim_stern"] = _aisparser.aismsg_19_dim_stern_set
    __swig_getmethods__["dim_stern"] = _aisparser.aismsg_19_dim_stern_get
    if _newclass:dim_stern = _swig_property(_aisparser.aismsg_19_dim_stern_get, _aisparser.aismsg_19_dim_stern_set)
    __swig_setmethods__["dim_port"] = _aisparser.aismsg_19_dim_port_set
    __swig_getmethods__["dim_port"] = _aisparser.aismsg_19_dim_port_get
    if _newclass:dim_port = _swig_property(_aisparser.aismsg_19_dim_port_get, _aisparser.aismsg_19_dim_port_set)
    __swig_setmethods__["dim_starboard"] = _aisparser.aismsg_19_dim_starboard_set
    __swig_getmethods__["dim_starboard"] = _aisparser.aismsg_19_dim_starboard_get
    if _newclass:dim_starboard = _swig_property(_aisparser.aismsg_19_dim_starboard_get, _aisparser.aismsg_19_dim_starboard_set)
    __swig_setmethods__["pos_type"] = _aisparser.aismsg_19_pos_type_set
    __swig_getmethods__["pos_type"] = _aisparser.aismsg_19_pos_type_get
    if _newclass:pos_type = _swig_property(_aisparser.aismsg_19_pos_type_get, _aisparser.aismsg_19_pos_type_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_19_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_19_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_19_raim_get, _aisparser.aismsg_19_raim_set)
    __swig_setmethods__["dte"] = _aisparser.aismsg_19_dte_set
    __swig_getmethods__["dte"] = _aisparser.aismsg_19_dte_get
    if _newclass:dte = _swig_property(_aisparser.aismsg_19_dte_get, _aisparser.aismsg_19_dte_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_19_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_19_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_19_spare_get, _aisparser.aismsg_19_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_19(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_19
    __del__ = lambda self : None;
aismsg_19_swigregister = _aisparser.aismsg_19_swigregister
aismsg_19_swigregister(aismsg_19)

class aismsg_20(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_20, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_20, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_20_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_20_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_20_msgid_get, _aisparser.aismsg_20_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_20_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_20_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_20_repeat_get, _aisparser.aismsg_20_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_20_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_20_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_20_userid_get, _aisparser.aismsg_20_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_20_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_20_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_20_spare1_get, _aisparser.aismsg_20_spare1_set)
    __swig_setmethods__["offset1"] = _aisparser.aismsg_20_offset1_set
    __swig_getmethods__["offset1"] = _aisparser.aismsg_20_offset1_get
    if _newclass:offset1 = _swig_property(_aisparser.aismsg_20_offset1_get, _aisparser.aismsg_20_offset1_set)
    __swig_setmethods__["slots1"] = _aisparser.aismsg_20_slots1_set
    __swig_getmethods__["slots1"] = _aisparser.aismsg_20_slots1_get
    if _newclass:slots1 = _swig_property(_aisparser.aismsg_20_slots1_get, _aisparser.aismsg_20_slots1_set)
    __swig_setmethods__["timeout1"] = _aisparser.aismsg_20_timeout1_set
    __swig_getmethods__["timeout1"] = _aisparser.aismsg_20_timeout1_get
    if _newclass:timeout1 = _swig_property(_aisparser.aismsg_20_timeout1_get, _aisparser.aismsg_20_timeout1_set)
    __swig_setmethods__["increment1"] = _aisparser.aismsg_20_increment1_set
    __swig_getmethods__["increment1"] = _aisparser.aismsg_20_increment1_get
    if _newclass:increment1 = _swig_property(_aisparser.aismsg_20_increment1_get, _aisparser.aismsg_20_increment1_set)
    __swig_setmethods__["offset2"] = _aisparser.aismsg_20_offset2_set
    __swig_getmethods__["offset2"] = _aisparser.aismsg_20_offset2_get
    if _newclass:offset2 = _swig_property(_aisparser.aismsg_20_offset2_get, _aisparser.aismsg_20_offset2_set)
    __swig_setmethods__["slots2"] = _aisparser.aismsg_20_slots2_set
    __swig_getmethods__["slots2"] = _aisparser.aismsg_20_slots2_get
    if _newclass:slots2 = _swig_property(_aisparser.aismsg_20_slots2_get, _aisparser.aismsg_20_slots2_set)
    __swig_setmethods__["timeout2"] = _aisparser.aismsg_20_timeout2_set
    __swig_getmethods__["timeout2"] = _aisparser.aismsg_20_timeout2_get
    if _newclass:timeout2 = _swig_property(_aisparser.aismsg_20_timeout2_get, _aisparser.aismsg_20_timeout2_set)
    __swig_setmethods__["increment2"] = _aisparser.aismsg_20_increment2_set
    __swig_getmethods__["increment2"] = _aisparser.aismsg_20_increment2_get
    if _newclass:increment2 = _swig_property(_aisparser.aismsg_20_increment2_get, _aisparser.aismsg_20_increment2_set)
    __swig_setmethods__["offset3"] = _aisparser.aismsg_20_offset3_set
    __swig_getmethods__["offset3"] = _aisparser.aismsg_20_offset3_get
    if _newclass:offset3 = _swig_property(_aisparser.aismsg_20_offset3_get, _aisparser.aismsg_20_offset3_set)
    __swig_setmethods__["slots3"] = _aisparser.aismsg_20_slots3_set
    __swig_getmethods__["slots3"] = _aisparser.aismsg_20_slots3_get
    if _newclass:slots3 = _swig_property(_aisparser.aismsg_20_slots3_get, _aisparser.aismsg_20_slots3_set)
    __swig_setmethods__["timeout3"] = _aisparser.aismsg_20_timeout3_set
    __swig_getmethods__["timeout3"] = _aisparser.aismsg_20_timeout3_get
    if _newclass:timeout3 = _swig_property(_aisparser.aismsg_20_timeout3_get, _aisparser.aismsg_20_timeout3_set)
    __swig_setmethods__["increment3"] = _aisparser.aismsg_20_increment3_set
    __swig_getmethods__["increment3"] = _aisparser.aismsg_20_increment3_get
    if _newclass:increment3 = _swig_property(_aisparser.aismsg_20_increment3_get, _aisparser.aismsg_20_increment3_set)
    __swig_setmethods__["offset4"] = _aisparser.aismsg_20_offset4_set
    __swig_getmethods__["offset4"] = _aisparser.aismsg_20_offset4_get
    if _newclass:offset4 = _swig_property(_aisparser.aismsg_20_offset4_get, _aisparser.aismsg_20_offset4_set)
    __swig_setmethods__["slots4"] = _aisparser.aismsg_20_slots4_set
    __swig_getmethods__["slots4"] = _aisparser.aismsg_20_slots4_get
    if _newclass:slots4 = _swig_property(_aisparser.aismsg_20_slots4_get, _aisparser.aismsg_20_slots4_set)
    __swig_setmethods__["timeout4"] = _aisparser.aismsg_20_timeout4_set
    __swig_getmethods__["timeout4"] = _aisparser.aismsg_20_timeout4_get
    if _newclass:timeout4 = _swig_property(_aisparser.aismsg_20_timeout4_get, _aisparser.aismsg_20_timeout4_set)
    __swig_setmethods__["increment4"] = _aisparser.aismsg_20_increment4_set
    __swig_getmethods__["increment4"] = _aisparser.aismsg_20_increment4_get
    if _newclass:increment4 = _swig_property(_aisparser.aismsg_20_increment4_get, _aisparser.aismsg_20_increment4_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_20_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_20_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_20_spare2_get, _aisparser.aismsg_20_spare2_set)
    __swig_setmethods__["num_cmds"] = _aisparser.aismsg_20_num_cmds_set
    __swig_getmethods__["num_cmds"] = _aisparser.aismsg_20_num_cmds_get
    if _newclass:num_cmds = _swig_property(_aisparser.aismsg_20_num_cmds_get, _aisparser.aismsg_20_num_cmds_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_20(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_20
    __del__ = lambda self : None;
aismsg_20_swigregister = _aisparser.aismsg_20_swigregister
aismsg_20_swigregister(aismsg_20)

class aismsg_21(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_21, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_21, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_21_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_21_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_21_msgid_get, _aisparser.aismsg_21_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_21_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_21_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_21_repeat_get, _aisparser.aismsg_21_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_21_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_21_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_21_userid_get, _aisparser.aismsg_21_userid_set)
    __swig_setmethods__["aton_type"] = _aisparser.aismsg_21_aton_type_set
    __swig_getmethods__["aton_type"] = _aisparser.aismsg_21_aton_type_get
    if _newclass:aton_type = _swig_property(_aisparser.aismsg_21_aton_type_get, _aisparser.aismsg_21_aton_type_set)
    __swig_setmethods__["name"] = _aisparser.aismsg_21_name_set
    __swig_getmethods__["name"] = _aisparser.aismsg_21_name_get
    if _newclass:name = _swig_property(_aisparser.aismsg_21_name_get, _aisparser.aismsg_21_name_set)
    __swig_setmethods__["pos_acc"] = _aisparser.aismsg_21_pos_acc_set
    __swig_getmethods__["pos_acc"] = _aisparser.aismsg_21_pos_acc_get
    if _newclass:pos_acc = _swig_property(_aisparser.aismsg_21_pos_acc_get, _aisparser.aismsg_21_pos_acc_set)
    __swig_setmethods__["longitude"] = _aisparser.aismsg_21_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.aismsg_21_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.aismsg_21_longitude_get, _aisparser.aismsg_21_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.aismsg_21_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.aismsg_21_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.aismsg_21_latitude_get, _aisparser.aismsg_21_latitude_set)
    __swig_setmethods__["dim_bow"] = _aisparser.aismsg_21_dim_bow_set
    __swig_getmethods__["dim_bow"] = _aisparser.aismsg_21_dim_bow_get
    if _newclass:dim_bow = _swig_property(_aisparser.aismsg_21_dim_bow_get, _aisparser.aismsg_21_dim_bow_set)
    __swig_setmethods__["dim_stern"] = _aisparser.aismsg_21_dim_stern_set
    __swig_getmethods__["dim_stern"] = _aisparser.aismsg_21_dim_stern_get
    if _newclass:dim_stern = _swig_property(_aisparser.aismsg_21_dim_stern_get, _aisparser.aismsg_21_dim_stern_set)
    __swig_setmethods__["dim_port"] = _aisparser.aismsg_21_dim_port_set
    __swig_getmethods__["dim_port"] = _aisparser.aismsg_21_dim_port_get
    if _newclass:dim_port = _swig_property(_aisparser.aismsg_21_dim_port_get, _aisparser.aismsg_21_dim_port_set)
    __swig_setmethods__["dim_starboard"] = _aisparser.aismsg_21_dim_starboard_set
    __swig_getmethods__["dim_starboard"] = _aisparser.aismsg_21_dim_starboard_get
    if _newclass:dim_starboard = _swig_property(_aisparser.aismsg_21_dim_starboard_get, _aisparser.aismsg_21_dim_starboard_set)
    __swig_setmethods__["pos_type"] = _aisparser.aismsg_21_pos_type_set
    __swig_getmethods__["pos_type"] = _aisparser.aismsg_21_pos_type_get
    if _newclass:pos_type = _swig_property(_aisparser.aismsg_21_pos_type_get, _aisparser.aismsg_21_pos_type_set)
    __swig_setmethods__["utc_sec"] = _aisparser.aismsg_21_utc_sec_set
    __swig_getmethods__["utc_sec"] = _aisparser.aismsg_21_utc_sec_get
    if _newclass:utc_sec = _swig_property(_aisparser.aismsg_21_utc_sec_get, _aisparser.aismsg_21_utc_sec_set)
    __swig_setmethods__["off_position"] = _aisparser.aismsg_21_off_position_set
    __swig_getmethods__["off_position"] = _aisparser.aismsg_21_off_position_get
    if _newclass:off_position = _swig_property(_aisparser.aismsg_21_off_position_get, _aisparser.aismsg_21_off_position_set)
    __swig_setmethods__["regional"] = _aisparser.aismsg_21_regional_set
    __swig_getmethods__["regional"] = _aisparser.aismsg_21_regional_get
    if _newclass:regional = _swig_property(_aisparser.aismsg_21_regional_get, _aisparser.aismsg_21_regional_set)
    __swig_setmethods__["raim"] = _aisparser.aismsg_21_raim_set
    __swig_getmethods__["raim"] = _aisparser.aismsg_21_raim_get
    if _newclass:raim = _swig_property(_aisparser.aismsg_21_raim_get, _aisparser.aismsg_21_raim_set)
    __swig_setmethods__["virtual"] = _aisparser.aismsg_21_virtual_set
    __swig_getmethods__["virtual"] = _aisparser.aismsg_21_virtual_get
    if _newclass:virtual = _swig_property(_aisparser.aismsg_21_virtual_get, _aisparser.aismsg_21_virtual_set)
    __swig_setmethods__["assigned"] = _aisparser.aismsg_21_assigned_set
    __swig_getmethods__["assigned"] = _aisparser.aismsg_21_assigned_get
    if _newclass:assigned = _swig_property(_aisparser.aismsg_21_assigned_get, _aisparser.aismsg_21_assigned_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_21_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_21_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_21_spare1_get, _aisparser.aismsg_21_spare1_set)
    __swig_setmethods__["name_ext"] = _aisparser.aismsg_21_name_ext_set
    __swig_getmethods__["name_ext"] = _aisparser.aismsg_21_name_ext_get
    if _newclass:name_ext = _swig_property(_aisparser.aismsg_21_name_ext_get, _aisparser.aismsg_21_name_ext_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_21_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_21_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_21_spare2_get, _aisparser.aismsg_21_spare2_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_21(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_21
    __del__ = lambda self : None;
aismsg_21_swigregister = _aisparser.aismsg_21_swigregister
aismsg_21_swigregister(aismsg_21)

class aismsg_22(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_22, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_22, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_22_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_22_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_22_msgid_get, _aisparser.aismsg_22_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_22_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_22_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_22_repeat_get, _aisparser.aismsg_22_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_22_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_22_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_22_userid_get, _aisparser.aismsg_22_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_22_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_22_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_22_spare1_get, _aisparser.aismsg_22_spare1_set)
    __swig_setmethods__["channel_a"] = _aisparser.aismsg_22_channel_a_set
    __swig_getmethods__["channel_a"] = _aisparser.aismsg_22_channel_a_get
    if _newclass:channel_a = _swig_property(_aisparser.aismsg_22_channel_a_get, _aisparser.aismsg_22_channel_a_set)
    __swig_setmethods__["channel_b"] = _aisparser.aismsg_22_channel_b_set
    __swig_getmethods__["channel_b"] = _aisparser.aismsg_22_channel_b_get
    if _newclass:channel_b = _swig_property(_aisparser.aismsg_22_channel_b_get, _aisparser.aismsg_22_channel_b_set)
    __swig_setmethods__["txrx_mode"] = _aisparser.aismsg_22_txrx_mode_set
    __swig_getmethods__["txrx_mode"] = _aisparser.aismsg_22_txrx_mode_get
    if _newclass:txrx_mode = _swig_property(_aisparser.aismsg_22_txrx_mode_get, _aisparser.aismsg_22_txrx_mode_set)
    __swig_setmethods__["power"] = _aisparser.aismsg_22_power_set
    __swig_getmethods__["power"] = _aisparser.aismsg_22_power_get
    if _newclass:power = _swig_property(_aisparser.aismsg_22_power_get, _aisparser.aismsg_22_power_set)
    __swig_setmethods__["NE_longitude"] = _aisparser.aismsg_22_NE_longitude_set
    __swig_getmethods__["NE_longitude"] = _aisparser.aismsg_22_NE_longitude_get
    if _newclass:NE_longitude = _swig_property(_aisparser.aismsg_22_NE_longitude_get, _aisparser.aismsg_22_NE_longitude_set)
    __swig_setmethods__["NE_latitude"] = _aisparser.aismsg_22_NE_latitude_set
    __swig_getmethods__["NE_latitude"] = _aisparser.aismsg_22_NE_latitude_get
    if _newclass:NE_latitude = _swig_property(_aisparser.aismsg_22_NE_latitude_get, _aisparser.aismsg_22_NE_latitude_set)
    __swig_setmethods__["addressed_1"] = _aisparser.aismsg_22_addressed_1_set
    __swig_getmethods__["addressed_1"] = _aisparser.aismsg_22_addressed_1_get
    if _newclass:addressed_1 = _swig_property(_aisparser.aismsg_22_addressed_1_get, _aisparser.aismsg_22_addressed_1_set)
    __swig_setmethods__["SW_longitude"] = _aisparser.aismsg_22_SW_longitude_set
    __swig_getmethods__["SW_longitude"] = _aisparser.aismsg_22_SW_longitude_get
    if _newclass:SW_longitude = _swig_property(_aisparser.aismsg_22_SW_longitude_get, _aisparser.aismsg_22_SW_longitude_set)
    __swig_setmethods__["SW_latitude"] = _aisparser.aismsg_22_SW_latitude_set
    __swig_getmethods__["SW_latitude"] = _aisparser.aismsg_22_SW_latitude_get
    if _newclass:SW_latitude = _swig_property(_aisparser.aismsg_22_SW_latitude_get, _aisparser.aismsg_22_SW_latitude_set)
    __swig_setmethods__["addressed_2"] = _aisparser.aismsg_22_addressed_2_set
    __swig_getmethods__["addressed_2"] = _aisparser.aismsg_22_addressed_2_get
    if _newclass:addressed_2 = _swig_property(_aisparser.aismsg_22_addressed_2_get, _aisparser.aismsg_22_addressed_2_set)
    __swig_setmethods__["addressed"] = _aisparser.aismsg_22_addressed_set
    __swig_getmethods__["addressed"] = _aisparser.aismsg_22_addressed_get
    if _newclass:addressed = _swig_property(_aisparser.aismsg_22_addressed_get, _aisparser.aismsg_22_addressed_set)
    __swig_setmethods__["bw_a"] = _aisparser.aismsg_22_bw_a_set
    __swig_getmethods__["bw_a"] = _aisparser.aismsg_22_bw_a_get
    if _newclass:bw_a = _swig_property(_aisparser.aismsg_22_bw_a_get, _aisparser.aismsg_22_bw_a_set)
    __swig_setmethods__["bw_b"] = _aisparser.aismsg_22_bw_b_set
    __swig_getmethods__["bw_b"] = _aisparser.aismsg_22_bw_b_get
    if _newclass:bw_b = _swig_property(_aisparser.aismsg_22_bw_b_get, _aisparser.aismsg_22_bw_b_set)
    __swig_setmethods__["tz_size"] = _aisparser.aismsg_22_tz_size_set
    __swig_getmethods__["tz_size"] = _aisparser.aismsg_22_tz_size_get
    if _newclass:tz_size = _swig_property(_aisparser.aismsg_22_tz_size_get, _aisparser.aismsg_22_tz_size_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_22_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_22_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_22_spare2_get, _aisparser.aismsg_22_spare2_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_22(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_22
    __del__ = lambda self : None;
aismsg_22_swigregister = _aisparser.aismsg_22_swigregister
aismsg_22_swigregister(aismsg_22)

class aismsg_23(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_23, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_23, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_23_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_23_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_23_msgid_get, _aisparser.aismsg_23_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_23_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_23_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_23_repeat_get, _aisparser.aismsg_23_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_23_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_23_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_23_userid_get, _aisparser.aismsg_23_userid_set)
    __swig_setmethods__["spare1"] = _aisparser.aismsg_23_spare1_set
    __swig_getmethods__["spare1"] = _aisparser.aismsg_23_spare1_get
    if _newclass:spare1 = _swig_property(_aisparser.aismsg_23_spare1_get, _aisparser.aismsg_23_spare1_set)
    __swig_setmethods__["NE_longitude"] = _aisparser.aismsg_23_NE_longitude_set
    __swig_getmethods__["NE_longitude"] = _aisparser.aismsg_23_NE_longitude_get
    if _newclass:NE_longitude = _swig_property(_aisparser.aismsg_23_NE_longitude_get, _aisparser.aismsg_23_NE_longitude_set)
    __swig_setmethods__["NE_latitude"] = _aisparser.aismsg_23_NE_latitude_set
    __swig_getmethods__["NE_latitude"] = _aisparser.aismsg_23_NE_latitude_get
    if _newclass:NE_latitude = _swig_property(_aisparser.aismsg_23_NE_latitude_get, _aisparser.aismsg_23_NE_latitude_set)
    __swig_setmethods__["SW_longitude"] = _aisparser.aismsg_23_SW_longitude_set
    __swig_getmethods__["SW_longitude"] = _aisparser.aismsg_23_SW_longitude_get
    if _newclass:SW_longitude = _swig_property(_aisparser.aismsg_23_SW_longitude_get, _aisparser.aismsg_23_SW_longitude_set)
    __swig_setmethods__["SW_latitude"] = _aisparser.aismsg_23_SW_latitude_set
    __swig_getmethods__["SW_latitude"] = _aisparser.aismsg_23_SW_latitude_get
    if _newclass:SW_latitude = _swig_property(_aisparser.aismsg_23_SW_latitude_get, _aisparser.aismsg_23_SW_latitude_set)
    __swig_setmethods__["station_type"] = _aisparser.aismsg_23_station_type_set
    __swig_getmethods__["station_type"] = _aisparser.aismsg_23_station_type_get
    if _newclass:station_type = _swig_property(_aisparser.aismsg_23_station_type_get, _aisparser.aismsg_23_station_type_set)
    __swig_setmethods__["ship_type"] = _aisparser.aismsg_23_ship_type_set
    __swig_getmethods__["ship_type"] = _aisparser.aismsg_23_ship_type_get
    if _newclass:ship_type = _swig_property(_aisparser.aismsg_23_ship_type_get, _aisparser.aismsg_23_ship_type_set)
    __swig_setmethods__["spare2"] = _aisparser.aismsg_23_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.aismsg_23_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.aismsg_23_spare2_get, _aisparser.aismsg_23_spare2_set)
    __swig_setmethods__["txrx_mode"] = _aisparser.aismsg_23_txrx_mode_set
    __swig_getmethods__["txrx_mode"] = _aisparser.aismsg_23_txrx_mode_get
    if _newclass:txrx_mode = _swig_property(_aisparser.aismsg_23_txrx_mode_get, _aisparser.aismsg_23_txrx_mode_set)
    __swig_setmethods__["report_interval"] = _aisparser.aismsg_23_report_interval_set
    __swig_getmethods__["report_interval"] = _aisparser.aismsg_23_report_interval_get
    if _newclass:report_interval = _swig_property(_aisparser.aismsg_23_report_interval_get, _aisparser.aismsg_23_report_interval_set)
    __swig_setmethods__["quiet_time"] = _aisparser.aismsg_23_quiet_time_set
    __swig_getmethods__["quiet_time"] = _aisparser.aismsg_23_quiet_time_get
    if _newclass:quiet_time = _swig_property(_aisparser.aismsg_23_quiet_time_get, _aisparser.aismsg_23_quiet_time_set)
    __swig_setmethods__["spare3"] = _aisparser.aismsg_23_spare3_set
    __swig_getmethods__["spare3"] = _aisparser.aismsg_23_spare3_get
    if _newclass:spare3 = _swig_property(_aisparser.aismsg_23_spare3_get, _aisparser.aismsg_23_spare3_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_23(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_23
    __del__ = lambda self : None;
aismsg_23_swigregister = _aisparser.aismsg_23_swigregister
aismsg_23_swigregister(aismsg_23)

class aismsg_24(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aismsg_24, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aismsg_24, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.aismsg_24_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.aismsg_24_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.aismsg_24_msgid_get, _aisparser.aismsg_24_msgid_set)
    __swig_setmethods__["repeat"] = _aisparser.aismsg_24_repeat_set
    __swig_getmethods__["repeat"] = _aisparser.aismsg_24_repeat_get
    if _newclass:repeat = _swig_property(_aisparser.aismsg_24_repeat_get, _aisparser.aismsg_24_repeat_set)
    __swig_setmethods__["userid"] = _aisparser.aismsg_24_userid_set
    __swig_getmethods__["userid"] = _aisparser.aismsg_24_userid_get
    if _newclass:userid = _swig_property(_aisparser.aismsg_24_userid_get, _aisparser.aismsg_24_userid_set)
    __swig_setmethods__["part_number"] = _aisparser.aismsg_24_part_number_set
    __swig_getmethods__["part_number"] = _aisparser.aismsg_24_part_number_get
    if _newclass:part_number = _swig_property(_aisparser.aismsg_24_part_number_get, _aisparser.aismsg_24_part_number_set)
    __swig_setmethods__["name"] = _aisparser.aismsg_24_name_set
    __swig_getmethods__["name"] = _aisparser.aismsg_24_name_get
    if _newclass:name = _swig_property(_aisparser.aismsg_24_name_get, _aisparser.aismsg_24_name_set)
    __swig_setmethods__["ship_type"] = _aisparser.aismsg_24_ship_type_set
    __swig_getmethods__["ship_type"] = _aisparser.aismsg_24_ship_type_get
    if _newclass:ship_type = _swig_property(_aisparser.aismsg_24_ship_type_get, _aisparser.aismsg_24_ship_type_set)
    __swig_setmethods__["vendor_id"] = _aisparser.aismsg_24_vendor_id_set
    __swig_getmethods__["vendor_id"] = _aisparser.aismsg_24_vendor_id_get
    if _newclass:vendor_id = _swig_property(_aisparser.aismsg_24_vendor_id_get, _aisparser.aismsg_24_vendor_id_set)
    __swig_setmethods__["callsign"] = _aisparser.aismsg_24_callsign_set
    __swig_getmethods__["callsign"] = _aisparser.aismsg_24_callsign_get
    if _newclass:callsign = _swig_property(_aisparser.aismsg_24_callsign_get, _aisparser.aismsg_24_callsign_set)
    __swig_setmethods__["dim_bow"] = _aisparser.aismsg_24_dim_bow_set
    __swig_getmethods__["dim_bow"] = _aisparser.aismsg_24_dim_bow_get
    if _newclass:dim_bow = _swig_property(_aisparser.aismsg_24_dim_bow_get, _aisparser.aismsg_24_dim_bow_set)
    __swig_setmethods__["dim_stern"] = _aisparser.aismsg_24_dim_stern_set
    __swig_getmethods__["dim_stern"] = _aisparser.aismsg_24_dim_stern_get
    if _newclass:dim_stern = _swig_property(_aisparser.aismsg_24_dim_stern_get, _aisparser.aismsg_24_dim_stern_set)
    __swig_setmethods__["dim_port"] = _aisparser.aismsg_24_dim_port_set
    __swig_getmethods__["dim_port"] = _aisparser.aismsg_24_dim_port_get
    if _newclass:dim_port = _swig_property(_aisparser.aismsg_24_dim_port_get, _aisparser.aismsg_24_dim_port_set)
    __swig_setmethods__["dim_starboard"] = _aisparser.aismsg_24_dim_starboard_set
    __swig_getmethods__["dim_starboard"] = _aisparser.aismsg_24_dim_starboard_get
    if _newclass:dim_starboard = _swig_property(_aisparser.aismsg_24_dim_starboard_get, _aisparser.aismsg_24_dim_starboard_set)
    __swig_setmethods__["spare"] = _aisparser.aismsg_24_spare_set
    __swig_getmethods__["spare"] = _aisparser.aismsg_24_spare_get
    if _newclass:spare = _swig_property(_aisparser.aismsg_24_spare_get, _aisparser.aismsg_24_spare_set)
    __swig_setmethods__["flags"] = _aisparser.aismsg_24_flags_set
    __swig_getmethods__["flags"] = _aisparser.aismsg_24_flags_get
    if _newclass:flags = _swig_property(_aisparser.aismsg_24_flags_get, _aisparser.aismsg_24_flags_set)
    def __init__(self, *args):
        this = _aisparser.new_aismsg_24(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_aismsg_24
    __del__ = lambda self : None;
aismsg_24_swigregister = _aisparser.aismsg_24_swigregister
aismsg_24_swigregister(aismsg_24)

class timetag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timetag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timetag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["month"] = _aisparser.timetag_month_set
    __swig_getmethods__["month"] = _aisparser.timetag_month_get
    if _newclass:month = _swig_property(_aisparser.timetag_month_get, _aisparser.timetag_month_set)
    __swig_setmethods__["day"] = _aisparser.timetag_day_set
    __swig_getmethods__["day"] = _aisparser.timetag_day_get
    if _newclass:day = _swig_property(_aisparser.timetag_day_get, _aisparser.timetag_day_set)
    __swig_setmethods__["hours"] = _aisparser.timetag_hours_set
    __swig_getmethods__["hours"] = _aisparser.timetag_hours_get
    if _newclass:hours = _swig_property(_aisparser.timetag_hours_get, _aisparser.timetag_hours_set)
    __swig_setmethods__["minutes"] = _aisparser.timetag_minutes_set
    __swig_getmethods__["minutes"] = _aisparser.timetag_minutes_get
    if _newclass:minutes = _swig_property(_aisparser.timetag_minutes_get, _aisparser.timetag_minutes_set)
    def __init__(self, *args):
        this = _aisparser.new_timetag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_timetag
    __del__ = lambda self : None;
timetag_swigregister = _aisparser.timetag_swigregister
timetag_swigregister(timetag)

class ais_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ais_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ais_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgid"] = _aisparser.ais_state_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.ais_state_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.ais_state_msgid_get, _aisparser.ais_state_msgid_set)
    __swig_setmethods__["sequence"] = _aisparser.ais_state_sequence_set
    __swig_getmethods__["sequence"] = _aisparser.ais_state_sequence_get
    if _newclass:sequence = _swig_property(_aisparser.ais_state_sequence_get, _aisparser.ais_state_sequence_set)
    __swig_setmethods__["total"] = _aisparser.ais_state_total_set
    __swig_getmethods__["total"] = _aisparser.ais_state_total_get
    if _newclass:total = _swig_property(_aisparser.ais_state_total_get, _aisparser.ais_state_total_set)
    __swig_setmethods__["num"] = _aisparser.ais_state_num_set
    __swig_getmethods__["num"] = _aisparser.ais_state_num_get
    if _newclass:num = _swig_property(_aisparser.ais_state_num_get, _aisparser.ais_state_num_set)
    __swig_setmethods__["channel"] = _aisparser.ais_state_channel_set
    __swig_getmethods__["channel"] = _aisparser.ais_state_channel_get
    if _newclass:channel = _swig_property(_aisparser.ais_state_channel_get, _aisparser.ais_state_channel_set)
    __swig_setmethods__["six_state"] = _aisparser.ais_state_six_state_set
    __swig_getmethods__["six_state"] = _aisparser.ais_state_six_state_get
    if _newclass:six_state = _swig_property(_aisparser.ais_state_six_state_get, _aisparser.ais_state_six_state_set)
    def __init__(self, *args):
        this = _aisparser.new_ais_state(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_ais_state
    __del__ = lambda self : None;
ais_state_swigregister = _aisparser.ais_state_swigregister
ais_state_swigregister(ais_state)

class binary_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binary_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binary_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dac"] = _aisparser.binary_state_dac_set
    __swig_getmethods__["dac"] = _aisparser.binary_state_dac_get
    if _newclass:dac = _swig_property(_aisparser.binary_state_dac_get, _aisparser.binary_state_dac_set)
    __swig_setmethods__["fi"] = _aisparser.binary_state_fi_set
    __swig_getmethods__["fi"] = _aisparser.binary_state_fi_get
    if _newclass:fi = _swig_property(_aisparser.binary_state_fi_get, _aisparser.binary_state_fi_set)
    __swig_setmethods__["spare"] = _aisparser.binary_state_spare_set
    __swig_getmethods__["spare"] = _aisparser.binary_state_spare_get
    if _newclass:spare = _swig_property(_aisparser.binary_state_spare_get, _aisparser.binary_state_spare_set)
    __swig_setmethods__["msgid"] = _aisparser.binary_state_msgid_set
    __swig_getmethods__["msgid"] = _aisparser.binary_state_msgid_get
    if _newclass:msgid = _swig_property(_aisparser.binary_state_msgid_get, _aisparser.binary_state_msgid_set)
    __swig_setmethods__["six_state"] = _aisparser.binary_state_six_state_set
    __swig_getmethods__["six_state"] = _aisparser.binary_state_six_state_get
    if _newclass:six_state = _swig_property(_aisparser.binary_state_six_state_get, _aisparser.binary_state_six_state_set)
    def __init__(self, *args):
        this = _aisparser.new_binary_state(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_binary_state
    __del__ = lambda self : None;
binary_state_swigregister = _aisparser.binary_state_swigregister
binary_state_swigregister(binary_state)

get_timetag = _aisparser.get_timetag
conv_sign = _aisparser.conv_sign
ais2ascii = _aisparser.ais2ascii
conv_pos = _aisparser.conv_pos
assemble_vdm = _aisparser.assemble_vdm
parse_ais_1 = _aisparser.parse_ais_1
parse_ais_2 = _aisparser.parse_ais_2
parse_ais_3 = _aisparser.parse_ais_3
parse_ais_4 = _aisparser.parse_ais_4
parse_ais_5 = _aisparser.parse_ais_5
parse_ais_6 = _aisparser.parse_ais_6
parse_ais_7 = _aisparser.parse_ais_7
parse_ais_8 = _aisparser.parse_ais_8
parse_ais_9 = _aisparser.parse_ais_9
parse_ais_10 = _aisparser.parse_ais_10
parse_ais_11 = _aisparser.parse_ais_11
parse_ais_12 = _aisparser.parse_ais_12
parse_ais_13 = _aisparser.parse_ais_13
parse_ais_14 = _aisparser.parse_ais_14
parse_ais_15 = _aisparser.parse_ais_15
parse_ais_16 = _aisparser.parse_ais_16
parse_ais_17 = _aisparser.parse_ais_17
parse_ais_18 = _aisparser.parse_ais_18
parse_ais_19 = _aisparser.parse_ais_19
parse_ais_20 = _aisparser.parse_ais_20
parse_ais_21 = _aisparser.parse_ais_21
parse_ais_22 = _aisparser.parse_ais_22
parse_ais_23 = _aisparser.parse_ais_23
parse_ais_24 = _aisparser.parse_ais_24
class wind_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wind_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wind_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.wind_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.wind_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.wind_report_utc_time_get, _aisparser.wind_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.wind_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.wind_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.wind_report_station_id_get, _aisparser.wind_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.wind_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.wind_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.wind_report_longitude_get, _aisparser.wind_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.wind_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.wind_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.wind_report_latitude_get, _aisparser.wind_report_latitude_set)
    __swig_setmethods__["speed"] = _aisparser.wind_report_speed_set
    __swig_getmethods__["speed"] = _aisparser.wind_report_speed_get
    if _newclass:speed = _swig_property(_aisparser.wind_report_speed_get, _aisparser.wind_report_speed_set)
    __swig_setmethods__["gust"] = _aisparser.wind_report_gust_set
    __swig_getmethods__["gust"] = _aisparser.wind_report_gust_get
    if _newclass:gust = _swig_property(_aisparser.wind_report_gust_get, _aisparser.wind_report_gust_set)
    __swig_setmethods__["direction"] = _aisparser.wind_report_direction_set
    __swig_getmethods__["direction"] = _aisparser.wind_report_direction_get
    if _newclass:direction = _swig_property(_aisparser.wind_report_direction_get, _aisparser.wind_report_direction_set)
    __swig_setmethods__["spare"] = _aisparser.wind_report_spare_set
    __swig_getmethods__["spare"] = _aisparser.wind_report_spare_get
    if _newclass:spare = _swig_property(_aisparser.wind_report_spare_get, _aisparser.wind_report_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_wind_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_wind_report
    __del__ = lambda self : None;
wind_report_swigregister = _aisparser.wind_report_swigregister
wind_report_swigregister(wind_report)

class weather_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, weather_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, weather_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.weather_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.weather_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.weather_report_utc_time_get, _aisparser.weather_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.weather_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.weather_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.weather_report_station_id_get, _aisparser.weather_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.weather_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.weather_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.weather_report_longitude_get, _aisparser.weather_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.weather_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.weather_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.weather_report_latitude_get, _aisparser.weather_report_latitude_set)
    __swig_setmethods__["speed"] = _aisparser.weather_report_speed_set
    __swig_getmethods__["speed"] = _aisparser.weather_report_speed_get
    if _newclass:speed = _swig_property(_aisparser.weather_report_speed_get, _aisparser.weather_report_speed_set)
    __swig_setmethods__["gust"] = _aisparser.weather_report_gust_set
    __swig_getmethods__["gust"] = _aisparser.weather_report_gust_get
    if _newclass:gust = _swig_property(_aisparser.weather_report_gust_get, _aisparser.weather_report_gust_set)
    __swig_setmethods__["direction"] = _aisparser.weather_report_direction_set
    __swig_getmethods__["direction"] = _aisparser.weather_report_direction_get
    if _newclass:direction = _swig_property(_aisparser.weather_report_direction_get, _aisparser.weather_report_direction_set)
    __swig_setmethods__["pressure"] = _aisparser.weather_report_pressure_set
    __swig_getmethods__["pressure"] = _aisparser.weather_report_pressure_get
    if _newclass:pressure = _swig_property(_aisparser.weather_report_pressure_get, _aisparser.weather_report_pressure_set)
    __swig_setmethods__["air_temp"] = _aisparser.weather_report_air_temp_set
    __swig_getmethods__["air_temp"] = _aisparser.weather_report_air_temp_get
    if _newclass:air_temp = _swig_property(_aisparser.weather_report_air_temp_get, _aisparser.weather_report_air_temp_set)
    __swig_setmethods__["dew_point"] = _aisparser.weather_report_dew_point_set
    __swig_getmethods__["dew_point"] = _aisparser.weather_report_dew_point_get
    if _newclass:dew_point = _swig_property(_aisparser.weather_report_dew_point_get, _aisparser.weather_report_dew_point_set)
    __swig_setmethods__["visibility"] = _aisparser.weather_report_visibility_set
    __swig_getmethods__["visibility"] = _aisparser.weather_report_visibility_get
    if _newclass:visibility = _swig_property(_aisparser.weather_report_visibility_get, _aisparser.weather_report_visibility_set)
    __swig_setmethods__["water_temp"] = _aisparser.weather_report_water_temp_set
    __swig_getmethods__["water_temp"] = _aisparser.weather_report_water_temp_get
    if _newclass:water_temp = _swig_property(_aisparser.weather_report_water_temp_get, _aisparser.weather_report_water_temp_set)
    def __init__(self, *args):
        this = _aisparser.new_weather_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_weather_report
    __del__ = lambda self : None;
weather_report_swigregister = _aisparser.weather_report_swigregister
weather_report_swigregister(weather_report)

class water_level_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, water_level_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, water_level_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.water_level_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.water_level_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.water_level_report_utc_time_get, _aisparser.water_level_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.water_level_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.water_level_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.water_level_report_station_id_get, _aisparser.water_level_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.water_level_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.water_level_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.water_level_report_longitude_get, _aisparser.water_level_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.water_level_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.water_level_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.water_level_report_latitude_get, _aisparser.water_level_report_latitude_set)
    __swig_setmethods__["type"] = _aisparser.water_level_report_type_set
    __swig_getmethods__["type"] = _aisparser.water_level_report_type_get
    if _newclass:type = _swig_property(_aisparser.water_level_report_type_get, _aisparser.water_level_report_type_set)
    __swig_setmethods__["level"] = _aisparser.water_level_report_level_set
    __swig_getmethods__["level"] = _aisparser.water_level_report_level_get
    if _newclass:level = _swig_property(_aisparser.water_level_report_level_get, _aisparser.water_level_report_level_set)
    __swig_setmethods__["datum"] = _aisparser.water_level_report_datum_set
    __swig_getmethods__["datum"] = _aisparser.water_level_report_datum_get
    if _newclass:datum = _swig_property(_aisparser.water_level_report_datum_get, _aisparser.water_level_report_datum_set)
    __swig_setmethods__["spare"] = _aisparser.water_level_report_spare_set
    __swig_getmethods__["spare"] = _aisparser.water_level_report_spare_get
    if _newclass:spare = _swig_property(_aisparser.water_level_report_spare_get, _aisparser.water_level_report_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_water_level_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_water_level_report
    __del__ = lambda self : None;
water_level_report_swigregister = _aisparser.water_level_report_swigregister
water_level_report_swigregister(water_level_report)

class water_flow_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, water_flow_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, water_flow_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.water_flow_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.water_flow_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.water_flow_report_utc_time_get, _aisparser.water_flow_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.water_flow_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.water_flow_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.water_flow_report_station_id_get, _aisparser.water_flow_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.water_flow_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.water_flow_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.water_flow_report_longitude_get, _aisparser.water_flow_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.water_flow_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.water_flow_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.water_flow_report_latitude_get, _aisparser.water_flow_report_latitude_set)
    __swig_setmethods__["flow"] = _aisparser.water_flow_report_flow_set
    __swig_getmethods__["flow"] = _aisparser.water_flow_report_flow_get
    if _newclass:flow = _swig_property(_aisparser.water_flow_report_flow_get, _aisparser.water_flow_report_flow_set)
    __swig_setmethods__["spare"] = _aisparser.water_flow_report_spare_set
    __swig_getmethods__["spare"] = _aisparser.water_flow_report_spare_get
    if _newclass:spare = _swig_property(_aisparser.water_flow_report_spare_get, _aisparser.water_flow_report_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_water_flow_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_water_flow_report
    __del__ = lambda self : None;
water_flow_report_swigregister = _aisparser.water_flow_report_swigregister
water_flow_report_swigregister(water_flow_report)

class lock_schedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lock_schedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lock_schedule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _aisparser.lock_schedule_name_set
    __swig_getmethods__["name"] = _aisparser.lock_schedule_name_get
    if _newclass:name = _swig_property(_aisparser.lock_schedule_name_get, _aisparser.lock_schedule_name_set)
    __swig_setmethods__["direction"] = _aisparser.lock_schedule_direction_set
    __swig_getmethods__["direction"] = _aisparser.lock_schedule_direction_get
    if _newclass:direction = _swig_property(_aisparser.lock_schedule_direction_get, _aisparser.lock_schedule_direction_set)
    __swig_setmethods__["eta"] = _aisparser.lock_schedule_eta_set
    __swig_getmethods__["eta"] = _aisparser.lock_schedule_eta_get
    if _newclass:eta = _swig_property(_aisparser.lock_schedule_eta_get, _aisparser.lock_schedule_eta_set)
    __swig_setmethods__["spare"] = _aisparser.lock_schedule_spare_set
    __swig_getmethods__["spare"] = _aisparser.lock_schedule_spare_get
    if _newclass:spare = _swig_property(_aisparser.lock_schedule_spare_get, _aisparser.lock_schedule_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_lock_schedule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_lock_schedule
    __del__ = lambda self : None;
lock_schedule_swigregister = _aisparser.lock_schedule_swigregister
lock_schedule_swigregister(lock_schedule)

class current_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, current_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, current_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.current_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.current_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.current_report_utc_time_get, _aisparser.current_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.current_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.current_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.current_report_station_id_get, _aisparser.current_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.current_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.current_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.current_report_longitude_get, _aisparser.current_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.current_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.current_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.current_report_latitude_get, _aisparser.current_report_latitude_set)
    __swig_setmethods__["speed"] = _aisparser.current_report_speed_set
    __swig_getmethods__["speed"] = _aisparser.current_report_speed_get
    if _newclass:speed = _swig_property(_aisparser.current_report_speed_get, _aisparser.current_report_speed_set)
    __swig_setmethods__["direction"] = _aisparser.current_report_direction_set
    __swig_getmethods__["direction"] = _aisparser.current_report_direction_get
    if _newclass:direction = _swig_property(_aisparser.current_report_direction_get, _aisparser.current_report_direction_set)
    __swig_setmethods__["spare"] = _aisparser.current_report_spare_set
    __swig_getmethods__["spare"] = _aisparser.current_report_spare_get
    if _newclass:spare = _swig_property(_aisparser.current_report_spare_get, _aisparser.current_report_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_current_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_current_report
    __del__ = lambda self : None;
current_report_swigregister = _aisparser.current_report_swigregister
current_report_swigregister(current_report)

class salinity_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, salinity_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, salinity_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.salinity_report_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.salinity_report_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.salinity_report_utc_time_get, _aisparser.salinity_report_utc_time_set)
    __swig_setmethods__["station_id"] = _aisparser.salinity_report_station_id_set
    __swig_getmethods__["station_id"] = _aisparser.salinity_report_station_id_get
    if _newclass:station_id = _swig_property(_aisparser.salinity_report_station_id_get, _aisparser.salinity_report_station_id_set)
    __swig_setmethods__["longitude"] = _aisparser.salinity_report_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.salinity_report_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.salinity_report_longitude_get, _aisparser.salinity_report_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.salinity_report_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.salinity_report_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.salinity_report_latitude_get, _aisparser.salinity_report_latitude_set)
    __swig_setmethods__["salinity"] = _aisparser.salinity_report_salinity_set
    __swig_getmethods__["salinity"] = _aisparser.salinity_report_salinity_get
    if _newclass:salinity = _swig_property(_aisparser.salinity_report_salinity_get, _aisparser.salinity_report_salinity_set)
    __swig_setmethods__["water_temp"] = _aisparser.salinity_report_water_temp_set
    __swig_getmethods__["water_temp"] = _aisparser.salinity_report_water_temp_get
    if _newclass:water_temp = _swig_property(_aisparser.salinity_report_water_temp_get, _aisparser.salinity_report_water_temp_set)
    __swig_setmethods__["spare"] = _aisparser.salinity_report_spare_set
    __swig_getmethods__["spare"] = _aisparser.salinity_report_spare_get
    if _newclass:spare = _swig_property(_aisparser.salinity_report_spare_get, _aisparser.salinity_report_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_salinity_report(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_salinity_report
    __del__ = lambda self : None;
salinity_report_swigregister = _aisparser.salinity_report_swigregister
salinity_report_swigregister(salinity_report)

class procession_order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, procession_order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, procession_order, name)
    __repr__ = _swig_repr
    __swig_setmethods__["order"] = _aisparser.procession_order_order_set
    __swig_getmethods__["order"] = _aisparser.procession_order_order_get
    if _newclass:order = _swig_property(_aisparser.procession_order_order_get, _aisparser.procession_order_order_set)
    __swig_setmethods__["vessel_name"] = _aisparser.procession_order_vessel_name_set
    __swig_getmethods__["vessel_name"] = _aisparser.procession_order_vessel_name_get
    if _newclass:vessel_name = _swig_property(_aisparser.procession_order_vessel_name_get, _aisparser.procession_order_vessel_name_set)
    __swig_setmethods__["position_name"] = _aisparser.procession_order_position_name_set
    __swig_getmethods__["position_name"] = _aisparser.procession_order_position_name_get
    if _newclass:position_name = _swig_property(_aisparser.procession_order_position_name_get, _aisparser.procession_order_position_name_set)
    __swig_setmethods__["time_hh"] = _aisparser.procession_order_time_hh_set
    __swig_getmethods__["time_hh"] = _aisparser.procession_order_time_hh_get
    if _newclass:time_hh = _swig_property(_aisparser.procession_order_time_hh_get, _aisparser.procession_order_time_hh_set)
    __swig_setmethods__["time_mm"] = _aisparser.procession_order_time_mm_set
    __swig_getmethods__["time_mm"] = _aisparser.procession_order_time_mm_get
    if _newclass:time_mm = _swig_property(_aisparser.procession_order_time_mm_get, _aisparser.procession_order_time_mm_set)
    __swig_setmethods__["spare"] = _aisparser.procession_order_spare_set
    __swig_getmethods__["spare"] = _aisparser.procession_order_spare_get
    if _newclass:spare = _swig_property(_aisparser.procession_order_spare_get, _aisparser.procession_order_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_procession_order(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_procession_order
    __del__ = lambda self : None;
procession_order_swigregister = _aisparser.procession_order_swigregister
procession_order_swigregister(procession_order)

class seaway1_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway1_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway1_1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.seaway1_1_report_set
    __swig_getmethods__["report"] = _aisparser.seaway1_1_report_get
    if _newclass:report = _swig_property(_aisparser.seaway1_1_report_get, _aisparser.seaway1_1_report_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway1_1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway1_1
    __del__ = lambda self : None;
seaway1_1_swigregister = _aisparser.seaway1_1_swigregister
seaway1_1_swigregister(seaway1_1)

class seaway1_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway1_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway1_2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.seaway1_2_report_set
    __swig_getmethods__["report"] = _aisparser.seaway1_2_report_get
    if _newclass:report = _swig_property(_aisparser.seaway1_2_report_get, _aisparser.seaway1_2_report_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway1_2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway1_2
    __del__ = lambda self : None;
seaway1_2_swigregister = _aisparser.seaway1_2_swigregister
seaway1_2_swigregister(seaway1_2)

class seaway1_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway1_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway1_3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.seaway1_3_report_set
    __swig_getmethods__["report"] = _aisparser.seaway1_3_report_get
    if _newclass:report = _swig_property(_aisparser.seaway1_3_report_get, _aisparser.seaway1_3_report_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway1_3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway1_3
    __del__ = lambda self : None;
seaway1_3_swigregister = _aisparser.seaway1_3_swigregister
seaway1_3_swigregister(seaway1_3)

class seaway1_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway1_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway1_6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.seaway1_6_report_set
    __swig_getmethods__["report"] = _aisparser.seaway1_6_report_get
    if _newclass:report = _swig_property(_aisparser.seaway1_6_report_get, _aisparser.seaway1_6_report_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway1_6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway1_6
    __del__ = lambda self : None;
seaway1_6_swigregister = _aisparser.seaway1_6_swigregister
seaway1_6_swigregister(seaway1_6)

class seaway2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway2_1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.seaway2_1_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.seaway2_1_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.seaway2_1_utc_time_get, _aisparser.seaway2_1_utc_time_set)
    __swig_setmethods__["lock_id"] = _aisparser.seaway2_1_lock_id_set
    __swig_getmethods__["lock_id"] = _aisparser.seaway2_1_lock_id_get
    if _newclass:lock_id = _swig_property(_aisparser.seaway2_1_lock_id_get, _aisparser.seaway2_1_lock_id_set)
    __swig_setmethods__["longitude"] = _aisparser.seaway2_1_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.seaway2_1_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.seaway2_1_longitude_get, _aisparser.seaway2_1_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.seaway2_1_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.seaway2_1_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.seaway2_1_latitude_get, _aisparser.seaway2_1_latitude_set)
    __swig_setmethods__["spare2"] = _aisparser.seaway2_1_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.seaway2_1_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.seaway2_1_spare2_get, _aisparser.seaway2_1_spare2_set)
    __swig_setmethods__["schedule"] = _aisparser.seaway2_1_schedule_set
    __swig_getmethods__["schedule"] = _aisparser.seaway2_1_schedule_get
    if _newclass:schedule = _swig_property(_aisparser.seaway2_1_schedule_get, _aisparser.seaway2_1_schedule_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway2_1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway2_1
    __del__ = lambda self : None;
seaway2_1_swigregister = _aisparser.seaway2_1_swigregister
seaway2_1_swigregister(seaway2_1)

class seaway2_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway2_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway2_2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.seaway2_2_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.seaway2_2_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.seaway2_2_utc_time_get, _aisparser.seaway2_2_utc_time_set)
    __swig_setmethods__["name"] = _aisparser.seaway2_2_name_set
    __swig_getmethods__["name"] = _aisparser.seaway2_2_name_get
    if _newclass:name = _swig_property(_aisparser.seaway2_2_name_get, _aisparser.seaway2_2_name_set)
    __swig_setmethods__["last_location"] = _aisparser.seaway2_2_last_location_set
    __swig_getmethods__["last_location"] = _aisparser.seaway2_2_last_location_get
    if _newclass:last_location = _swig_property(_aisparser.seaway2_2_last_location_get, _aisparser.seaway2_2_last_location_set)
    __swig_setmethods__["last_ata"] = _aisparser.seaway2_2_last_ata_set
    __swig_getmethods__["last_ata"] = _aisparser.seaway2_2_last_ata_get
    if _newclass:last_ata = _swig_property(_aisparser.seaway2_2_last_ata_get, _aisparser.seaway2_2_last_ata_set)
    __swig_setmethods__["first_lock"] = _aisparser.seaway2_2_first_lock_set
    __swig_getmethods__["first_lock"] = _aisparser.seaway2_2_first_lock_get
    if _newclass:first_lock = _swig_property(_aisparser.seaway2_2_first_lock_get, _aisparser.seaway2_2_first_lock_set)
    __swig_setmethods__["first_eta"] = _aisparser.seaway2_2_first_eta_set
    __swig_getmethods__["first_eta"] = _aisparser.seaway2_2_first_eta_get
    if _newclass:first_eta = _swig_property(_aisparser.seaway2_2_first_eta_get, _aisparser.seaway2_2_first_eta_set)
    __swig_setmethods__["second_lock"] = _aisparser.seaway2_2_second_lock_set
    __swig_getmethods__["second_lock"] = _aisparser.seaway2_2_second_lock_get
    if _newclass:second_lock = _swig_property(_aisparser.seaway2_2_second_lock_get, _aisparser.seaway2_2_second_lock_set)
    __swig_setmethods__["second_eta"] = _aisparser.seaway2_2_second_eta_set
    __swig_getmethods__["second_eta"] = _aisparser.seaway2_2_second_eta_get
    if _newclass:second_eta = _swig_property(_aisparser.seaway2_2_second_eta_get, _aisparser.seaway2_2_second_eta_set)
    __swig_setmethods__["delay"] = _aisparser.seaway2_2_delay_set
    __swig_getmethods__["delay"] = _aisparser.seaway2_2_delay_get
    if _newclass:delay = _swig_property(_aisparser.seaway2_2_delay_get, _aisparser.seaway2_2_delay_set)
    __swig_setmethods__["spare2"] = _aisparser.seaway2_2_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.seaway2_2_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.seaway2_2_spare2_get, _aisparser.seaway2_2_spare2_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway2_2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway2_2
    __del__ = lambda self : None;
seaway2_2_swigregister = _aisparser.seaway2_2_swigregister
seaway2_2_swigregister(seaway2_2)

class seaway32_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seaway32_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seaway32_1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _aisparser.seaway32_1_major_set
    __swig_getmethods__["major"] = _aisparser.seaway32_1_major_get
    if _newclass:major = _swig_property(_aisparser.seaway32_1_major_get, _aisparser.seaway32_1_major_set)
    __swig_setmethods__["minor"] = _aisparser.seaway32_1_minor_set
    __swig_getmethods__["minor"] = _aisparser.seaway32_1_minor_get
    if _newclass:minor = _swig_property(_aisparser.seaway32_1_minor_get, _aisparser.seaway32_1_minor_set)
    __swig_setmethods__["spare2"] = _aisparser.seaway32_1_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.seaway32_1_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.seaway32_1_spare2_get, _aisparser.seaway32_1_spare2_set)
    def __init__(self, *args):
        this = _aisparser.new_seaway32_1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_seaway32_1
    __del__ = lambda self : None;
seaway32_1_swigregister = _aisparser.seaway32_1_swigregister
seaway32_1_swigregister(seaway32_1)

class pawss1_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pawss1_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pawss1_4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.pawss1_4_report_set
    __swig_getmethods__["report"] = _aisparser.pawss1_4_report_get
    if _newclass:report = _swig_property(_aisparser.pawss1_4_report_get, _aisparser.pawss1_4_report_set)
    def __init__(self, *args):
        this = _aisparser.new_pawss1_4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_pawss1_4
    __del__ = lambda self : None;
pawss1_4_swigregister = _aisparser.pawss1_4_swigregister
pawss1_4_swigregister(pawss1_4)

class pawss1_5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pawss1_5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pawss1_5, name)
    __repr__ = _swig_repr
    __swig_setmethods__["report"] = _aisparser.pawss1_5_report_set
    __swig_getmethods__["report"] = _aisparser.pawss1_5_report_get
    if _newclass:report = _swig_property(_aisparser.pawss1_5_report_get, _aisparser.pawss1_5_report_set)
    def __init__(self, *args):
        this = _aisparser.new_pawss1_5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_pawss1_5
    __del__ = lambda self : None;
pawss1_5_swigregister = _aisparser.pawss1_5_swigregister
pawss1_5_swigregister(pawss1_5)

class pawss2_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pawss2_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pawss2_3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_time"] = _aisparser.pawss2_3_utc_time_set
    __swig_getmethods__["utc_time"] = _aisparser.pawss2_3_utc_time_get
    if _newclass:utc_time = _swig_property(_aisparser.pawss2_3_utc_time_get, _aisparser.pawss2_3_utc_time_set)
    __swig_setmethods__["direction"] = _aisparser.pawss2_3_direction_set
    __swig_getmethods__["direction"] = _aisparser.pawss2_3_direction_get
    if _newclass:direction = _swig_property(_aisparser.pawss2_3_direction_get, _aisparser.pawss2_3_direction_set)
    __swig_setmethods__["longitude"] = _aisparser.pawss2_3_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.pawss2_3_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.pawss2_3_longitude_get, _aisparser.pawss2_3_longitude_set)
    __swig_setmethods__["latitude"] = _aisparser.pawss2_3_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.pawss2_3_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.pawss2_3_latitude_get, _aisparser.pawss2_3_latitude_set)
    __swig_setmethods__["spare2"] = _aisparser.pawss2_3_spare2_set
    __swig_getmethods__["spare2"] = _aisparser.pawss2_3_spare2_get
    if _newclass:spare2 = _swig_property(_aisparser.pawss2_3_spare2_get, _aisparser.pawss2_3_spare2_set)
    __swig_setmethods__["report"] = _aisparser.pawss2_3_report_set
    __swig_getmethods__["report"] = _aisparser.pawss2_3_report_get
    if _newclass:report = _swig_property(_aisparser.pawss2_3_report_get, _aisparser.pawss2_3_report_set)
    def __init__(self, *args):
        this = _aisparser.new_pawss2_3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_pawss2_3
    __del__ = lambda self : None;
pawss2_3_swigregister = _aisparser.pawss2_3_swigregister
pawss2_3_swigregister(pawss2_3)

parse_seaway1_1 = _aisparser.parse_seaway1_1
parse_seaway1_2 = _aisparser.parse_seaway1_2
parse_seaway1_3 = _aisparser.parse_seaway1_3
parse_seaway1_6 = _aisparser.parse_seaway1_6
parse_seaway2_1 = _aisparser.parse_seaway2_1
parse_seaway2_2 = _aisparser.parse_seaway2_2
parse_seaway32_1 = _aisparser.parse_seaway32_1
parse_pawss1_4 = _aisparser.parse_pawss1_4
parse_pawss1_5 = _aisparser.parse_pawss1_5
parse_pawss2_3 = _aisparser.parse_pawss2_3
class imo1_11(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_11, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_11, name)
    __repr__ = _swig_repr
    __swig_setmethods__["latitude"] = _aisparser.imo1_11_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.imo1_11_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.imo1_11_latitude_get, _aisparser.imo1_11_latitude_set)
    __swig_setmethods__["longitude"] = _aisparser.imo1_11_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.imo1_11_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.imo1_11_longitude_get, _aisparser.imo1_11_longitude_set)
    __swig_setmethods__["timedate"] = _aisparser.imo1_11_timedate_set
    __swig_getmethods__["timedate"] = _aisparser.imo1_11_timedate_get
    if _newclass:timedate = _swig_property(_aisparser.imo1_11_timedate_get, _aisparser.imo1_11_timedate_set)
    __swig_setmethods__["wind_avg"] = _aisparser.imo1_11_wind_avg_set
    __swig_getmethods__["wind_avg"] = _aisparser.imo1_11_wind_avg_get
    if _newclass:wind_avg = _swig_property(_aisparser.imo1_11_wind_avg_get, _aisparser.imo1_11_wind_avg_set)
    __swig_setmethods__["wind_gust"] = _aisparser.imo1_11_wind_gust_set
    __swig_getmethods__["wind_gust"] = _aisparser.imo1_11_wind_gust_get
    if _newclass:wind_gust = _swig_property(_aisparser.imo1_11_wind_gust_get, _aisparser.imo1_11_wind_gust_set)
    __swig_setmethods__["wind_dir"] = _aisparser.imo1_11_wind_dir_set
    __swig_getmethods__["wind_dir"] = _aisparser.imo1_11_wind_dir_get
    if _newclass:wind_dir = _swig_property(_aisparser.imo1_11_wind_dir_get, _aisparser.imo1_11_wind_dir_set)
    __swig_setmethods__["gust_dir"] = _aisparser.imo1_11_gust_dir_set
    __swig_getmethods__["gust_dir"] = _aisparser.imo1_11_gust_dir_get
    if _newclass:gust_dir = _swig_property(_aisparser.imo1_11_gust_dir_get, _aisparser.imo1_11_gust_dir_set)
    __swig_setmethods__["air_temp"] = _aisparser.imo1_11_air_temp_set
    __swig_getmethods__["air_temp"] = _aisparser.imo1_11_air_temp_get
    if _newclass:air_temp = _swig_property(_aisparser.imo1_11_air_temp_get, _aisparser.imo1_11_air_temp_set)
    __swig_setmethods__["humidity"] = _aisparser.imo1_11_humidity_set
    __swig_getmethods__["humidity"] = _aisparser.imo1_11_humidity_get
    if _newclass:humidity = _swig_property(_aisparser.imo1_11_humidity_get, _aisparser.imo1_11_humidity_set)
    __swig_setmethods__["dew_point"] = _aisparser.imo1_11_dew_point_set
    __swig_getmethods__["dew_point"] = _aisparser.imo1_11_dew_point_get
    if _newclass:dew_point = _swig_property(_aisparser.imo1_11_dew_point_get, _aisparser.imo1_11_dew_point_set)
    __swig_setmethods__["pressure"] = _aisparser.imo1_11_pressure_set
    __swig_getmethods__["pressure"] = _aisparser.imo1_11_pressure_get
    if _newclass:pressure = _swig_property(_aisparser.imo1_11_pressure_get, _aisparser.imo1_11_pressure_set)
    __swig_setmethods__["tendency"] = _aisparser.imo1_11_tendency_set
    __swig_getmethods__["tendency"] = _aisparser.imo1_11_tendency_get
    if _newclass:tendency = _swig_property(_aisparser.imo1_11_tendency_get, _aisparser.imo1_11_tendency_set)
    __swig_setmethods__["visibility"] = _aisparser.imo1_11_visibility_set
    __swig_getmethods__["visibility"] = _aisparser.imo1_11_visibility_get
    if _newclass:visibility = _swig_property(_aisparser.imo1_11_visibility_get, _aisparser.imo1_11_visibility_set)
    __swig_setmethods__["water_level"] = _aisparser.imo1_11_water_level_set
    __swig_getmethods__["water_level"] = _aisparser.imo1_11_water_level_get
    if _newclass:water_level = _swig_property(_aisparser.imo1_11_water_level_get, _aisparser.imo1_11_water_level_set)
    __swig_setmethods__["water_trend"] = _aisparser.imo1_11_water_trend_set
    __swig_getmethods__["water_trend"] = _aisparser.imo1_11_water_trend_get
    if _newclass:water_trend = _swig_property(_aisparser.imo1_11_water_trend_get, _aisparser.imo1_11_water_trend_set)
    __swig_setmethods__["surface_speed"] = _aisparser.imo1_11_surface_speed_set
    __swig_getmethods__["surface_speed"] = _aisparser.imo1_11_surface_speed_get
    if _newclass:surface_speed = _swig_property(_aisparser.imo1_11_surface_speed_get, _aisparser.imo1_11_surface_speed_set)
    __swig_setmethods__["surface_dir"] = _aisparser.imo1_11_surface_dir_set
    __swig_getmethods__["surface_dir"] = _aisparser.imo1_11_surface_dir_get
    if _newclass:surface_dir = _swig_property(_aisparser.imo1_11_surface_dir_get, _aisparser.imo1_11_surface_dir_set)
    __swig_setmethods__["speed_2"] = _aisparser.imo1_11_speed_2_set
    __swig_getmethods__["speed_2"] = _aisparser.imo1_11_speed_2_get
    if _newclass:speed_2 = _swig_property(_aisparser.imo1_11_speed_2_get, _aisparser.imo1_11_speed_2_set)
    __swig_setmethods__["dir_2"] = _aisparser.imo1_11_dir_2_set
    __swig_getmethods__["dir_2"] = _aisparser.imo1_11_dir_2_get
    if _newclass:dir_2 = _swig_property(_aisparser.imo1_11_dir_2_get, _aisparser.imo1_11_dir_2_set)
    __swig_setmethods__["level_2"] = _aisparser.imo1_11_level_2_set
    __swig_getmethods__["level_2"] = _aisparser.imo1_11_level_2_get
    if _newclass:level_2 = _swig_property(_aisparser.imo1_11_level_2_get, _aisparser.imo1_11_level_2_set)
    __swig_setmethods__["speed_3"] = _aisparser.imo1_11_speed_3_set
    __swig_getmethods__["speed_3"] = _aisparser.imo1_11_speed_3_get
    if _newclass:speed_3 = _swig_property(_aisparser.imo1_11_speed_3_get, _aisparser.imo1_11_speed_3_set)
    __swig_setmethods__["dir_3"] = _aisparser.imo1_11_dir_3_set
    __swig_getmethods__["dir_3"] = _aisparser.imo1_11_dir_3_get
    if _newclass:dir_3 = _swig_property(_aisparser.imo1_11_dir_3_get, _aisparser.imo1_11_dir_3_set)
    __swig_setmethods__["level_3"] = _aisparser.imo1_11_level_3_set
    __swig_getmethods__["level_3"] = _aisparser.imo1_11_level_3_get
    if _newclass:level_3 = _swig_property(_aisparser.imo1_11_level_3_get, _aisparser.imo1_11_level_3_set)
    __swig_setmethods__["wave_height"] = _aisparser.imo1_11_wave_height_set
    __swig_getmethods__["wave_height"] = _aisparser.imo1_11_wave_height_get
    if _newclass:wave_height = _swig_property(_aisparser.imo1_11_wave_height_get, _aisparser.imo1_11_wave_height_set)
    __swig_setmethods__["wave_period"] = _aisparser.imo1_11_wave_period_set
    __swig_getmethods__["wave_period"] = _aisparser.imo1_11_wave_period_get
    if _newclass:wave_period = _swig_property(_aisparser.imo1_11_wave_period_get, _aisparser.imo1_11_wave_period_set)
    __swig_setmethods__["wave_dir"] = _aisparser.imo1_11_wave_dir_set
    __swig_getmethods__["wave_dir"] = _aisparser.imo1_11_wave_dir_get
    if _newclass:wave_dir = _swig_property(_aisparser.imo1_11_wave_dir_get, _aisparser.imo1_11_wave_dir_set)
    __swig_setmethods__["swell_height"] = _aisparser.imo1_11_swell_height_set
    __swig_getmethods__["swell_height"] = _aisparser.imo1_11_swell_height_get
    if _newclass:swell_height = _swig_property(_aisparser.imo1_11_swell_height_get, _aisparser.imo1_11_swell_height_set)
    __swig_setmethods__["swell_period"] = _aisparser.imo1_11_swell_period_set
    __swig_getmethods__["swell_period"] = _aisparser.imo1_11_swell_period_get
    if _newclass:swell_period = _swig_property(_aisparser.imo1_11_swell_period_get, _aisparser.imo1_11_swell_period_set)
    __swig_setmethods__["swell_dir"] = _aisparser.imo1_11_swell_dir_set
    __swig_getmethods__["swell_dir"] = _aisparser.imo1_11_swell_dir_get
    if _newclass:swell_dir = _swig_property(_aisparser.imo1_11_swell_dir_get, _aisparser.imo1_11_swell_dir_set)
    __swig_setmethods__["sea_state"] = _aisparser.imo1_11_sea_state_set
    __swig_getmethods__["sea_state"] = _aisparser.imo1_11_sea_state_get
    if _newclass:sea_state = _swig_property(_aisparser.imo1_11_sea_state_get, _aisparser.imo1_11_sea_state_set)
    __swig_setmethods__["water_temp"] = _aisparser.imo1_11_water_temp_set
    __swig_getmethods__["water_temp"] = _aisparser.imo1_11_water_temp_get
    if _newclass:water_temp = _swig_property(_aisparser.imo1_11_water_temp_get, _aisparser.imo1_11_water_temp_set)
    __swig_setmethods__["precip_type"] = _aisparser.imo1_11_precip_type_set
    __swig_getmethods__["precip_type"] = _aisparser.imo1_11_precip_type_get
    if _newclass:precip_type = _swig_property(_aisparser.imo1_11_precip_type_get, _aisparser.imo1_11_precip_type_set)
    __swig_setmethods__["salanity"] = _aisparser.imo1_11_salanity_set
    __swig_getmethods__["salanity"] = _aisparser.imo1_11_salanity_get
    if _newclass:salanity = _swig_property(_aisparser.imo1_11_salanity_get, _aisparser.imo1_11_salanity_set)
    __swig_setmethods__["ice"] = _aisparser.imo1_11_ice_set
    __swig_getmethods__["ice"] = _aisparser.imo1_11_ice_get
    if _newclass:ice = _swig_property(_aisparser.imo1_11_ice_get, _aisparser.imo1_11_ice_set)
    __swig_setmethods__["spare"] = _aisparser.imo1_11_spare_set
    __swig_getmethods__["spare"] = _aisparser.imo1_11_spare_get
    if _newclass:spare = _swig_property(_aisparser.imo1_11_spare_get, _aisparser.imo1_11_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_11(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_11
    __del__ = lambda self : None;
imo1_11_swigregister = _aisparser.imo1_11_swigregister
imo1_11_swigregister(imo1_11)

class imo1_12(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_12, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_12, name)
    __repr__ = _swig_repr
    __swig_setmethods__["last_port"] = _aisparser.imo1_12_last_port_set
    __swig_getmethods__["last_port"] = _aisparser.imo1_12_last_port_get
    if _newclass:last_port = _swig_property(_aisparser.imo1_12_last_port_get, _aisparser.imo1_12_last_port_set)
    __swig_setmethods__["atd"] = _aisparser.imo1_12_atd_set
    __swig_getmethods__["atd"] = _aisparser.imo1_12_atd_get
    if _newclass:atd = _swig_property(_aisparser.imo1_12_atd_get, _aisparser.imo1_12_atd_set)
    __swig_setmethods__["next_port"] = _aisparser.imo1_12_next_port_set
    __swig_getmethods__["next_port"] = _aisparser.imo1_12_next_port_get
    if _newclass:next_port = _swig_property(_aisparser.imo1_12_next_port_get, _aisparser.imo1_12_next_port_set)
    __swig_setmethods__["eta"] = _aisparser.imo1_12_eta_set
    __swig_getmethods__["eta"] = _aisparser.imo1_12_eta_get
    if _newclass:eta = _swig_property(_aisparser.imo1_12_eta_get, _aisparser.imo1_12_eta_set)
    __swig_setmethods__["good"] = _aisparser.imo1_12_good_set
    __swig_getmethods__["good"] = _aisparser.imo1_12_good_get
    if _newclass:good = _swig_property(_aisparser.imo1_12_good_get, _aisparser.imo1_12_good_set)
    __swig_setmethods__["imd"] = _aisparser.imo1_12_imd_set
    __swig_getmethods__["imd"] = _aisparser.imo1_12_imd_get
    if _newclass:imd = _swig_property(_aisparser.imo1_12_imd_get, _aisparser.imo1_12_imd_set)
    __swig_setmethods__["un_number"] = _aisparser.imo1_12_un_number_set
    __swig_getmethods__["un_number"] = _aisparser.imo1_12_un_number_get
    if _newclass:un_number = _swig_property(_aisparser.imo1_12_un_number_get, _aisparser.imo1_12_un_number_set)
    __swig_setmethods__["quantity"] = _aisparser.imo1_12_quantity_set
    __swig_getmethods__["quantity"] = _aisparser.imo1_12_quantity_get
    if _newclass:quantity = _swig_property(_aisparser.imo1_12_quantity_get, _aisparser.imo1_12_quantity_set)
    __swig_setmethods__["units"] = _aisparser.imo1_12_units_set
    __swig_getmethods__["units"] = _aisparser.imo1_12_units_get
    if _newclass:units = _swig_property(_aisparser.imo1_12_units_get, _aisparser.imo1_12_units_set)
    __swig_setmethods__["spare"] = _aisparser.imo1_12_spare_set
    __swig_getmethods__["spare"] = _aisparser.imo1_12_spare_get
    if _newclass:spare = _swig_property(_aisparser.imo1_12_spare_get, _aisparser.imo1_12_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_12(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_12
    __del__ = lambda self : None;
imo1_12_swigregister = _aisparser.imo1_12_swigregister
imo1_12_swigregister(imo1_12)

class imo1_13(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_13, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_13, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reason"] = _aisparser.imo1_13_reason_set
    __swig_getmethods__["reason"] = _aisparser.imo1_13_reason_get
    if _newclass:reason = _swig_property(_aisparser.imo1_13_reason_get, _aisparser.imo1_13_reason_set)
    __swig_setmethods__["location_from"] = _aisparser.imo1_13_location_from_set
    __swig_getmethods__["location_from"] = _aisparser.imo1_13_location_from_get
    if _newclass:location_from = _swig_property(_aisparser.imo1_13_location_from_get, _aisparser.imo1_13_location_from_set)
    __swig_setmethods__["location_to"] = _aisparser.imo1_13_location_to_set
    __swig_getmethods__["location_to"] = _aisparser.imo1_13_location_to_get
    if _newclass:location_to = _swig_property(_aisparser.imo1_13_location_to_get, _aisparser.imo1_13_location_to_set)
    __swig_setmethods__["extension"] = _aisparser.imo1_13_extension_set
    __swig_getmethods__["extension"] = _aisparser.imo1_13_extension_get
    if _newclass:extension = _swig_property(_aisparser.imo1_13_extension_get, _aisparser.imo1_13_extension_set)
    __swig_setmethods__["units"] = _aisparser.imo1_13_units_set
    __swig_getmethods__["units"] = _aisparser.imo1_13_units_get
    if _newclass:units = _swig_property(_aisparser.imo1_13_units_get, _aisparser.imo1_13_units_set)
    __swig_setmethods__["from_day"] = _aisparser.imo1_13_from_day_set
    __swig_getmethods__["from_day"] = _aisparser.imo1_13_from_day_get
    if _newclass:from_day = _swig_property(_aisparser.imo1_13_from_day_get, _aisparser.imo1_13_from_day_set)
    __swig_setmethods__["from_month"] = _aisparser.imo1_13_from_month_set
    __swig_getmethods__["from_month"] = _aisparser.imo1_13_from_month_get
    if _newclass:from_month = _swig_property(_aisparser.imo1_13_from_month_get, _aisparser.imo1_13_from_month_set)
    __swig_setmethods__["from_hour"] = _aisparser.imo1_13_from_hour_set
    __swig_getmethods__["from_hour"] = _aisparser.imo1_13_from_hour_get
    if _newclass:from_hour = _swig_property(_aisparser.imo1_13_from_hour_get, _aisparser.imo1_13_from_hour_set)
    __swig_setmethods__["from_minute"] = _aisparser.imo1_13_from_minute_set
    __swig_getmethods__["from_minute"] = _aisparser.imo1_13_from_minute_get
    if _newclass:from_minute = _swig_property(_aisparser.imo1_13_from_minute_get, _aisparser.imo1_13_from_minute_set)
    __swig_setmethods__["to_day"] = _aisparser.imo1_13_to_day_set
    __swig_getmethods__["to_day"] = _aisparser.imo1_13_to_day_get
    if _newclass:to_day = _swig_property(_aisparser.imo1_13_to_day_get, _aisparser.imo1_13_to_day_set)
    __swig_setmethods__["to_month"] = _aisparser.imo1_13_to_month_set
    __swig_getmethods__["to_month"] = _aisparser.imo1_13_to_month_get
    if _newclass:to_month = _swig_property(_aisparser.imo1_13_to_month_get, _aisparser.imo1_13_to_month_set)
    __swig_setmethods__["to_hour"] = _aisparser.imo1_13_to_hour_set
    __swig_getmethods__["to_hour"] = _aisparser.imo1_13_to_hour_get
    if _newclass:to_hour = _swig_property(_aisparser.imo1_13_to_hour_get, _aisparser.imo1_13_to_hour_set)
    __swig_setmethods__["to_minute"] = _aisparser.imo1_13_to_minute_set
    __swig_getmethods__["to_minute"] = _aisparser.imo1_13_to_minute_get
    if _newclass:to_minute = _swig_property(_aisparser.imo1_13_to_minute_get, _aisparser.imo1_13_to_minute_set)
    __swig_setmethods__["spare"] = _aisparser.imo1_13_spare_set
    __swig_getmethods__["spare"] = _aisparser.imo1_13_spare_get
    if _newclass:spare = _swig_property(_aisparser.imo1_13_spare_get, _aisparser.imo1_13_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_13(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_13
    __del__ = lambda self : None;
imo1_13_swigregister = _aisparser.imo1_13_swigregister
imo1_13_swigregister(imo1_13)

class tidal_window(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tidal_window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tidal_window, name)
    __repr__ = _swig_repr
    __swig_setmethods__["latitude"] = _aisparser.tidal_window_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.tidal_window_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.tidal_window_latitude_get, _aisparser.tidal_window_latitude_set)
    __swig_setmethods__["longitude"] = _aisparser.tidal_window_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.tidal_window_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.tidal_window_longitude_get, _aisparser.tidal_window_longitude_set)
    __swig_setmethods__["from_hour"] = _aisparser.tidal_window_from_hour_set
    __swig_getmethods__["from_hour"] = _aisparser.tidal_window_from_hour_get
    if _newclass:from_hour = _swig_property(_aisparser.tidal_window_from_hour_get, _aisparser.tidal_window_from_hour_set)
    __swig_setmethods__["from_minute"] = _aisparser.tidal_window_from_minute_set
    __swig_getmethods__["from_minute"] = _aisparser.tidal_window_from_minute_get
    if _newclass:from_minute = _swig_property(_aisparser.tidal_window_from_minute_get, _aisparser.tidal_window_from_minute_set)
    __swig_setmethods__["to_hour"] = _aisparser.tidal_window_to_hour_set
    __swig_getmethods__["to_hour"] = _aisparser.tidal_window_to_hour_get
    if _newclass:to_hour = _swig_property(_aisparser.tidal_window_to_hour_get, _aisparser.tidal_window_to_hour_set)
    __swig_setmethods__["to_minute"] = _aisparser.tidal_window_to_minute_set
    __swig_getmethods__["to_minute"] = _aisparser.tidal_window_to_minute_get
    if _newclass:to_minute = _swig_property(_aisparser.tidal_window_to_minute_get, _aisparser.tidal_window_to_minute_set)
    __swig_setmethods__["current_dir"] = _aisparser.tidal_window_current_dir_set
    __swig_getmethods__["current_dir"] = _aisparser.tidal_window_current_dir_get
    if _newclass:current_dir = _swig_property(_aisparser.tidal_window_current_dir_get, _aisparser.tidal_window_current_dir_set)
    __swig_setmethods__["current_speed"] = _aisparser.tidal_window_current_speed_set
    __swig_getmethods__["current_speed"] = _aisparser.tidal_window_current_speed_get
    if _newclass:current_speed = _swig_property(_aisparser.tidal_window_current_speed_get, _aisparser.tidal_window_current_speed_set)
    def __init__(self, *args):
        this = _aisparser.new_tidal_window(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_tidal_window
    __del__ = lambda self : None;
tidal_window_swigregister = _aisparser.tidal_window_swigregister
tidal_window_swigregister(tidal_window)

class imo1_14(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_14, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_14, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc_month"] = _aisparser.imo1_14_utc_month_set
    __swig_getmethods__["utc_month"] = _aisparser.imo1_14_utc_month_get
    if _newclass:utc_month = _swig_property(_aisparser.imo1_14_utc_month_get, _aisparser.imo1_14_utc_month_set)
    __swig_setmethods__["utc_day"] = _aisparser.imo1_14_utc_day_set
    __swig_getmethods__["utc_day"] = _aisparser.imo1_14_utc_day_get
    if _newclass:utc_day = _swig_property(_aisparser.imo1_14_utc_day_get, _aisparser.imo1_14_utc_day_set)
    __swig_setmethods__["windows"] = _aisparser.imo1_14_windows_set
    __swig_getmethods__["windows"] = _aisparser.imo1_14_windows_get
    if _newclass:windows = _swig_property(_aisparser.imo1_14_windows_get, _aisparser.imo1_14_windows_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_14(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_14
    __del__ = lambda self : None;
imo1_14_swigregister = _aisparser.imo1_14_swigregister
imo1_14_swigregister(imo1_14)

class imo1_15(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_15, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_15, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ais_draught"] = _aisparser.imo1_15_ais_draught_set
    __swig_getmethods__["ais_draught"] = _aisparser.imo1_15_ais_draught_get
    if _newclass:ais_draught = _swig_property(_aisparser.imo1_15_ais_draught_get, _aisparser.imo1_15_ais_draught_set)
    __swig_setmethods__["spare"] = _aisparser.imo1_15_spare_set
    __swig_getmethods__["spare"] = _aisparser.imo1_15_spare_get
    if _newclass:spare = _swig_property(_aisparser.imo1_15_spare_get, _aisparser.imo1_15_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_15(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_15
    __del__ = lambda self : None;
imo1_15_swigregister = _aisparser.imo1_15_swigregister
imo1_15_swigregister(imo1_15)

class imo1_16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_16, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_persons"] = _aisparser.imo1_16_num_persons_set
    __swig_getmethods__["num_persons"] = _aisparser.imo1_16_num_persons_get
    if _newclass:num_persons = _swig_property(_aisparser.imo1_16_num_persons_get, _aisparser.imo1_16_num_persons_set)
    __swig_setmethods__["spare"] = _aisparser.imo1_16_spare_set
    __swig_getmethods__["spare"] = _aisparser.imo1_16_spare_get
    if _newclass:spare = _swig_property(_aisparser.imo1_16_spare_get, _aisparser.imo1_16_spare_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_16(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_16
    __del__ = lambda self : None;
imo1_16_swigregister = _aisparser.imo1_16_swigregister
imo1_16_swigregister(imo1_16)

class pseudo_target(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pseudo_target, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pseudo_target, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _aisparser.pseudo_target_type_set
    __swig_getmethods__["type"] = _aisparser.pseudo_target_type_get
    if _newclass:type = _swig_property(_aisparser.pseudo_target_type_get, _aisparser.pseudo_target_type_set)
    __swig_setmethods__["mmsi"] = _aisparser.pseudo_target_mmsi_set
    __swig_getmethods__["mmsi"] = _aisparser.pseudo_target_mmsi_get
    if _newclass:mmsi = _swig_property(_aisparser.pseudo_target_mmsi_get, _aisparser.pseudo_target_mmsi_set)
    __swig_setmethods__["imo"] = _aisparser.pseudo_target_imo_set
    __swig_getmethods__["imo"] = _aisparser.pseudo_target_imo_get
    if _newclass:imo = _swig_property(_aisparser.pseudo_target_imo_get, _aisparser.pseudo_target_imo_set)
    __swig_setmethods__["callsign"] = _aisparser.pseudo_target_callsign_set
    __swig_getmethods__["callsign"] = _aisparser.pseudo_target_callsign_get
    if _newclass:callsign = _swig_property(_aisparser.pseudo_target_callsign_get, _aisparser.pseudo_target_callsign_set)
    __swig_setmethods__["other"] = _aisparser.pseudo_target_other_set
    __swig_getmethods__["other"] = _aisparser.pseudo_target_other_get
    if _newclass:other = _swig_property(_aisparser.pseudo_target_other_get, _aisparser.pseudo_target_other_set)
    __swig_setmethods__["spare"] = _aisparser.pseudo_target_spare_set
    __swig_getmethods__["spare"] = _aisparser.pseudo_target_spare_get
    if _newclass:spare = _swig_property(_aisparser.pseudo_target_spare_get, _aisparser.pseudo_target_spare_set)
    __swig_setmethods__["latitude"] = _aisparser.pseudo_target_latitude_set
    __swig_getmethods__["latitude"] = _aisparser.pseudo_target_latitude_get
    if _newclass:latitude = _swig_property(_aisparser.pseudo_target_latitude_get, _aisparser.pseudo_target_latitude_set)
    __swig_setmethods__["longitude"] = _aisparser.pseudo_target_longitude_set
    __swig_getmethods__["longitude"] = _aisparser.pseudo_target_longitude_get
    if _newclass:longitude = _swig_property(_aisparser.pseudo_target_longitude_get, _aisparser.pseudo_target_longitude_set)
    __swig_setmethods__["cog"] = _aisparser.pseudo_target_cog_set
    __swig_getmethods__["cog"] = _aisparser.pseudo_target_cog_get
    if _newclass:cog = _swig_property(_aisparser.pseudo_target_cog_get, _aisparser.pseudo_target_cog_set)
    __swig_setmethods__["timestamp"] = _aisparser.pseudo_target_timestamp_set
    __swig_getmethods__["timestamp"] = _aisparser.pseudo_target_timestamp_get
    if _newclass:timestamp = _swig_property(_aisparser.pseudo_target_timestamp_get, _aisparser.pseudo_target_timestamp_set)
    __swig_setmethods__["sog"] = _aisparser.pseudo_target_sog_set
    __swig_getmethods__["sog"] = _aisparser.pseudo_target_sog_get
    if _newclass:sog = _swig_property(_aisparser.pseudo_target_sog_get, _aisparser.pseudo_target_sog_set)
    def __init__(self, *args):
        this = _aisparser.new_pseudo_target(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_pseudo_target
    __del__ = lambda self : None;
pseudo_target_swigregister = _aisparser.pseudo_target_swigregister
pseudo_target_swigregister(pseudo_target)

class imo1_17(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imo1_17, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imo1_17, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targets"] = _aisparser.imo1_17_targets_set
    __swig_getmethods__["targets"] = _aisparser.imo1_17_targets_get
    if _newclass:targets = _swig_property(_aisparser.imo1_17_targets_get, _aisparser.imo1_17_targets_set)
    def __init__(self, *args):
        this = _aisparser.new_imo1_17(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aisparser.delete_imo1_17
    __del__ = lambda self : None;
imo1_17_swigregister = _aisparser.imo1_17_swigregister
imo1_17_swigregister(imo1_17)

parse_imo1_11 = _aisparser.parse_imo1_11
parse_imo1_12 = _aisparser.parse_imo1_12
parse_imo1_13 = _aisparser.parse_imo1_13
parse_imo1_14 = _aisparser.parse_imo1_14
parse_imo1_15 = _aisparser.parse_imo1_15
parse_imo1_16 = _aisparser.parse_imo1_16
parse_imo1_17 = _aisparser.parse_imo1_17
get_msg6_data = _aisparser.get_msg6_data
get_msg8_data = _aisparser.get_msg8_data
get_msg17_data = _aisparser.get_msg17_data
get_weather_report = _aisparser.get_weather_report
get_weather_utc_time = _aisparser.get_weather_utc_time
get_wind_report = _aisparser.get_wind_report
get_wind_utc_time = _aisparser.get_wind_utc_time
get_water_level_report = _aisparser.get_water_level_report
get_water_level_utc_time = _aisparser.get_water_level_utc_time
get_water_flow_report = _aisparser.get_water_flow_report
get_water_flow_utc_time = _aisparser.get_water_flow_utc_time
get_lock_schedule = _aisparser.get_lock_schedule
get_lock_schedule_utc_time = _aisparser.get_lock_schedule_utc_time
get_lock_schedule_eta = _aisparser.get_lock_schedule_eta
get_lock_times_utc_time = _aisparser.get_lock_times_utc_time
get_lock_times_last_ata = _aisparser.get_lock_times_last_ata
get_lock_times_first_eta = _aisparser.get_lock_times_first_eta
get_lock_times_second_eta = _aisparser.get_lock_times_second_eta
get_current_report = _aisparser.get_current_report
get_current_utc_time = _aisparser.get_current_utc_time
get_salinity_report = _aisparser.get_salinity_report
get_salinity_utc_time = _aisparser.get_salinity_utc_time
get_procession_order = _aisparser.get_procession_order
get_procession_order_utc_time = _aisparser.get_procession_order_utc_time
get_imo1_12_atd = _aisparser.get_imo1_12_atd
get_imo1_12_eta = _aisparser.get_imo1_12_eta
get_tidal_window = _aisparser.get_tidal_window
get_pseudo_target = _aisparser.get_pseudo_target


